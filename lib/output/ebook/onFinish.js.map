{"version":3,"sources":["../../../src/output/ebook/onFinish.js"],"names":["path","require","JSONUtils","Promise","error","command","writeFile","render","getConvertOptions","SUMMARY_FILE","writeSummary","output","plugins","getPlugins","initialState","encodeState","html","runEbookConvert","logger","getLogger","options","getOptions","format","get","outputFolder","getRoot","then","cmd","resolve","optionsToShellArgs","join","exec","progress","data","debug","fail","err","code","RequireInstallError","install","EbookError","thenResolve","onFinish","module","exports"],"mappings":";;AAAA,IAAMA,OAAOC,QAAQ,MAAR,CAAb;;AAEA,IAAMC,YAAYD,QAAQ,YAAR,CAAlB;AACA,IAAME,UAAUF,QAAQ,qBAAR,CAAhB;AACA,IAAMG,QAAQH,QAAQ,mBAAR,CAAd;AACA,IAAMI,UAAUJ,QAAQ,qBAAR,CAAhB;AACA,IAAMK,YAAYL,QAAQ,qBAAR,CAAlB;AACA,IAAMM,SAASN,QAAQ,sBAAR,CAAf;;AAEA,IAAMO,oBAAoBP,QAAQ,qBAAR,CAA1B;AACA,IAAMQ,eAAe,cAArB;;AAEA;;;;;;AAMA,SAASC,YAAT,CAAsBC,MAAtB,EAA8B;AAC1B,QAAMC,UAAUD,OAAOE,UAAP,EAAhB;;AAEA;AACA,QAAMC,eAAeZ,UAAUa,WAAV,CAAsBJ,MAAtB,CAArB;;AAEA;AACA,QAAMK,OAAOT,OAAOK,OAAP,EAAgBE,YAAhB,EAA8B,OAA9B,EAAuC,eAAvC,CAAb;;AAEA,WAAOR,UAAUK,MAAV,EAAkBF,YAAlB,EAAgCO,IAAhC,CAAP;AACH;;AAED;;;;;;AAMA,SAASC,eAAT,CAAyBN,MAAzB,EAAiC;AAC7B,QAAMO,SAASP,OAAOQ,SAAP,EAAf;AACA,QAAMC,UAAUT,OAAOU,UAAP,EAAhB;AACA,QAAMC,SAASF,QAAQG,GAAR,CAAY,QAAZ,CAAf;AACA,QAAMC,eAAeb,OAAOc,OAAP,EAArB;;AAEA,QAAI,CAACH,MAAL,EAAa;AACT,eAAOnB,QAAQQ,MAAR,CAAP;AACH;;AAED,WAAOH,kBAAkBG,MAAlB,EACNe,IADM,CACD,UAACN,OAAD,EAAa;AACf,YAAMO,MAAM,CACR,eADQ,EAER3B,KAAK4B,OAAL,CAAaJ,YAAb,EAA2Bf,YAA3B,CAFQ,EAGRT,KAAK4B,OAAL,CAAaJ,YAAb,EAA2B,WAAWF,MAAtC,CAHQ,EAIRjB,QAAQwB,kBAAR,CAA2BT,OAA3B,CAJQ,EAKVU,IALU,CAKL,GALK,CAAZ;;AAOA,eAAOzB,QAAQ0B,IAAR,CAAaJ,GAAb,EACNK,QADM,CACG,UAACC,IAAD,EAAU;AAChBf,mBAAOgB,KAAP,CAAaD,IAAb;AACH,SAHM,EAINE,IAJM,CAID,UAACC,GAAD,EAAS;AACX,gBAAIA,IAAIC,IAAJ,IAAY,GAAhB,EAAqB;AACjB,sBAAMjC,MAAMkC,mBAAN,CAA0B;AAC5BX,yBAAK,eADuB;AAE5BY,6BAAS;AAFmB,iBAA1B,CAAN;AAIH;;AAED,kBAAMnC,MAAMoC,UAAN,CAAiBJ,GAAjB,CAAN;AACH,SAbM,CAAP;AAcH,KAvBM,EAwBNK,WAxBM,CAwBM9B,MAxBN,CAAP;AAyBH;;AAED;;;;;;AAMA,SAAS+B,QAAT,CAAkB/B,MAAlB,EAA0B;AACtB,WAAOD,aAAaC,MAAb,EACNe,IADM,CACDT,eADC,CAAP;AAEH;;AAED0B,OAAOC,OAAP,GAAiBF,QAAjB","file":"onFinish.js","sourcesContent":["const path = require('path');\n\nconst JSONUtils = require('../../json');\nconst Promise = require('../../utils/promise');\nconst error = require('../../utils/error');\nconst command = require('../../utils/command');\nconst writeFile = require('../helper/writeFile');\nconst render = require('../../browser/render');\n\nconst getConvertOptions = require('./getConvertOptions');\nconst SUMMARY_FILE = 'SUMMARY.html';\n\n/**\n * Write the SUMMARY.html\n *\n * @param {Output} output\n * @return {Output} output\n */\nfunction writeSummary(output) {\n    const plugins = output.getPlugins();\n\n    // Generate initial state\n    const initialState = JSONUtils.encodeState(output);\n\n    // Render using React\n    const html = render(plugins, initialState, 'ebook', 'ebook:summary');\n\n    return writeFile(output, SUMMARY_FILE, html);\n}\n\n/**\n * Generate the ebook file as \"index.pdf\"\n *\n * @param {Output} output\n * @return {Output} output\n */\nfunction runEbookConvert(output) {\n    const logger = output.getLogger();\n    const options = output.getOptions();\n    const format = options.get('format');\n    const outputFolder = output.getRoot();\n\n    if (!format) {\n        return Promise(output);\n    }\n\n    return getConvertOptions(output)\n    .then((options) => {\n        const cmd = [\n            'ebook-convert',\n            path.resolve(outputFolder, SUMMARY_FILE),\n            path.resolve(outputFolder, 'index.' + format),\n            command.optionsToShellArgs(options)\n        ].join(' ');\n\n        return command.exec(cmd)\n        .progress((data) => {\n            logger.debug(data);\n        })\n        .fail((err) => {\n            if (err.code == 127) {\n                throw error.RequireInstallError({\n                    cmd: 'ebook-convert',\n                    install: 'Install it from Calibre: https://calibre-ebook.com'\n                });\n            }\n\n            throw error.EbookError(err);\n        });\n    })\n    .thenResolve(output);\n}\n\n/**\n * Finish the generation, generates the SUMMARY.html\n *\n * @param {Output} output\n * @return {Output} output\n */\nfunction onFinish(output) {\n    return writeSummary(output)\n    .then(runEbookConvert);\n}\n\nmodule.exports = onFinish;\n"]}