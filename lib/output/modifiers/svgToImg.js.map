{"version":3,"sources":["../../../src/output/modifiers/svgToImg.js"],"names":["path","require","crc","domSerializer","editHTMLElement","fs","LocationUtils","renderDOM","$","dom","options","_root","children","_options","svgToImg","baseFolder","currentFile","currentDirectory","dirname","$svg","content","hash","crc32","toString","fileName","filePath","join","assertFile","writeFile","then","src","relative","replaceWith","module","exports"],"mappings":";;AAAA,IAAMA,OAAOC,QAAQ,MAAR,CAAb;AACA,IAAMC,MAAMD,QAAQ,KAAR,CAAZ;AACA,IAAME,gBAAgBF,QAAQ,gBAAR,CAAtB;;AAEA,IAAMG,kBAAkBH,QAAQ,mBAAR,CAAxB;AACA,IAAMI,KAAKJ,QAAQ,gBAAR,CAAX;AACA,IAAMK,gBAAgBL,QAAQ,sBAAR,CAAtB;;AAEA;;;;;;;;AAQA,SAASM,SAAT,CAAmBC,CAAnB,EAAsBC,GAAtB,EAA2BC,OAA3B,EAAoC;AAChC,QAAI,CAACD,GAAD,IAAQD,EAAEG,KAAV,IAAmBH,EAAEG,KAAF,CAAQC,QAA/B,EAAyC;AACrCH,cAAMD,EAAEG,KAAF,CAAQC,QAAd;AACH;AACDF,cAAUA,WAAWD,IAAIC,OAAf,IAA0BF,EAAEK,QAAtC;AACA,WAAOV,cAAcM,GAAd,EAAmBC,OAAnB,CAAP;AACH;;AAED;;;;;;AAMA,SAASI,QAAT,CAAkBC,UAAlB,EAA8BC,WAA9B,EAA2CR,CAA3C,EAA8C;AAC1C,QAAMS,mBAAmBjB,KAAKkB,OAAL,CAAaF,WAAb,CAAzB;;AAEA,WAAOZ,gBAAgBI,CAAhB,EAAmB,KAAnB,EAA0B,UAACW,IAAD,EAAU;AACvC,YAAMC,UAAU,2CACZb,UAAUC,CAAV,EAAaW,IAAb,CADJ;;AAGA;AACA,YAAME,OAAOnB,IAAIoB,KAAJ,CAAUF,OAAV,EAAmBG,QAAnB,CAA4B,EAA5B,CAAb;AACA,YAAMC,WAAWH,OAAO,MAAxB;AACA,YAAMI,WAAWzB,KAAK0B,IAAL,CAAUX,UAAV,EAAsBS,QAAtB,CAAjB;;AAEA;AACA,eAAOnB,GAAGsB,UAAH,CAAcF,QAAd,EAAwB,YAAM;AACjC,mBAAOpB,GAAGuB,SAAH,CAAaH,QAAb,EAAuBL,OAAvB,EAAgC,MAAhC,CAAP;AACH,SAFM;;AAIP;AAJO,SAKNS,IALM,CAKD,YAAM;AACR,gBAAMC,MAAMxB,cAAcyB,QAAd,CAAuBd,gBAAvB,EAAyCO,QAAzC,CAAZ;AACAL,iBAAKa,WAAL,CAAiB,eAAeF,GAAf,GAAqB,MAAtC;AACH,SARM,CAAP;AASH,KAnBM,CAAP;AAoBH;;AAEDG,OAAOC,OAAP,GAAiBpB,QAAjB","file":"svgToImg.js","sourcesContent":["const path = require('path');\nconst crc = require('crc');\nconst domSerializer = require('dom-serializer');\n\nconst editHTMLElement = require('./editHTMLElement');\nconst fs = require('../../utils/fs');\nconst LocationUtils = require('../../utils/location');\n\n/**\n    Render a cheerio DOM as html\n\n    @param {HTMLDom} $\n    @param {HTMLElement} dom\n    @param {Object}\n    @return {String}\n*/\nfunction renderDOM($, dom, options) {\n    if (!dom && $._root && $._root.children) {\n        dom = $._root.children;\n    }\n    options = options || dom.options || $._options;\n    return domSerializer(dom, options);\n}\n\n/**\n    Replace SVG tag by IMG\n\n    @param {String} baseFolder\n    @param {HTMLDom} $\n*/\nfunction svgToImg(baseFolder, currentFile, $) {\n    const currentDirectory = path.dirname(currentFile);\n\n    return editHTMLElement($, 'svg', ($svg) => {\n        const content = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>' +\n            renderDOM($, $svg);\n\n        // We avoid generating twice the same PNG\n        const hash = crc.crc32(content).toString(16);\n        const fileName = hash + '.svg';\n        const filePath = path.join(baseFolder, fileName);\n\n        // Write the svg to the file\n        return fs.assertFile(filePath, () => {\n            return fs.writeFile(filePath, content, 'utf8');\n        })\n\n        // Return as image\n        .then(() => {\n            const src = LocationUtils.relative(currentDirectory, fileName);\n            $svg.replaceWith('<img src=\"' + src + '\" />');\n        });\n    });\n}\n\nmodule.exports = svgToImg;\n"]}