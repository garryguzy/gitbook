{"version":3,"sources":["../../../src/output/modifiers/fetchRemoteImages.js"],"names":["path","require","crc","editHTMLElement","fs","LocationUtils","fetchRemoteImages","rootFolder","currentFile","$","currentDirectory","dirname","$img","src","attr","extension","extname","isExternal","hash","crc32","toString","fileName","filePath","join","assertFile","download","then","relative","replaceWith","module","exports"],"mappings":";;AAAA,IAAMA,OAAOC,QAAQ,MAAR,CAAb;AACA,IAAMC,MAAMD,QAAQ,KAAR,CAAZ;;AAEA,IAAME,kBAAkBF,QAAQ,mBAAR,CAAxB;AACA,IAAMG,KAAKH,QAAQ,gBAAR,CAAX;AACA,IAAMI,gBAAgBJ,QAAQ,sBAAR,CAAtB;;AAEA;;;;;;;;AAQA,SAASK,iBAAT,CAA2BC,UAA3B,EAAuCC,WAAvC,EAAoDC,CAApD,EAAuD;AACnD,QAAMC,mBAAmBV,KAAKW,OAAL,CAAaH,WAAb,CAAzB;;AAEA,WAAOL,gBAAgBM,CAAhB,EAAmB,KAAnB,EAA0B,UAACG,IAAD,EAAU;AACvC,YAAIC,MAAMD,KAAKE,IAAL,CAAU,KAAV,CAAV;AACA,YAAMC,YAAYf,KAAKgB,OAAL,CAAaH,GAAb,CAAlB;;AAEA,YAAI,CAACR,cAAcY,UAAd,CAAyBJ,GAAzB,CAAL,EAAoC;AAChC;AACH;;AAED;AACA,YAAMK,OAAOhB,IAAIiB,KAAJ,CAAUN,GAAV,EAAeO,QAAf,CAAwB,EAAxB,CAAb;AACA,YAAMC,WAAWH,OAAOH,SAAxB;AACA,YAAMO,WAAWtB,KAAKuB,IAAL,CAAUhB,UAAV,EAAsBc,QAAtB,CAAjB;;AAEA,eAAOjB,GAAGoB,UAAH,CAAcF,QAAd,EAAwB,YAAM;AACjC,mBAAOlB,GAAGqB,QAAH,CAAYZ,GAAZ,EAAiBS,QAAjB,CAAP;AACH,SAFM,EAGNI,IAHM,CAGD,YAAM;AACR;AACAb,kBAAMR,cAAcsB,QAAd,CAAuBjB,gBAAvB,EAAyCW,QAAzC,CAAN;;AAEAT,iBAAKgB,WAAL,CAAiB,eAAef,GAAf,GAAqB,MAAtC;AACH,SARM,CAAP;AASH,KAtBM,CAAP;AAuBH;;AAEDgB,OAAOC,OAAP,GAAiBxB,iBAAjB","file":"fetchRemoteImages.js","sourcesContent":["const path = require('path');\nconst crc = require('crc');\n\nconst editHTMLElement = require('./editHTMLElement');\nconst fs = require('../../utils/fs');\nconst LocationUtils = require('../../utils/location');\n\n/**\n * Fetch all remote images\n *\n * @param {String} rootFolder\n * @param {String} currentFile\n * @param {HTMLDom} $\n * @return {Promise}\n */\nfunction fetchRemoteImages(rootFolder, currentFile, $) {\n    const currentDirectory = path.dirname(currentFile);\n\n    return editHTMLElement($, 'img', ($img) => {\n        let src = $img.attr('src');\n        const extension = path.extname(src);\n\n        if (!LocationUtils.isExternal(src)) {\n            return;\n        }\n\n        // We avoid generating twice the same PNG\n        const hash = crc.crc32(src).toString(16);\n        const fileName = hash + extension;\n        const filePath = path.join(rootFolder, fileName);\n\n        return fs.assertFile(filePath, () => {\n            return fs.download(src, filePath);\n        })\n        .then(() => {\n            // Convert to relative\n            src = LocationUtils.relative(currentDirectory, fileName);\n\n            $img.replaceWith('<img src=\"' + src + '\" />');\n        });\n    });\n}\n\nmodule.exports = fetchRemoteImages;\n"]}