{"version":3,"sources":["../../../src/output/modifiers/inlinePng.js"],"names":["crc","require","path","imagesUtil","fs","LocationUtils","editHTMLElement","inlinePng","rootFolder","currentFile","$","currentDirectory","dirname","$img","src","attr","isDataURI","hash","crc32","toString","fileName","filePath","join","assertFile","convertInlinePNG","then","relative","module","exports"],"mappings":";;AAAA,IAAMA,MAAMC,QAAQ,KAAR,CAAZ;AACA,IAAMC,OAAOD,QAAQ,MAAR,CAAb;;AAEA,IAAME,aAAaF,QAAQ,oBAAR,CAAnB;AACA,IAAMG,KAAKH,QAAQ,gBAAR,CAAX;AACA,IAAMI,gBAAgBJ,QAAQ,sBAAR,CAAtB;;AAEA,IAAMK,kBAAkBL,QAAQ,mBAAR,CAAxB;;AAEA;;;;;;;AAOA,SAASM,SAAT,CAAmBC,UAAnB,EAA+BC,WAA/B,EAA4CC,CAA5C,EAA+C;AAC3C,QAAMC,mBAAmBT,KAAKU,OAAL,CAAaH,WAAb,CAAzB;;AAEA,WAAOH,gBAAgBI,CAAhB,EAAmB,KAAnB,EAA0B,UAACG,IAAD,EAAU;AACvC,YAAMC,MAAMD,KAAKE,IAAL,CAAU,KAAV,CAAZ;AACA,YAAI,CAACV,cAAcW,SAAd,CAAwBF,GAAxB,CAAL,EAAmC;AAC/B;AACH;;AAED;AACA,YAAMG,OAAOjB,IAAIkB,KAAJ,CAAUJ,GAAV,EAAeK,QAAf,CAAwB,EAAxB,CAAb;AACA,YAAIC,WAAWH,OAAO,MAAtB;;AAEA;AACA,YAAMI,WAAWnB,KAAKoB,IAAL,CAAUd,UAAV,EAAsBY,QAAtB,CAAjB;;AAEA,eAAOhB,GAAGmB,UAAH,CAAcF,QAAd,EAAwB,YAAM;AACjC,mBAAOlB,WAAWqB,gBAAX,CAA4BV,GAA5B,EAAiCO,QAAjC,CAAP;AACH,SAFM,EAGNI,IAHM,CAGD,YAAM;AACR;AACAL,uBAAWf,cAAcqB,QAAd,CAAuBf,gBAAvB,EAAyCS,QAAzC,CAAX;;AAEA;AACAP,iBAAKE,IAAL,CAAU,KAAV,EAAiBK,QAAjB;AACH,SATM,CAAP;AAUH,KAvBM,CAAP;AAwBH;;AAEDO,OAAOC,OAAP,GAAiBrB,SAAjB","file":"inlinePng.js","sourcesContent":["const crc = require('crc');\nconst path = require('path');\n\nconst imagesUtil = require('../../utils/images');\nconst fs = require('../../utils/fs');\nconst LocationUtils = require('../../utils/location');\n\nconst editHTMLElement = require('./editHTMLElement');\n\n/**\n * Convert all inline PNG images to PNG file\n *\n * @param {String} rootFolder\n * @param {HTMLDom} $\n * @return {Promise}\n */\nfunction inlinePng(rootFolder, currentFile, $) {\n    const currentDirectory = path.dirname(currentFile);\n\n    return editHTMLElement($, 'img', ($img) => {\n        const src = $img.attr('src');\n        if (!LocationUtils.isDataURI(src)) {\n            return;\n        }\n\n        // We avoid generating twice the same PNG\n        const hash = crc.crc32(src).toString(16);\n        let fileName = hash + '.png';\n\n        // Result file path\n        const filePath = path.join(rootFolder, fileName);\n\n        return fs.assertFile(filePath, () => {\n            return imagesUtil.convertInlinePNG(src, filePath);\n        })\n        .then(() => {\n            // Convert filename to a relative filename\n            fileName = LocationUtils.relative(currentDirectory, fileName);\n\n            // Replace src\n            $img.attr('src', fileName);\n        });\n    });\n}\n\nmodule.exports = inlinePng;\n"]}