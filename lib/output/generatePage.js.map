{"version":3,"sources":["../../src/output/generatePage.js"],"names":["path","require","Promise","error","timing","Templating","JSONUtils","createTemplateEngine","callPageHook","generatePage","output","page","book","getBook","engine","measure","then","resultPage","file","getFile","filePath","parser","context","encodeState","reject","FileNotParsableError","filename","content","prepare","absoluteFilePath","join","getContentRoot","render","toHTML","set","currentPage","module","exports"],"mappings":";;AAAA,IAAMA,OAAOC,QAAQ,MAAR,CAAb;;AAEA,IAAMC,UAAUD,QAAQ,kBAAR,CAAhB;AACA,IAAME,QAAQF,QAAQ,gBAAR,CAAd;AACA,IAAMG,SAASH,QAAQ,iBAAR,CAAf;;AAEA,IAAMI,aAAaJ,QAAQ,eAAR,CAAnB;AACA,IAAMK,YAAYL,QAAQ,SAAR,CAAlB;AACA,IAAMM,uBAAuBN,QAAQ,wBAAR,CAA7B;AACA,IAAMO,eAAeP,QAAQ,gBAAR,CAArB;;AAEA;;;;;;;AAOA,SAASQ,YAAT,CAAsBC,MAAtB,EAA8BC,IAA9B,EAAoC;AAChC,QAAMC,OAAOF,OAAOG,OAAP,EAAb;AACA,QAAMC,SAASP,qBAAqBG,MAArB,CAAf;;AAEA,WAAON,OAAOW,OAAP,CACH,eADG,EAEHb,QAAQS,IAAR,EACCK,IADD,CACM,UAACC,UAAD,EAAgB;AAClB,YAAMC,OAAOD,WAAWE,OAAX,EAAb;AADkB,YAEJC,QAFI,GAEiBF,IAFjB,CAEVlB,IAFU;AAAA,YAEMqB,MAFN,GAEiBH,IAFjB,CAEMG,MAFN;;AAGlB,YAAMC,UAAUhB,UAAUiB,WAAV,CAAsBb,MAAtB,EAA8BO,UAA9B,CAAhB;;AAEA,YAAI,CAACI,MAAL,EAAa;AACT,mBAAOnB,QAAQsB,MAAR,CAAerB,MAAMsB,oBAAN,CAA2B;AAC7CC,0BAAUN;AADmC,aAA3B,CAAf,CAAP;AAGH;;AAED;AACA,eAAOZ,aAAa,aAAb,EAA4BE,MAA5B,EAAoCO,UAApC;;AAEP;AAFO,SAGND,IAHM,CAGD,gBAAiB;AAAA,gBAAdW,OAAc,QAAdA,OAAc;;AACnB,mBAAON,OAAOO,OAAP,CAAeD,OAAf,CAAP;AACH,SALM;;AAOP;AAPO,SAQNX,IARM,CAQD,UAACW,OAAD,EAAa;AACf,gBAAME,mBAAmB7B,KAAK8B,IAAL,CAAUlB,KAAKmB,cAAL,EAAV,EAAiCX,QAAjC,CAAzB;AACA,mBAAOf,WAAW2B,MAAX,CAAkBlB,MAAlB,EAA0Be,gBAA1B,EAA4CF,OAA5C,EAAqDL,OAArD,CAAP;AACH,SAXM;;AAaP;AAbO,SAcNN,IAdM,CAcD,UAACW,OAAD,EAAa;AACfA,sBAAUN,OAAOY,MAAP,CAAcN,OAAd,CAAV;AACA,mBAAOV,WAAWiB,GAAX,CAAe,SAAf,EAA0BP,OAA1B,CAAP;AACH,SAjBM;;AAmBP;AAnBO,SAoBNX,IApBM,CAoBD,UAACmB,WAAD,EAAiB;AACnB,mBAAO3B,aAAa,MAAb,EAAqBE,MAArB,EAA6ByB,WAA7B,CAAP;AACH,SAtBM,CAAP;AAuBH,KApCD,CAFG,CAAP;AAwCH;;AAEDC,OAAOC,OAAP,GAAiB5B,YAAjB","file":"generatePage.js","sourcesContent":["const path = require('path');\n\nconst Promise = require('../utils/promise');\nconst error = require('../utils/error');\nconst timing = require('../utils/timing');\n\nconst Templating = require('../templating');\nconst JSONUtils = require('../json');\nconst createTemplateEngine = require('./createTemplateEngine');\nconst callPageHook = require('./callPageHook');\n\n/**\n * Prepare and generate HTML for a page\n *\n * @param {Output} output\n * @param {Page} page\n * @return {Promise<Page>}\n */\nfunction generatePage(output, page) {\n    const book = output.getBook();\n    const engine = createTemplateEngine(output);\n\n    return timing.measure(\n        'page.generate',\n        Promise(page)\n        .then((resultPage) => {\n            const file = resultPage.getFile();\n            const { path: filePath, parser } = file;\n            const context = JSONUtils.encodeState(output, resultPage);\n\n            if (!parser) {\n                return Promise.reject(error.FileNotParsableError({\n                    filename: filePath\n                }));\n            }\n\n            // Call hook \"page:before\"\n            return callPageHook('page:before', output, resultPage)\n\n            // Escape code blocks with raw tags\n            .then(({ content }) => {\n                return parser.prepare(content);\n            })\n\n            // Render templating syntax\n            .then((content) => {\n                const absoluteFilePath = path.join(book.getContentRoot(), filePath);\n                return Templating.render(engine, absoluteFilePath, content, context);\n            })\n\n            // Render with markdown/asciidoc parser\n            .then((content) => {\n                content = parser.toHTML(content);\n                return resultPage.set('content', content);\n            })\n\n            // Call final hook\n            .then((currentPage) => {\n                return callPageHook('page', output, currentPage);\n            });\n        })\n    );\n}\n\nmodule.exports = generatePage;\n"]}