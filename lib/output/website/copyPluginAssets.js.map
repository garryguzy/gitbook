{"version":3,"sources":["../../../src/output/website/copyPluginAssets.js"],"names":["path","require","ASSET_FOLDER","Promise","fs","copyPluginAssets","output","book","getBook","isLanguageBook","plugins","getPlugins","forEach","plugin","copyAssets","then","copyBrowserJS","copyCoreJS","thenResolve","logger","getLogger","pluginRoot","getPath","options","getOptions","outputRoot","get","prefix","assetFolder","join","assetOutputFolder","getName","existsSync","debug","ln","copyDir","deleteFirst","overwrite","confirm","browserFile","getPackage","outputFile","ensureFile","copy","inputFile","resolve","module","exports"],"mappings":"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","file":"copyPluginAssets.js","sourcesContent":["const path = require('path');\n\nconst ASSET_FOLDER = require('../../constants/pluginAssetsFolder');\nconst Promise = require('../../utils/promise');\nconst fs = require('../../utils/fs');\n\n/**\n * Copy all assets from plugins.\n * Assets are files stored in a \"_assets\" of the plugin.\n *\n * @param {Output}\n * @return {Promise}\n */\nfunction copyPluginAssets(output) {\n    const book = output.getBook();\n\n    // Don't copy plugins assets for language book\n    // It'll be resolved to the parent folder\n    if (book.isLanguageBook()) {\n        return Promise(output);\n    }\n\n    const plugins = output.getPlugins();\n\n    return Promise.forEach(plugins, (plugin) => {\n        return copyAssets(output, plugin)\n        .then(() => copyBrowserJS(output, plugin));\n    })\n    .then(() => copyCoreJS(output))\n    .thenResolve(output);\n}\n\n/**\n * Copy assets from a plugin\n *\n * @param {Plugin}\n * @return {Promise}\n */\nfunction copyAssets(output, plugin) {\n    const logger = output.getLogger();\n    const pluginRoot = plugin.getPath();\n    const options = output.getOptions();\n\n    const outputRoot = options.get('root');\n    const prefix = options.get('prefix');\n\n    const assetFolder = path.join(pluginRoot, ASSET_FOLDER, prefix);\n    const assetOutputFolder = path.join(outputRoot, 'gitbook', plugin.getName());\n\n    if (!fs.existsSync(assetFolder)) {\n        return Promise();\n    }\n\n    logger.debug.ln('copy assets from plugin', assetFolder);\n    return fs.copyDir(\n        assetFolder,\n        assetOutputFolder,\n        {\n            deleteFirst: false,\n            overwrite: true,\n            confirm: true\n        }\n    );\n}\n\n/**\n * Copy JS file for the plugin\n *\n * @param {Plugin}\n * @return {Promise}\n */\nfunction copyBrowserJS(output, plugin) {\n    const logger     = output.getLogger();\n    const pluginRoot = plugin.getPath();\n    const options    = output.getOptions();\n    const outputRoot = options.get('root');\n\n    let browserFile = plugin.getPackage().get('browser');\n\n    if (!browserFile) {\n        return Promise();\n    }\n\n    browserFile = path.join(pluginRoot, browserFile);\n    const outputFile = path.join(outputRoot, 'gitbook/plugins', plugin.getName() + '.js');\n\n    logger.debug.ln('copy browser JS file from plugin', browserFile);\n    return fs.ensureFile(outputFile)\n    .then(() => fs.copy(browserFile, outputFile));\n}\n\n/**\n * Copy JS file for gitbook-core\n *\n * @param {Plugin}\n * @return {Promise}\n */\nfunction copyCoreJS(output) {\n    const logger     = output.getLogger();\n    const options    = output.getOptions();\n    const outputRoot = options.get('root');\n\n    const inputFile = require.resolve('gitbook-core/dist/gitbook.core.min.js');\n    const outputFile = path.join(outputRoot, 'gitbook/core.js');\n\n    logger.debug.ln('copy JS for gitbook-core');\n    return fs.ensureFile(outputFile)\n    .then(() => fs.copy(inputFile, outputFile));\n}\n\nmodule.exports = copyPluginAssets;\n"]}