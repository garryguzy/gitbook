{"version":3,"sources":["../../src/output/callHook.js"],"names":["Promise","require","timing","Api","defaultGetArgument","undefined","defaultHandleResult","output","result","callHook","name","getArgument","handleResult","logger","getLogger","plugins","getPlugins","debug","ln","context","encodeGlobal","measure","then","arg","reduce","prev","plugin","hook","getHook","call","decodeGlobal","module","exports"],"mappings":";;AAAA,IAAMA,UAAUC,QAAQ,kBAAR,CAAhB;AACA,IAAMC,SAASD,QAAQ,iBAAR,CAAf;AACA,IAAME,MAAMF,QAAQ,QAAR,CAAZ;;AAEA,SAASG,kBAAT,GAA8B;AAC1B,WAAOC,SAAP;AACH;;AAED,SAASC,mBAAT,CAA6BC,MAA7B,EAAqCC,MAArC,EAA6C;AACzC,WAAOD,MAAP;AACH;;AAED;;;;;;;;;AASA,SAASE,QAAT,CAAkBC,IAAlB,EAAwBC,WAAxB,EAAqCC,YAArC,EAAmDL,MAAnD,EAA2D;AACvDI,kBAAcA,eAAeP,kBAA7B;AACAQ,mBAAeA,gBAAgBN,mBAA/B;;AAEA,QAAMO,SAASN,OAAOO,SAAP,EAAf;AACA,QAAMC,UAAUR,OAAOS,UAAP,EAAhB;;AAEAH,WAAOI,KAAP,CAAaC,EAAb,CAAgB,mBAAmBR,IAAnB,GAA0B,GAA1C;;AAEA;AACA,QAAMS,UAAUhB,IAAIiB,YAAJ,CAAiBb,MAAjB,CAAhB;;AAEA,WAAOL,OAAOmB,OAAP,CACH,eAAeX,IADZ;;AAGH;AACAV,YAAQW,YAAYJ,MAAZ,CAAR;;AAEA;AAFA,KAGCe,IAHD,CAGM,UAACC,GAAD,EAAS;AACX,eAAOvB,QAAQwB,MAAR,CAAeT,OAAf,EAAwB,UAACU,IAAD,EAAOC,MAAP,EAAkB;AAC7C,gBAAMC,OAAOD,OAAOE,OAAP,CAAelB,IAAf,CAAb;AACA,gBAAI,CAACiB,IAAL,EAAW;AACP,uBAAOF,IAAP;AACH;;AAED,mBAAOE,KAAKE,IAAL,CAAUV,OAAV,EAAmBM,IAAnB,CAAP;AACH,SAPM,EAOJF,GAPI,CAAP;AAQH,KAZD;;AAcA;AAdA,KAeCD,IAfD,CAeM,UAACd,MAAD,EAAY;AACdD,iBAASJ,IAAI2B,YAAJ,CAAiBvB,MAAjB,EAAyBY,OAAzB,CAAT;AACA,eAAOP,aAAaL,MAAb,EAAqBC,MAArB,CAAP;AACH,KAlBD,CAJG,CAAP;AAwBH;;AAEDuB,OAAOC,OAAP,GAAiBvB,QAAjB","file":"callHook.js","sourcesContent":["const Promise = require('../utils/promise');\nconst timing = require('../utils/timing');\nconst Api = require('../api');\n\nfunction defaultGetArgument() {\n    return undefined;\n}\n\nfunction defaultHandleResult(output, result) {\n    return output;\n}\n\n/**\n * Call a \"global\" hook for an output. Hooks are functions exported by plugins.\n *\n * @param {String} name\n * @param {Function(Output) -> Mixed} getArgument\n * @param {Function(Output, result) -> Output} handleResult\n * @param {Output} output\n * @return {Promise<Output>}\n */\nfunction callHook(name, getArgument, handleResult, output) {\n    getArgument = getArgument || defaultGetArgument;\n    handleResult = handleResult || defaultHandleResult;\n\n    const logger = output.getLogger();\n    const plugins = output.getPlugins();\n\n    logger.debug.ln('calling hook \"' + name + '\"');\n\n    // Create the JS context for plugins\n    const context = Api.encodeGlobal(output);\n\n    return timing.measure(\n        'call.hook.' + name,\n\n        // Get the arguments\n        Promise(getArgument(output))\n\n        // Call the hooks in serie\n        .then((arg) => {\n            return Promise.reduce(plugins, (prev, plugin) => {\n                const hook = plugin.getHook(name);\n                if (!hook) {\n                    return prev;\n                }\n\n                return hook.call(context, prev);\n            }, arg);\n        })\n\n        // Handle final result\n        .then((result) => {\n            output = Api.decodeGlobal(output, context);\n            return handleResult(output, result);\n        })\n    );\n}\n\nmodule.exports = callHook;\n"]}