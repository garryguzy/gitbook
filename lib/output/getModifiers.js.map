{"version":3,"sources":["../../src/output/getModifiers.js"],"names":["Modifiers","require","getModifiers","output","page","book","getBook","glossary","getGlossary","file","getFile","urls","getURLIndex","entries","getEntries","glossaryFile","glossaryFilename","resolveToURL","getPath","currentFilePath","addHeadingId","annotateText","bind","resolveImages","resolveLinks","resolveToURLFrom","filePath","module","exports"],"mappings":";;AAAA,IAAMA,YAAYC,QAAQ,aAAR,CAAlB;;AAEA;;;;;;AAMA,SAASC,YAAT,CAAsBC,MAAtB,EAA8BC,IAA9B,EAAoC;AAChC,QAAMC,OAAOF,OAAOG,OAAP,EAAb;AACA,QAAMC,WAAWF,KAAKG,WAAL,EAAjB;AACA,QAAMC,OAAOL,KAAKM,OAAL,EAAb;;AAEA;AACA,QAAMC,OAAOR,OAAOS,WAAP,EAAb;;AAEA;AACA,QAAMC,UAAUN,SAASO,UAAT,EAAhB;AACA,QAAMC,eAAeR,SAASG,OAAT,EAArB;AACA,QAAMM,mBAAmBL,KAAKM,YAAL,CAAkBF,aAAaG,OAAb,EAAlB,CAAzB;;AAEA;AACA,QAAMC,kBAAkBV,KAAKS,OAAL,EAAxB;;AAEA,WAAO;AACH;AACAlB,cAAUoB,YAFP;;AAIH;AACApB,cAAUqB,YAAV,CAAuBC,IAAvB,CAA4B,IAA5B,EAAkCT,OAAlC,EAA2CG,gBAA3C,CALG;;AAOH;AACAhB,cAAUuB,aAAV,CAAwBD,IAAxB,CAA6B,IAA7B,EAAmCH,eAAnC,CARG;;AAUH;AACAnB,cAAUwB,YAAV,CAAuBF,IAAvB,CAA4B,IAA5B,EACK;AAAA,eAAYX,KAAKc,gBAAL,CAAsBN,eAAtB,EAAuCO,QAAvC,CAAZ;AAAA,KADL,CAXG,CAAP;AAeH;;AAEDC,OAAOC,OAAP,GAAiB1B,YAAjB","file":"getModifiers.js","sourcesContent":["const Modifiers = require('./modifiers');\n\n/**\n * Return default modifier to prepare a page for\n * rendering.\n *\n * @return {Array<Modifier>}\n */\nfunction getModifiers(output, page) {\n    const book = output.getBook();\n    const glossary = book.getGlossary();\n    const file = page.getFile();\n\n    // Map of urls\n    const urls = output.getURLIndex();\n\n    // Glossary entries\n    const entries = glossary.getEntries();\n    const glossaryFile = glossary.getFile();\n    const glossaryFilename = urls.resolveToURL(glossaryFile.getPath());\n\n    // Current file path\n    const currentFilePath = file.getPath();\n\n    return [\n        // Normalize IDs on headings\n        Modifiers.addHeadingId,\n\n        // Annotate text with glossary entries\n        Modifiers.annotateText.bind(null, entries, glossaryFilename),\n\n        // Resolve images\n        Modifiers.resolveImages.bind(null, currentFilePath),\n\n        // Resolve links (.md -> .html)\n        Modifiers.resolveLinks.bind(null,\n            (filePath => urls.resolveToURLFrom(currentFilePath, filePath))\n        )\n    ];\n}\n\nmodule.exports = getModifiers;\n"]}