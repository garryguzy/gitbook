{"version":3,"sources":["../../src/models/templateEngine.js"],"names":["nunjucks","require","Record","Map","List","DEFAULTS","blocks","extensions","filters","globals","context","Object","loader","FileSystemLoader","TemplateEngine","get","name","getBlocks","find","block","getName","getLoader","getFilters","getGlobals","getExtensions","getContext","env","Environment","autoescape","tags","blockStart","blockEnd","variableStart","variableEnd","commentStart","commentEnd","forEach","filterFn","filterName","addFilter","bind","extName","getExtensionName","Ext","toNunjucksExt","addExtension","globalValue","globalName","addGlobal","ext","def","module","exports"],"mappings":"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","file":"templateEngine.js","sourcesContent":["const nunjucks = require('nunjucks');\nconst { Record, Map, List } = require('immutable');\n\nconst DEFAULTS = {\n    // List of {TemplateBlock}\n    blocks:     List(),\n    // Map of Extension\n    extensions: Map(),\n    // Map of filters: {String} name -> {Function} fn\n    filters:    Map(),\n    // Map of globals: {String} name -> {Mixed}\n    globals:    Map(),\n    // Context for filters / blocks\n    context:    Object(),\n    // Nunjucks loader\n    loader:     nunjucks.FileSystemLoader('views')\n};\n\nclass TemplateEngine extends Record(DEFAULTS) {\n    getBlocks() {\n        return this.get('blocks');\n    }\n\n    getGlobals() {\n        return this.get('globals');\n    }\n\n    getFilters() {\n        return this.get('filters');\n    }\n\n    getShortcuts() {\n        return this.get('shortcuts');\n    }\n\n    getLoader() {\n        return this.get('loader');\n    }\n\n    getContext() {\n        return this.get('context');\n    }\n\n    getExtensions() {\n        return this.get('extensions');\n    }\n\n    /**\n     * Return a block by its name (or undefined).\n     * @param {String} name\n     * @return {TemplateBlock} block?\n     */\n    getBlock(name) {\n        const blocks = this.getBlocks();\n        return blocks.find((block) => {\n            return block.getName() === name;\n        });\n    }\n\n    /**\n     * Return a nunjucks environment from this configuration\n     * @return {Nunjucks.Environment} env\n     */\n    toNunjucks() {\n        const loader = this.getLoader();\n        const blocks = this.getBlocks();\n        const filters = this.getFilters();\n        const globals = this.getGlobals();\n        const extensions = this.getExtensions();\n        const context = this.getContext();\n\n        const env = new nunjucks.Environment(\n            loader,\n            {\n                // Escaping is done after by the asciidoc/markdown parser\n                autoescape: false,\n\n                // Syntax\n                tags: {\n                    blockStart:    '{%',\n                    blockEnd:      '%}',\n                    variableStart: '{{',\n                    variableEnd:   '}}',\n                    commentStart:  '{###',\n                    commentEnd:    '###}'\n                }\n            }\n        );\n\n        // Add filters\n        filters.forEach((filterFn, filterName) => {\n            env.addFilter(filterName, filterFn.bind(context));\n        });\n\n        // Add blocks\n        blocks.forEach((block) => {\n            const extName = block.getExtensionName();\n            const Ext = block.toNunjucksExt(context);\n\n            env.addExtension(extName, new Ext());\n        });\n\n        // Add globals\n        globals.forEach((globalValue, globalName) => {\n            env.addGlobal(globalName, globalValue);\n        });\n\n        // Add other extensions\n        extensions.forEach((ext, extName) => {\n            env.addExtension(extName, ext);\n        });\n\n        return env;\n    }\n\n    /**\n     * Create a template engine.\n     * @param {Object} def\n     * @return {TemplateEngine} engine\n     */\n    static create(def) {\n        return new TemplateEngine({\n            blocks:     List(def.blocks || []),\n            extensions: Map(def.extensions || {}),\n            filters:    Map(def.filters || {}),\n            globals:    Map(def.globals || {}),\n            context:    def.context,\n            loader:     def.loader\n        });\n    }\n}\n\nmodule.exports = TemplateEngine;\n"]}