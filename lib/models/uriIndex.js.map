{"version":3,"sources":["../../src/models/uriIndex.js"],"names":["path","require","url","Record","Map","LocationUtils","DEFAULTS","uris","directoryIndex","Boolean","transformURLPath","input","transform","parsed","parse","pathname","hash","URIIndex","index","mapKeys","normalize","key","filePath","uri","merge","set","isExternal","href","get","originPath","originURL","resolve","originDir","dirname","originOutDir","toAbsolute","relative","basename","normalizeURL","resolveFrom","module","exports"],"mappings":"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","file":"uriIndex.js","sourcesContent":["const path = require('path');\nconst url = require('url');\nconst { Record, Map } = require('immutable');\nconst LocationUtils = require('../utils/location');\n\n/*\n    The URIIndex stores a map of filename to url.\n    To resolve urls for each article.\n */\n\nconst DEFAULTS = {\n    uris:           Map(),\n    directoryIndex: Boolean(true)\n};\n\n/**\n * Modify an url path while preserving the hash\n * @param {String} input\n * @param {Function<String>} transform\n * @return {String} output\n */\nfunction transformURLPath(input, transform) {\n    // Split anchor\n    const parsed = url.parse(input);\n    input = parsed.pathname || '';\n\n    input = transform(input);\n\n    // Add back anchor\n    input = input + (parsed.hash || '');\n\n    return input;\n}\n\nclass URIIndex extends Record(DEFAULTS) {\n    constructor(index) {\n        super({\n            uris: Map(index)\n                .mapKeys(key => LocationUtils.normalize(key))\n        });\n    }\n\n    /**\n     * Append a file to the index\n     * @param {String} filePath\n     * @param {String} url\n     * @return {URIIndex}\n     */\n    append(filePath, uri) {\n        const { uris } = this;\n        filePath = LocationUtils.normalize(filePath);\n\n        return this.merge({\n            uris: uris.set(filePath, uri)\n        });\n    }\n\n    /**\n     * Resolve an absolute file path to an url.\n     *\n     * @param {String} filePath\n     * @return {String} url\n     */\n    resolve(filePath) {\n        if (LocationUtils.isExternal(filePath)) {\n            return filePath;\n        }\n\n        return transformURLPath(filePath, (href) => {\n            const { uris } = this;\n            href = LocationUtils.normalize(href);\n\n            return uris.get(href, href);\n        });\n    }\n\n    /**\n     * Resolve a filename to an url, considering that the link to \"filePath\"\n     * in the file \"originPath\".\n     *\n     * For example if we are generating doc/README.md and we have a link \"/READNE.md\":\n     * index.resolveFrom('doc/README.md', '/README.md') === '../index.html'\n     *\n     * @param  {String} originPath\n     * @param  {String} filePath\n     * @return {String} url\n     */\n    resolveFrom(originPath, filePath) {\n        if (LocationUtils.isExternal(filePath)) {\n            return filePath;\n        }\n\n        const originURL = this.resolve(originPath);\n        const originDir = path.dirname(originPath);\n        const originOutDir = path.dirname(originURL);\n\n        return transformURLPath(filePath, (href) => {\n            if (!href) {\n                return href;\n            }\n            // Calcul absolute path for this\n            href = LocationUtils.toAbsolute(href, originDir, '.');\n\n            // Resolve file\n            href = this.resolve(href);\n\n            // Convert back to relative\n            href = LocationUtils.relative(originOutDir, href);\n\n            return href;\n        });\n    }\n\n    /**\n     * Normalize an url\n     * @param  {String} uri\n     * @return {String} uri\n     */\n    normalizeURL(uri) {\n        const { directoryIndex } = this;\n\n        if (!directoryIndex || LocationUtils.isExternal(uri)) {\n            return uri;\n        }\n\n        return transformURLPath(uri, (pathname) => {\n            if (path.basename(pathname) == 'index.html') {\n                pathname = path.dirname(pathname) + '/';\n            }\n\n            return pathname;\n        });\n    }\n\n    /**\n     * Resolve an entry to an url\n     * @param {String} filePath\n     * @return {String}\n     */\n    resolveToURL(filePath) {\n        const uri = this.resolve(filePath);\n        return this.normalizeURL(uri);\n    }\n\n    /**\n     * Resolve an entry to an url\n     *\n     * @param  {String} originPath\n     * @param  {String} filePath\n     * @return {String} url\n     */\n    resolveToURLFrom(originPath, filePath) {\n        const uri = this.resolveFrom(originPath, filePath);\n        return this.normalizeURL(uri);\n    }\n\n}\n\nmodule.exports = URIIndex;\n"]}