{"version":3,"sources":["../../src/models/summary.js"],"names":["is","require","List","Record","LocationUtils","File","SummaryPart","SummaryArticle","DEFAULTS","file","parts","Summary","get","merge","i","getParts","iter","partIter","reduce","result","part","findArticle","level","iterByLevel","article","getLevel","getArticle","filePath","articlePath","getPath","areIdenticalPaths","current","string","wasPrev","prev","undefined","parentLevel","getParentLevel","parentArticle","getByLevel","accu","push","map","create","split","slice","join","module","exports"],"mappings":"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","file":"summary.js","sourcesContent":["const is = require('is');\nconst { List, Record } = require('immutable');\n\nconst LocationUtils = require('../utils/location');\nconst File = require('./file');\nconst SummaryPart = require('./summaryPart');\nconst SummaryArticle = require('./summaryArticle');\n\nconst DEFAULTS = {\n    file:  new File(),\n    parts: List()\n};\n\nclass Summary extends Record(DEFAULTS) {\n    getFile() {\n        return this.get('file');\n    }\n\n    getParts() {\n        return this.get('parts');\n    }\n\n    /**\n     * Set file linked to the summary.\n     * @param  {File} file\n     * @return {Summary}\n     */\n    setFile(file) {\n        return this.merge({ file });\n    }\n\n    /**\n     * Return a part by its index.\n     * @param {Number}\n     * @return {Part}\n     */\n    getPart(i) {\n        const parts = this.getParts();\n        return parts.get(i);\n    }\n\n    /**\n     * Return an article using an iterator to find it.\n     * if \"partIter\" is set, it can also return a Part.\n     *\n     * @param {Function} iter\n     * @param {Function} partIter\n     * @return {Article|Part}\n     */\n    getArticle(iter, partIter) {\n        const parts = this.getParts();\n\n        return parts.reduce((result, part) => {\n            if (result) return result;\n\n            if (partIter && partIter(part)) return part;\n            return SummaryArticle.findArticle(part, iter);\n        }, null);\n    }\n\n    /**\n     * Return a part/article by its level.\n     *\n     * @param {String} level\n     * @return {Article|Part}\n     */\n    getByLevel(level) {\n        function iterByLevel(article) {\n            return (article.getLevel() === level);\n        }\n\n        return this.getArticle(iterByLevel, iterByLevel);\n    }\n\n    /**\n     * Return an article by its path.\n     *\n     * @param {String} filePath\n     * @return {Article}\n     */\n    getByPath(filePath) {\n        return this.getArticle((article) => {\n            const articlePath = article.getPath();\n\n            return (\n                articlePath &&\n                LocationUtils.areIdenticalPaths(articlePath, filePath)\n            );\n        });\n    }\n\n    /**\n     * Return the first article.\n     * @return {Article}\n     */\n    getFirstArticle() {\n        return this.getArticle((article) => {\n            return true;\n        });\n    }\n\n    /**\n     * Return next article of an article.\n     *\n     * @param {Article} current\n     * @return {Article}\n     */\n    getNextArticle(current) {\n        const level = is.string(current) ? current : current.getLevel();\n        let wasPrev = false;\n\n        return this.getArticle((article) => {\n            if (wasPrev) return true;\n\n            wasPrev = article.getLevel() == level;\n            return false;\n        });\n    }\n\n    /**\n     * Return previous article of an article.\n     *\n     * @param {Article} current\n     * @return {Article}\n     */\n    getPrevArticle(current) {\n        const level = is.string(current) ? current : current.getLevel();\n        let prev = undefined;\n\n        this.getArticle((article) => {\n            if (article.getLevel() == level) {\n                return true;\n            }\n\n            prev = article;\n            return false;\n        });\n\n        return prev;\n    }\n\n    /**\n     * Return the parent article, or parent part of an article.\n     *\n     * @param {String|Article} current\n     * @return {Article|Part|Null}\n     */\n    getParent(level) {\n        // Coerce to level\n        level = is.string(level) ? level : level.getLevel();\n\n        // Get parent level\n        const parentLevel = getParentLevel(level);\n        if (!parentLevel) {\n            return null;\n        }\n\n        // Get parent of the position\n        const parentArticle = this.getByLevel(parentLevel);\n        return parentArticle || null;\n    }\n\n    /**\n     * Return all articles as a list.\n     *\n     * @return {List<Article>}\n     */\n    getArticlesAsList() {\n        const accu = [];\n\n        this.getArticle((article) => {\n            accu.push(article);\n        });\n\n        return List(accu);\n    }\n\n    /**\n     * Create a new summary for a list of parts.\n     *\n     * @param {List|Array} parts\n     * @return {Summary}\n     */\n    static createFromParts(parts) {\n        parts = parts.map((part, i) => {\n            if (part instanceof SummaryPart) {\n                return part;\n            }\n\n            return SummaryPart.create(part, i + 1);\n        });\n\n        return new Summary({\n            parts: new List(parts)\n        });\n    }\n}\n\n/**\n * Returns parent level of a level.\n *\n * @param {String} level\n * @return {String}\n */\nfunction getParentLevel(level) {\n    const parts = level.split('.');\n    return parts.slice(0, -1).join('.');\n}\n\nmodule.exports = Summary;\n"]}