{"version":3,"sources":["../../src/models/book.js"],"names":["path","require","Record","OrderedMap","Logger","FS","Config","Readme","Summary","Glossary","Languages","Ignore","DEFAULTS","logger","fs","ignore","config","readme","summary","glossary","languages","language","String","books","Book","get","getFS","getConfig","rootFolder","getValue","reduceScope","getRoot","getContentFS","filename","getIgnore","getLanguage","join","isFileIgnored","ref","getPages","getLanguages","getCount","Boolean","getBooks","book","set","level","getLogger","setLevel","clues","getReadme","getSummary","getGlossary","exts","map","clue","file","getFile","exists","getParser","FILE_EXTENSIONS","push","find","e","absolute","defaultPath","getDefaultExt","getContentRoot","parent","setValue","module","exports"],"mappings":"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","file":"book.js","sourcesContent":["const path = require('path');\nconst { Record, OrderedMap } = require('immutable');\n\nconst Logger = require('../utils/logger');\n\nconst FS = require('./fs');\nconst Config = require('./config');\nconst Readme = require('./readme');\nconst Summary = require('./summary');\nconst Glossary = require('./glossary');\nconst Languages = require('./languages');\nconst Ignore = require('./ignore');\n\nconst DEFAULTS = {\n    // Logger for output message\n    logger:         new Logger(),\n    // Filesystem binded to the book scope to read files/directories\n    fs:             new FS(),\n    // Ignore files parser\n    ignore:         new Ignore(),\n    // Structure files\n    config:         new Config(),\n    readme:         new Readme(),\n    summary:        new Summary(),\n    glossary:       new Glossary(),\n    languages:      new Languages(),\n    // ID of the language for language books\n    language:       String(),\n    // List of children, if multilingual (String -> Book)\n    books:          new OrderedMap()\n};\n\nclass Book extends Record(DEFAULTS) {\n    getLogger() {\n        return this.get('logger');\n    }\n\n    getFS() {\n        return this.get('fs');\n    }\n\n    getIgnore() {\n        return this.get('ignore');\n    }\n\n    getConfig() {\n        return this.get('config');\n    }\n\n    getReadme() {\n        return this.get('readme');\n    }\n\n    getSummary() {\n        return this.get('summary');\n    }\n\n    getGlossary() {\n        return this.get('glossary');\n    }\n\n    getLanguages() {\n        return this.get('languages');\n    }\n\n    getBooks() {\n        return this.get('books');\n    }\n\n    getLanguage() {\n        return this.get('language');\n    }\n\n    /**\n     * Return FS instance to access the content\n     * @return {FS}\n     */\n    getContentFS() {\n        const fs = this.getFS();\n        const config = this.getConfig();\n        const rootFolder = config.getValue('root');\n\n        if (rootFolder) {\n            return FS.reduceScope(fs, rootFolder);\n        }\n\n        return fs;\n    }\n\n    /**\n     * Return root of the book\n     *\n     * @return {String}\n     */\n    getRoot() {\n        const fs = this.getFS();\n        return fs.getRoot();\n    }\n\n    /**\n     * Return root for content of the book\n     *\n     * @return {String}\n     */\n    getContentRoot() {\n        const fs = this.getContentFS();\n        return fs.getRoot();\n    }\n\n    /**\n     * Check if a file is ignore (should not being parsed, etc)\n     *\n     * @param {String} ref\n     * @return {Page|undefined}\n     */\n    isFileIgnored(filename) {\n        const ignore = this.getIgnore();\n        const language = this.getLanguage();\n\n        // Ignore is always relative to the root of the main book\n        if (language) {\n            filename = path.join(language, filename);\n        }\n\n        return ignore.isFileIgnored(filename);\n    }\n\n    /**\n     * Check if a content file is ignore (should not being parsed, etc)\n     *\n     * @param {String} ref\n     * @return {Page|undefined}\n     */\n    isContentFileIgnored(filename) {\n        const config = this.getConfig();\n        const rootFolder = config.getValue('root');\n\n        if (rootFolder) {\n            filename = path.join(rootFolder, filename);\n        }\n\n        return this.isFileIgnored(filename);\n    }\n\n    /**\n     * Return a page from a book by its path\n     *\n     * @param {String} ref\n     * @return {Page|undefined}\n     */\n    getPage(ref) {\n        return this.getPages().get(ref);\n    }\n\n    /**\n     * Is this book the parent of language's books\n     * @return {Boolean}\n     */\n    isMultilingual() {\n        return (this.getLanguages().getCount() > 0);\n    }\n\n    /**\n     * Return true if book is associated to a language\n     * @return {Boolean}\n     */\n    isLanguageBook() {\n        return Boolean(this.getLanguage());\n    }\n\n    /**\n     * Return a languages book\n     * @param {String} language\n     * @return {Book}\n     */\n    getLanguageBook(language) {\n        const books = this.getBooks();\n        return books.get(language);\n    }\n\n    /**\n     * Add a new language book\n     *\n     * @param {String} language\n     * @param {Book} book\n     * @return {Book}\n     */\n    addLanguageBook(language, book) {\n        let books = this.getBooks();\n        books = books.set(language, book);\n\n        return this.set('books', books);\n    }\n\n    /**\n     * Set the summary for this book\n     *\n     * @param {Summary}\n     * @return {Book}\n     */\n    setSummary(summary) {\n        return this.set('summary', summary);\n    }\n\n    /**\n     * Set the readme for this book\n     *\n     * @param {Readme}\n     * @return {Book}\n     */\n    setReadme(readme) {\n        return this.set('readme', readme);\n    }\n\n    /**\n     * Set the configuration for this book\n     *\n     * @param {Config}\n     * @return {Book}\n     */\n    setConfig(config) {\n        return this.set('config', config);\n    }\n\n    /**\n     * Set the ignore instance for this book\n     *\n     @param {Ignore}\n     * @return {Book}\n     */\n    setIgnore(ignore) {\n        return this.set('ignore', ignore);\n    }\n\n    /**\n     * Change log level\n     *\n     * @param {String} level\n     * @return {Book}\n     */\n    setLogLevel(level) {\n        this.getLogger().setLevel(level);\n        return this;\n    }\n\n    /**\n     * Infers the default extension for files\n     * @return {String}\n     */\n    getDefaultExt() {\n        // Inferring sources\n        const clues = [\n            this.getReadme(),\n            this.getSummary(),\n            this.getGlossary()\n        ];\n\n        // List their extensions\n        const exts = clues.map((clue) => {\n            const file = clue.getFile();\n            if (file.exists()) {\n                return file.getParser().FILE_EXTENSIONS[0];\n            } else {\n                return null;\n            }\n        });\n        // Adds the general default extension\n        exts.push('.md');\n\n        // Choose the first non null\n        return exts.find((e) => { return e !== null; });\n    }\n\n    /**\n     * Infer the default path for a Readme.\n     * @param {Boolean} [absolute=false] False for a path relative to\n     *     this book's content root\n     * @return {String}\n     */\n    getDefaultReadmePath(absolute) {\n        const defaultPath = 'README' + this.getDefaultExt();\n        if (absolute) {\n            return path.join(this.getContentRoot(), defaultPath);\n        } else {\n            return defaultPath;\n        }\n    }\n\n    /**\n     * Infer the default path for a Summary.\n     * @param {Boolean} [absolute=false] False for a path relative to\n     *     this book's content root\n     * @return {String}\n     */\n    getDefaultSummaryPath(absolute) {\n        const defaultPath = 'SUMMARY' + this.getDefaultExt();\n        if (absolute) {\n            return path.join(this.getContentRoot(), defaultPath);\n        } else {\n            return defaultPath;\n        }\n    }\n\n    /**\n     * Infer the default path for a Glossary.\n     * @param {Boolean} [absolute=false] False for a path relative to\n     *     this book's content root\n     * @return {String}\n     */\n    getDefaultGlossaryPath(absolute) {\n        const defaultPath = 'GLOSSARY' + this.getDefaultExt();\n        if (absolute) {\n            return path.join(this.getContentRoot(), defaultPath);\n        } else {\n            return defaultPath;\n        }\n    }\n\n    /**\n     * Create a language book from a parent\n     *\n     * @param {Book} parent\n     * @param {String} language\n     * @return {Book}\n     */\n    static createFromParent(parent, language) {\n        const ignore = parent.getIgnore();\n        let config = parent.getConfig();\n\n        // Set language in configuration\n        config = config.setValue('language', language);\n\n        return new Book({\n            // Inherits config. logegr and list of ignored files\n            logger: parent.getLogger(),\n            config,\n            ignore,\n\n            language,\n            fs: FS.reduceScope(parent.getContentFS(), language)\n        });\n    }\n\n    /**\n     * Create a book using a filesystem\n     *\n     * @param {FS} fs\n     * @return {Book}\n     */\n    static createForFS(fs) {\n        return new Book({\n            fs\n        });\n    }\n}\n\nmodule.exports = Book;\n"]}