{"version":3,"sources":["../../src/models/file.js"],"names":["path","require","Record","error","parsers","DEFAULTS","String","mtime","Date","File","get","Boolean","getPath","fs","parser","Promise","reject","FileNotParsableError","filename","readAsString","then","content","document","toDocument","type","extension","extname","toLowerCase","getByExt","name","undefined","filepath","stat","module","exports"],"mappings":";;;;;;;;;;AAAA,IAAMA,OAAOC,QAAQ,MAAR,CAAb;;eACmBA,QAAQ,WAAR,C;IAAXC,M,YAAAA,M;;AAER,IAAMC,QAAQF,QAAQ,gBAAR,CAAd;AACA,IAAMG,UAAUH,QAAQ,YAAR,CAAhB;;AAEA,IAAMI,WAAW;AACb;AACAL,UAAOM,QAFM;AAGb;AACAC,WAAOC;AAJM,CAAjB;;IAOMC,I;;;;;;;;;;;kCACQ;AACN,mBAAO,KAAKC,GAAL,CAAS,MAAT,CAAP;AACH;;;mCAEU;AACP,mBAAO,KAAKA,GAAL,CAAS,OAAT,CAAP;AACH;;AAED;;;;;;;;;AAyBA;;;;iCAIS;AACL,mBAAOC,QAAQ,KAAKC,OAAL,EAAR,CAAP;AACH;;AAED;;;;;;;;8BAKMC,E,EAAI;AAAA,gBACEC,MADF,GACa,IADb,CACEA,MADF;;;AAGN,gBAAI,CAACA,MAAL,EAAa;AACT,uBAAOC,QAAQC,MAAR,CACHb,MAAMc,oBAAN,CAA2B;AACvBC,8BAAU,KAAKlB;AADQ,iBAA3B,CADG,CAAP;AAKH;;AAED,mBAAOa,GAAGM,YAAH,CAAgB,KAAKnB,IAArB,EACNoB,IADM,CACD,UAACC,OAAD,EAAa;AACf,oBAAMC,WAAWR,OAAOS,UAAP,CAAkBF,OAAlB,CAAjB;AACA,uBAAOC,QAAP;AACH,aAJM,CAAP;AAKH;;;kCAES;AACN,mBAAO,KAAKE,IAAZ;AACH;;;uCAEc;AACX,mBAAO,KAAKC,SAAZ;AACH;;;oCAEW;AACR,mBAAO,KAAKX,MAAZ;AACH;;AAED;;;;;;;;;4BAhEgB;AACZ,mBAAOd,KAAK0B,OAAL,CAAa,KAAKd,OAAL,EAAb,EAA6Be,WAA7B,EAAP;AACH;;AAED;;;;;;;4BAIa;AACT,mBAAOvB,QAAQwB,QAAR,CAAiB,KAAKH,SAAtB,CAAP;AACH;;AAED;;;;;;;4BAIW;AAAA,gBACCX,MADD,GACY,IADZ,CACCA,MADD;;AAEP,mBAAOA,SAASA,OAAOe,IAAhB,GAAuBC,SAA9B;AACH;;;uCAmDqBC,Q,EAAUC,I,EAAM;AAClC,mBAAO,IAAIvB,IAAJ,CAAS;AACZT,sBAAM+B,QADM;AAEZxB,uBAAOyB,KAAKzB;AAFA,aAAT,CAAP;AAIH;;AAED;;;;;;;;2CAK0BwB,Q,EAAU;AAChC,mBAAO,IAAItB,IAAJ,CAAS;AACZT,sBAAM+B;AADM,aAAT,CAAP;AAGH;;;;EAnGc7B,OAAOG,QAAP,C;;AAsGnB4B,OAAOC,OAAP,GAAiBzB,IAAjB","file":"file.js","sourcesContent":["const path = require('path');\nconst { Record } = require('immutable');\n\nconst error = require('../utils/error');\nconst parsers = require('../parsers');\n\nconst DEFAULTS = {\n    // Path of the file, relative to the FS\n    path:  String(),\n    // Time when file data last modified\n    mtime: Date()\n};\n\nclass File extends Record(DEFAULTS) {\n    getPath() {\n        return this.get('path');\n    }\n\n    getMTime() {\n        return this.get('mtime');\n    }\n\n    /**\n     * Return the file extension.\n     * @return {String}\n     */\n    get extension() {\n        return path.extname(this.getPath()).toLowerCase();\n    }\n\n    /**\n     * Return the parser for this file..\n     * @return {Parser}\n     */\n    get parser() {\n        return parsers.getByExt(this.extension);\n    }\n\n    /**\n     * Return type of file ('markdown' or 'asciidoc').\n     * @return {String}\n     */\n    get type() {\n        const { parser } = this;\n        return parser ? parser.name : undefined;\n    }\n\n    /**\n     * Does the file exists / is set.\n     * @return {Boolean}\n     */\n    exists() {\n        return Boolean(this.getPath());\n    }\n\n    /**\n     * Read and parse the file.\n     * @param  {FS} fs\n     * @return {Promise<Document>} document\n     */\n    parse(fs) {\n        const { parser } = this;\n\n        if (!parser) {\n            return Promise.reject(\n                error.FileNotParsableError({\n                    filename: this.path\n                })\n            );\n        }\n\n        return fs.readAsString(this.path)\n        .then((content) => {\n            const document = parser.toDocument(content);\n            return document;\n        });\n    }\n\n    getType() {\n        return this.type;\n    }\n\n    getExtension() {\n        return this.extension;\n    }\n\n    getParser() {\n        return this.parser;\n    }\n\n    /**\n     * Create a file from stats informations.\n     * @param {String} filepath\n     * @param {Object|fs.Stats} stat\n     * @return {File}\n     */\n    static createFromStat(filepath, stat) {\n        return new File({\n            path: filepath,\n            mtime: stat.mtime\n        });\n    }\n\n    /**\n     * Create a file with only a path.\n     * @param {String} filepath\n     * @return {File}\n     */\n    static createWithFilepath(filepath) {\n        return new File({\n            path: filepath\n        });\n    }\n}\n\nmodule.exports = File;\n"]}