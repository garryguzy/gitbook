{"version":3,"sources":["../../src/models/languages.js"],"names":["require","OrderedMap","Record","File","Language","DEFAULTS","file","list","Languages","get","merge","first","lang","size","langs","forEach","title","path","ref","set","getID","module","exports"],"mappings":";;;;;;;;;;eAA+BA,QAAQ,WAAR,C;IAAvBC,U,YAAAA,U;IAAYC,M,YAAAA,M;;AAEpB,IAAMC,OAAOH,QAAQ,QAAR,CAAb;AACA,IAAMI,WAAWJ,QAAQ,YAAR,CAAjB;;AAEA,IAAMK,WAAW;AACbC,UAAM,IAAIH,IAAJ,EADO;AAEbI,UAAMN;AAFO,CAAjB;;IAKMO,S;;;;;;;;;;;kCACQ;AACN,mBAAO,KAAKC,GAAL,CAAS,MAAT,CAAP;AACH;;;kCAES;AACN,mBAAO,KAAKA,GAAL,CAAS,MAAT,CAAP;AACH;;AAED;;;;;;;;gCAKQH,I,EAAM;AACV,mBAAO,KAAKI,KAAL,CAAW,EAAEJ,UAAF,EAAX,CAAP;AACH;;AAED;;;;;;;6CAIqB;AACjB,mBAAO,KAAKC,IAAL,CAAUI,KAAV,EAAP;AACH;;AAED;;;;;;;;oCAKYC,I,EAAM;AACd,mBAAO,KAAKL,IAAL,CAAUE,GAAV,CAAcG,IAAd,CAAP;AACH;;AAED;;;;;;;mCAIW;AACP,mBAAO,KAAKL,IAAL,CAAUM,IAAjB;AACH;;AAED;;;;;;;;;uCAMsBC,K,EAAO;AACzB,gBAAIP,OAAON,YAAX;;AAEAa,kBAAMC,OAAN,CAAc,UAACH,IAAD,EAAU;AACpBA,uBAAO,IAAIR,QAAJ,CAAa;AAChBY,2BAAOJ,KAAKI,KADI;AAEhBC,0BAAML,KAAKK,IAAL,IAAaL,KAAKM;AAFR,iBAAb,CAAP;AAIAX,uBAAOA,KAAKY,GAAL,CAASP,KAAKQ,KAAL,EAAT,EAAuBR,IAAvB,CAAP;AACH,aAND;;AAQA,mBAAO,IAAIJ,SAAJ,CAAc;AACjBD;AADiB,aAAd,CAAP;AAGH;;;;EA/DmBL,OAAOG,QAAP,C;;AAkExBgB,OAAOC,OAAP,GAAiBd,SAAjB","file":"languages.js","sourcesContent":["const { OrderedMap, Record } = require('immutable');\n\nconst File = require('./file');\nconst Language = require('./language');\n\nconst DEFAULTS = {\n    file: new File(),\n    list: OrderedMap()\n};\n\nclass Languages extends Record(DEFAULTS) {\n    getFile() {\n        return this.get('file');\n    }\n\n    getList() {\n        return this.get('list');\n    }\n\n    /**\n     * Set file linked to the languages index.\n     * @param  {File} file\n     * @return {Languages}\n     */\n    setFile(file) {\n        return this.merge({ file });\n    }\n\n    /**\n     * Get default languages\n     * @return {Language}\n     */\n    getDefaultLanguage() {\n        return this.list.first();\n    }\n\n    /**\n     * Get a language by its ID.\n     * @param {String} lang\n     * @return {Language}\n     */\n    getLanguage(lang) {\n        return this.list.get(lang);\n    }\n\n    /**\n     * Return count of langs.\n     * @return {Number}\n     */\n    getCount() {\n        return this.list.size;\n    }\n\n    /**\n     * Create a languages list from a JS object\n     *\n     * @param {Array}\n     * @return {Language}\n     */\n    static createFromList(langs) {\n        let list = OrderedMap();\n\n        langs.forEach((lang) => {\n            lang = new Language({\n                title: lang.title,\n                path: lang.path || lang.ref\n            });\n            list = list.set(lang.getID(), lang);\n        });\n\n        return new Languages({\n            list\n        });\n    }\n}\n\nmodule.exports = Languages;\n"]}