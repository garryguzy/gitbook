{"version":3,"sources":["../../src/models/pluginDependency.js"],"names":["is","require","semver","Immutable","PREFIX","DEFAULT_VERSION","PluginDependency","Record","name","String","version","enabled","Boolean","prototype","getName","get","getVersion","isEnabled","toggle","state","undef","set","getNpmID","nameToNpmID","isGitDependency","validRange","create","undefined","createFromString","s","parts","split","slice","join","listFromString","listFromArray","arr","List","map","entry","string","filter","dep","listToArray","list","result","toJS","module","exports"],"mappings":"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","file":"pluginDependency.js","sourcesContent":["const is = require('is');\nconst semver = require('semver');\nconst Immutable = require('immutable');\n\nconst PREFIX = require('../constants/pluginPrefix');\nconst DEFAULT_VERSION = '*';\n\n/*\n * PluginDependency represents the informations about a plugin\n * stored in config.plugins\n */\nconst PluginDependency = Immutable.Record({\n    name:       String(),\n\n    // Requirement version (ex: \">1.0.0\")\n    version:    String(DEFAULT_VERSION),\n\n    // Is this plugin enabled or disabled?\n    enabled:    Boolean(true)\n}, 'PluginDependency');\n\nPluginDependency.prototype.getName = function() {\n    return this.get('name');\n};\n\nPluginDependency.prototype.getVersion = function() {\n    return this.get('version');\n};\n\nPluginDependency.prototype.isEnabled = function() {\n    return this.get('enabled');\n};\n\n/**\n * Toggle this plugin state\n * @param  {Boolean}\n * @return {PluginDependency}\n */\nPluginDependency.prototype.toggle = function(state) {\n    if (is.undef(state)) {\n        state = !this.isEnabled();\n    }\n\n    return this.set('enabled', state);\n};\n\n/**\n * Return NPM ID for the dependency\n * @return {String}\n */\nPluginDependency.prototype.getNpmID = function() {\n    return PluginDependency.nameToNpmID(this.getName());\n};\n\n/**\n * Is the plugin using a git dependency\n * @return {Boolean}\n */\nPluginDependency.prototype.isGitDependency = function() {\n    return !semver.validRange(this.getVersion());\n};\n\n/**\n * Create a plugin with a name and a plugin\n * @param {String}\n * @return {Plugin|undefined}\n */\nPluginDependency.create = function(name, version, enabled) {\n    if (is.undefined(enabled)) {\n        enabled = true;\n    }\n\n    return new PluginDependency({\n        name,\n        version: version || DEFAULT_VERSION,\n        enabled: Boolean(enabled)\n    });\n};\n\n/**\n * Create a plugin from a string\n * @param {String}\n * @return {Plugin|undefined}\n */\nPluginDependency.createFromString = function(s) {\n    const parts = s.split('@');\n    let name = parts[0];\n    const version = parts.slice(1).join('@');\n    let enabled = true;\n\n    if (name[0] === '-') {\n        enabled = false;\n        name = name.slice(1);\n    }\n\n    return new PluginDependency({\n        name,\n        version: version || DEFAULT_VERSION,\n        enabled\n    });\n};\n\n/**\n * Create a PluginDependency from a string\n * @param {String}\n * @return {List<PluginDependency>}\n */\nPluginDependency.listFromString = function(s) {\n    const parts = s.split(',');\n    return PluginDependency.listFromArray(parts);\n};\n\n/**\n * Create a PluginDependency from an array\n * @param {Array}\n * @return {List<PluginDependency>}\n */\nPluginDependency.listFromArray = function(arr) {\n    return Immutable.List(arr)\n        .map((entry) => {\n            if (is.string(entry)) {\n                return PluginDependency.createFromString(entry);\n            } else {\n                return PluginDependency({\n                    name: entry.get('name'),\n                    version: entry.get('version')\n                });\n            }\n        })\n        .filter((dep) => {\n            return Boolean(dep.getName());\n        });\n};\n\n/**\n * Export plugin dependencies as an array\n * @param {List<PluginDependency>} list\n * @return {Array<String>}\n */\nPluginDependency.listToArray = function(list) {\n    return list\n        .map((dep) => {\n            let result = '';\n\n            if (!dep.isEnabled()) {\n                result += '-';\n            }\n\n            result += dep.getName();\n            if (dep.getVersion() !== DEFAULT_VERSION) {\n                result += '@' + dep.getVersion();\n            }\n\n            return result;\n        })\n        .toJS();\n};\n\n/**\n * Return NPM id for a plugin name\n * @param {String}\n * @return {String}\n */\nPluginDependency.nameToNpmID = function(s) {\n    return PREFIX + s;\n};\n\nmodule.exports = PluginDependency;\n"]}