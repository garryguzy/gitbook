{"version":3,"sources":["../../src/models/output.js"],"names":["require","Record","OrderedMap","Map","List","Git","LocationUtils","Book","URIIndex","DEFAULTS","book","generator","String","plugins","pages","assets","options","state","urls","git","Output","get","filePath","normalize","getPages","getOptions","newState","set","newOptions","getBook","getLogger","module","exports"],"mappings":";;;;;;;;;;eAA0CA,QAAQ,WAAR,C;IAAlCC,M,YAAAA,M;IAAQC,U,YAAAA,U;IAAYC,G,YAAAA,G;IAAKC,I,YAAAA,I;;AAEjC,IAAMC,MAAML,QAAQ,cAAR,CAAZ;AACA,IAAMM,gBAAgBN,QAAQ,mBAAR,CAAtB;AACA,IAAMO,OAAOP,QAAQ,QAAR,CAAb;AACA,IAAMQ,WAAWR,QAAQ,YAAR,CAAjB;;AAEA,IAAMS,WAAW;AACbC,UAAW,IAAIH,IAAJ,EADE;AAEb;AACAI,eAAWC,QAHE;AAIb;AACAC,aAAWX,YALE;AAMb;AACAY,WAAWZ,YAPE;AAQb;AACAa,YAAWX,MATE;AAUb;AACAY,aAAWb,KAXE;AAYb;AACAc,WAAWd,KAbE;AAcb;AACAe,UAAW,IAAIV,QAAJ,EAfE;AAgBb;AACAW,SAAW,IAAId,GAAJ;AAjBE,CAAjB;;IAoBMe,M;;;;;;;;;;;kCACQ;AACN,mBAAO,KAAKC,GAAL,CAAS,MAAT,CAAP;AACH;;;uCAEc;AACX,mBAAO,KAAKA,GAAL,CAAS,WAAT,CAAP;AACH;;;qCAEY;AACT,mBAAO,KAAKA,GAAL,CAAS,SAAT,CAAP;AACH;;;mCAEU;AACP,mBAAO,KAAKA,GAAL,CAAS,OAAT,CAAP;AACH;;;qCAEY;AACT,mBAAO,KAAKA,GAAL,CAAS,SAAT,CAAP;AACH;;;oCAEW;AACR,mBAAO,KAAKA,GAAL,CAAS,QAAT,CAAP;AACH;;;mCAEU;AACP,mBAAO,KAAKA,GAAL,CAAS,OAAT,CAAP;AACH;;;sCAEa;AACV,mBAAO,KAAKA,GAAL,CAAS,MAAT,CAAP;AACH;;AAED;;;;;;;;;gCAMQC,Q,EAAU;AACdA,uBAAWhB,cAAciB,SAAd,CAAwBD,QAAxB,CAAX;;AAEA,gBAAMR,QAAQ,KAAKU,QAAL,EAAd;AACA,mBAAOV,MAAMO,GAAN,CAAUC,QAAV,CAAP;AACH;;AAED;;;;;;;kCAIU;AACN,mBAAO,KAAKG,UAAL,GAAkBJ,GAAlB,CAAsB,MAAtB,CAAP;AACH;;AAED;;;;;;;;;iCAMSK,Q,EAAU;AACf,mBAAO,KAAKC,GAAL,CAAS,OAAT,EAAkBD,QAAlB,CAAP;AACH;;AAED;;;;;;;;;mCAMWE,U,EAAY;AACnB,mBAAO,KAAKD,GAAL,CAAS,SAAT,EAAoBC,UAApB,CAAP;AACH;;AAED;;;;;;;;oCAKY;AACR,mBAAO,KAAKC,OAAL,GAAeC,SAAf,EAAP;AACH;;;;EAjFgB7B,OAAOQ,QAAP,C;;AAoFrBsB,OAAOC,OAAP,GAAiBZ,MAAjB","file":"output.js","sourcesContent":["const { Record, OrderedMap, Map, List } = require('immutable');\n\nconst Git = require('../utils/git');\nconst LocationUtils = require('../utils/location');\nconst Book = require('./book');\nconst URIIndex = require('./uriIndex');\n\nconst DEFAULTS = {\n    book:      new Book(),\n    // Name of the generator being used\n    generator: String(),\n    // Map of plugins to use (String -> Plugin)\n    plugins:   OrderedMap(),\n    // Map pages to generation (String -> Page)\n    pages:     OrderedMap(),\n    // List of file that are not pages in the book (String)\n    assets:    List(),\n    // Option for the generation\n    options:   Map(),\n    // Internal state for the generation\n    state:     Map(),\n    // Index of urls\n    urls:      new URIIndex(),\n    // Git repositories manager\n    git:       new Git()\n};\n\nclass Output extends Record(DEFAULTS) {\n    getBook() {\n        return this.get('book');\n    }\n\n    getGenerator() {\n        return this.get('generator');\n    }\n\n    getPlugins() {\n        return this.get('plugins');\n    }\n\n    getPages() {\n        return this.get('pages');\n    }\n\n    getOptions() {\n        return this.get('options');\n    }\n\n    getAssets() {\n        return this.get('assets');\n    }\n\n    getState() {\n        return this.get('state');\n    }\n\n    getURLIndex() {\n        return this.get('urls');\n    }\n\n    /**\n     * Return a page byt its file path\n     *\n     * @param {String} filePath\n     * @return {Page|undefined}\n     */\n    getPage(filePath) {\n        filePath = LocationUtils.normalize(filePath);\n\n        const pages = this.getPages();\n        return pages.get(filePath);\n    }\n\n    /**\n     * Get root folder for output.\n     * @return {String}\n     */\n    getRoot() {\n        return this.getOptions().get('root');\n    }\n\n    /**\n     * Update state of output\n     *\n     * @param {Map} newState\n     * @return {Output}\n     */\n    setState(newState) {\n        return this.set('state', newState);\n    }\n\n    /**\n     * Update options\n     *\n     * @param {Map} newOptions\n     * @return {Output}\n     */\n    setOptions(newOptions) {\n        return this.set('options', newOptions);\n    }\n\n    /**\n     * Return logegr for this output (same as book)\n     *\n     * @return {Logger}\n     */\n    getLogger() {\n        return this.getBook().getLogger();\n    }\n}\n\nmodule.exports = Output;\n"]}