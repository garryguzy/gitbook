{"version":3,"sources":["../../src/models/config.js"],"names":["is","require","Record","fromJS","File","PluginDependency","configDefault","reducedObject","DEFAULTS","file","values","Config","get","getValues","JSON","stringify","toReducedVersion","toJS","set","keyPath","def","keyToKeyPath","hasIn","getIn","value","setIn","plugins","getValue","string","listFromString","listFromArray","name","getPluginDependencies","find","dep","getName","deps","listToArray","setValue","currentValues","mergeDeep","split","module","exports"],"mappings":"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","file":"config.js","sourcesContent":["const is = require('is');\nconst { Record, fromJS } = require('immutable');\n\nconst File = require('./file');\nconst PluginDependency = require('./pluginDependency');\nconst configDefault = require('../constants/configDefault');\nconst reducedObject = require('../utils/reducedObject');\n\nconst DEFAULTS = {\n    file:   new File(),\n    values: configDefault\n};\n\nclass Config extends Record(DEFAULTS) {\n    getFile() {\n        return this.get('file');\n    }\n\n    getValues() {\n        return this.get('values');\n    }\n\n    /**\n     * Return minimum version of configuration,\n     * Basically it returns the current config minus the default one\n     * @return {Map}\n     */\n    toReducedVersion() {\n        return reducedObject(configDefault, this.getValues());\n    }\n\n    /**\n     * Render config as text\n     * @return {String}\n     */\n    toText() {\n        return JSON.stringify(this.toReducedVersion().toJS(), null, 4);\n    }\n\n    /**\n     * Change the file for the configuration\n     * @param {File} file\n     * @return {Config}\n     */\n    setFile(file) {\n        return this.set('file', file);\n    }\n\n    /**\n     * Return a configuration value by its key path\n     * @param {String} key\n     * @return {Mixed}\n     */\n    getValue(keyPath, def) {\n        const values = this.getValues();\n        keyPath = Config.keyToKeyPath(keyPath);\n\n        if (!values.hasIn(keyPath)) {\n            return fromJS(def);\n        }\n\n        return values.getIn(keyPath);\n    }\n\n    /**\n     * Update a configuration value\n     * @param {String} key\n     * @param {Mixed} value\n     * @return {Config}\n     */\n    setValue(keyPath, value) {\n        keyPath = Config.keyToKeyPath(keyPath);\n\n        value = fromJS(value);\n\n        let values = this.getValues();\n        values = values.setIn(keyPath, value);\n\n        return this.set('values', values);\n    }\n\n    /**\n     * Return a list of plugin dependencies\n     * @return {List<PluginDependency>}\n     */\n    getPluginDependencies() {\n        const plugins = this.getValue('plugins');\n\n        if (is.string(plugins)) {\n            return PluginDependency.listFromString(plugins);\n        } else {\n            return PluginDependency.listFromArray(plugins);\n        }\n    }\n\n    /**\n     * Return a plugin dependency by its name\n     * @param {String} name\n     * @return {PluginDependency}\n     */\n    getPluginDependency(name) {\n        const plugins = this.getPluginDependencies();\n        return plugins.find((dep) => {\n            return dep.getName() === name;\n        });\n    }\n\n    /**\n     * Update the list of plugins dependencies\n     * @param {List<PluginDependency>}\n     * @return {Config}\n     */\n    setPluginDependencies(deps) {\n        const plugins = PluginDependency.listToArray(deps);\n        return this.setValue('plugins', plugins);\n    }\n\n    /**\n     * Update values for an existing configuration\n     * @param {Object} values\n     * @returns {Config}\n     */\n    updateValues(values) {\n        values = fromJS(values);\n        return this.set('values', values);\n    }\n\n    /**\n     * Update values for an existing configuration\n     * @param {Config} config\n     * @param {Object} values\n     * @returns {Config}\n     */\n    mergeValues(values) {\n        let currentValues = this.getValues();\n        values = fromJS(values);\n\n        currentValues = currentValues.mergeDeep(values);\n\n        return this.set('values', currentValues);\n    }\n\n    /**\n     * Create a new config for a file\n     * @param {File} file\n     * @param {Object} values\n     * @returns {Config}\n     */\n    static create(file, values) {\n        return new Config({\n            file,\n            values: fromJS(values)\n        });\n    }\n\n    /**\n     * Create a new config\n     * @param {Object} values\n     * @returns {Config}\n     */\n    static createWithValues(values) {\n        return new Config({\n            values: fromJS(values)\n        });\n    }\n\n\n    /**\n     * Convert a keyPath to an array of keys\n     * @param {String|Array}\n     * @return {Array}\n     */\n    static keyToKeyPath(keyPath) {\n        if (is.string(keyPath)) keyPath = keyPath.split('.');\n        return keyPath;\n    }\n}\n\nmodule.exports = Config;\n"]}