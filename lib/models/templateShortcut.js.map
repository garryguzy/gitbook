{"version":3,"sources":["../../src/models/templateShortcut.js"],"names":["Immutable","require","is","TemplateShortcut","Record","parsers","Map","start","String","end","startTag","endTag","prototype","getStart","get","getEnd","getStartTag","getEndTag","getParsers","acceptParser","parser","string","name","parserNames","includes","createForBlock","block","details","fromJS","getName","module","exports"],"mappings":";;AAAA,IAAMA,YAAYC,QAAQ,WAAR,CAAlB;AACA,IAAMC,KAAKD,QAAQ,IAAR,CAAX;;AAEA;;;;AAIA,IAAME,mBAAmBH,UAAUI,MAAV,CAAiB;AACtC;AACAC,aAAaL,UAAUM,GAAV,EAFyB;;AAItCC,WAAaC,QAJyB;AAKtCC,SAAaD,QALyB;;AAOtCE,cAAaF,QAPyB;AAQtCG,YAAaH;AARyB,CAAjB,EAStB,kBATsB,CAAzB;;AAWAL,iBAAiBS,SAAjB,CAA2BC,QAA3B,GAAsC,YAAW;AAC7C,WAAO,KAAKC,GAAL,CAAS,OAAT,CAAP;AACH,CAFD;;AAIAX,iBAAiBS,SAAjB,CAA2BG,MAA3B,GAAoC,YAAW;AAC3C,WAAO,KAAKD,GAAL,CAAS,KAAT,CAAP;AACH,CAFD;;AAIAX,iBAAiBS,SAAjB,CAA2BI,WAA3B,GAAyC,YAAW;AAChD,WAAO,KAAKF,GAAL,CAAS,UAAT,CAAP;AACH,CAFD;;AAIAX,iBAAiBS,SAAjB,CAA2BK,SAA3B,GAAuC,YAAW;AAC9C,WAAO,KAAKH,GAAL,CAAS,QAAT,CAAP;AACH,CAFD;;AAIAX,iBAAiBS,SAAjB,CAA2BM,UAA3B,GAAwC,YAAW;AAC/C,WAAO,KAAKJ,GAAL,CAAS,SAAT,CAAP;AACH,CAFD;;AAIA;;;;;;AAMAX,iBAAiBS,SAAjB,CAA2BO,YAA3B,GAA0C,UAASC,MAAT,EAAiB;AACvD,QAAI,CAAClB,GAAGmB,MAAH,CAAUD,MAAV,CAAL,EAAwB;AACpBA,iBAASA,OAAOE,IAAhB;AACH;;AAED,QAAMC,cAAc,KAAKT,GAAL,CAAS,SAAT,CAApB;AACA,WAAOS,YAAYC,QAAZ,CAAqBJ,MAArB,CAAP;AACH,CAPD;;AASA;;;;;;;AAOAjB,iBAAiBsB,cAAjB,GAAkC,UAASC,KAAT,EAAgBC,OAAhB,EAAyB;AACvDA,cAAU3B,UAAU4B,MAAV,CAAiBD,OAAjB,CAAV;;AAEA,WAAO,IAAIxB,gBAAJ,CAAqB;AACxBE,iBAAgBsB,QAAQb,GAAR,CAAY,SAAZ,CADQ;AAExBP,eAAgBoB,QAAQb,GAAR,CAAY,OAAZ,CAFQ;AAGxBL,aAAgBkB,QAAQb,GAAR,CAAY,KAAZ,CAHQ;AAIxBJ,kBAAgBgB,MAAMG,OAAN,EAJQ;AAKxBlB,gBAAgBe,MAAMT,SAAN;AALQ,KAArB,CAAP;AAOH,CAVD;;AAYAa,OAAOC,OAAP,GAAiB5B,gBAAjB","file":"templateShortcut.js","sourcesContent":["const Immutable = require('immutable');\nconst is = require('is');\n\n/*\n    A TemplateShortcut is defined in plugin's template blocks\n    to replace content with a templating block using delimiters.\n*/\nconst TemplateShortcut = Immutable.Record({\n    // List of parser names accepting this shortcut\n    parsers:     Immutable.Map(),\n\n    start:       String(),\n    end:         String(),\n\n    startTag:    String(),\n    endTag:      String()\n}, 'TemplateShortcut');\n\nTemplateShortcut.prototype.getStart = function() {\n    return this.get('start');\n};\n\nTemplateShortcut.prototype.getEnd = function() {\n    return this.get('end');\n};\n\nTemplateShortcut.prototype.getStartTag = function() {\n    return this.get('startTag');\n};\n\nTemplateShortcut.prototype.getEndTag = function() {\n    return this.get('endTag');\n};\n\nTemplateShortcut.prototype.getParsers = function() {\n    return this.get('parsers');\n};\n\n/**\n    Test if this shortcut accept a parser\n\n    @param {Parser|String} parser\n    @return {Boolean}\n*/\nTemplateShortcut.prototype.acceptParser = function(parser) {\n    if (!is.string(parser)) {\n        parser = parser.name;\n    }\n\n    const parserNames = this.get('parsers');\n    return parserNames.includes(parser);\n};\n\n/**\n    Create a shortcut for a block\n\n    @param {TemplateBlock} block\n    @param {Map} details\n    @return {TemplateShortcut}\n*/\nTemplateShortcut.createForBlock = function(block, details) {\n    details = Immutable.fromJS(details);\n\n    return new TemplateShortcut({\n        parsers:        details.get('parsers'),\n        start:          details.get('start'),\n        end:            details.get('end'),\n        startTag:       block.getName(),\n        endTag:         block.getEndTag()\n    });\n};\n\nmodule.exports = TemplateShortcut;\n"]}