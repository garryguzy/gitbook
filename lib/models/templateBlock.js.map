{"version":3,"sources":["../../src/models/templateBlock.js"],"names":["is","require","extend","Record","List","Map","escape","Promise","TemplateShortcut","NODE_ENDARGS","HTML_TAGNAME","DEFAULTS","name","String","end","process","Function","blocks","shortcuts","TemplateBlock","get","getName","size","undefined","createForBlock","mainContext","that","endTag","getEndTag","getBlocks","toJS","Ext","tags","parse","parser","nodes","lastBlockName","lastBlockArgs","allBlocks","concat","tok","nextToken","parseSignature","advanceAfterBlockEnd","value","args","NodeList","bodies","blockNamesNode","Array","lineno","colno","blockArgCounts","currentBody","parseUntilBlocks","addChild","Literal","children","length","push","forEach","child","CallExtensionAsync","run","context","fnArgs","callback","pop","endArgIndex","indexOf","slice","blockNames","blkName","i","countArgs","blockBody","shift","blockArgs","blockKwargs","extractKwargs","kwargs","mainBlock","then","ctx","toProps","props","toHTML","nodeify","inner","processFn","getProcess","call","string","innerProps","payload","JSON","stringify","blockName","block","fn","set","last","object","__keywords","module","exports"],"mappings":"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","file":"templateBlock.js","sourcesContent":["const is = require('is');\nconst extend = require('extend');\nconst { Record, List, Map } = require('immutable');\nconst escape = require('escape-html');\n\nconst Promise = require('../utils/promise');\nconst TemplateShortcut = require('./templateShortcut');\n\nconst NODE_ENDARGS = '%%endargs%%';\nconst HTML_TAGNAME = 'xblock';\n\nconst DEFAULTS = {\n    // Name of block, also the start tag\n    name:      String(),\n    // End tag, default to \"end<name>\"\n    end:       String(),\n    // Function to process the block content\n    process:   Function(),\n    // List of String, for inner block tags\n    blocks:    List(),\n    // List of shortcuts to replace with this block\n    shortcuts: Map()\n};\n\nclass TemplateBlock extends Record(DEFAULTS) {\n    getName() {\n        return this.get('name');\n    }\n\n    getEndTag() {\n        return this.get('end') || ('end' + this.getName());\n    }\n\n    getProcess() {\n        return this.get('process');\n    }\n\n    getBlocks() {\n        return this.get('blocks');\n    }\n\n\n    /**\n     * Return shortcuts associated with this block or undefined\n     * @return {TemplateShortcut|undefined}\n     */\n    getShortcuts() {\n        const shortcuts = this.get('shortcuts');\n        if (shortcuts.size === 0) {\n            return undefined;\n        }\n\n        return TemplateShortcut.createForBlock(this, shortcuts);\n    }\n\n    /**\n     * Return name for the nunjucks extension\n     * @return {String}\n     */\n    getExtensionName() {\n        return 'Block' + this.getName() + 'Extension';\n    }\n\n    /**\n     * Return a nunjucks extension to represents this block\n     * @return {Nunjucks.Extension}\n     */\n    toNunjucksExt(mainContext = {}) {\n        const that = this;\n        const name = this.getName();\n        const endTag = this.getEndTag();\n        const blocks = this.getBlocks().toJS();\n\n        function Ext() {\n            this.tags = [name];\n\n            this.parse = (parser, nodes) => {\n                let lastBlockName = null;\n                let lastBlockArgs = null;\n                const allBlocks = blocks.concat([endTag]);\n\n                // Parse first block\n                const tok = parser.nextToken();\n                lastBlockArgs = parser.parseSignature(null, true);\n                parser.advanceAfterBlockEnd(tok.value);\n\n                const args = new nodes.NodeList();\n                const bodies = [];\n                const blockNamesNode = new nodes.Array(tok.lineno, tok.colno);\n                const blockArgCounts = new nodes.Array(tok.lineno, tok.colno);\n\n                // Parse while we found \"end<block>\"\n                do {\n                    // Read body\n                    const currentBody = parser.parseUntilBlocks(...allBlocks);\n\n                    // Handle body with previous block name and args\n                    blockNamesNode.addChild(new nodes.Literal(args.lineno, args.colno, lastBlockName));\n                    blockArgCounts.addChild(new nodes.Literal(args.lineno, args.colno, lastBlockArgs.children.length));\n                    bodies.push(currentBody);\n\n                    // Append arguments of this block as arguments of the run function\n                    lastBlockArgs.children.forEach((child) => {\n                        args.addChild(child);\n                    });\n\n                    // Read new block\n                    lastBlockName = parser.nextToken().value;\n\n                    // Parse signature and move to the end of the block\n                    if (lastBlockName != endTag) {\n                        lastBlockArgs = parser.parseSignature(null, true);\n                    }\n\n                    parser.advanceAfterBlockEnd(lastBlockName);\n                } while (lastBlockName != endTag);\n\n                args.addChild(blockNamesNode);\n                args.addChild(blockArgCounts);\n                args.addChild(new nodes.Literal(args.lineno, args.colno, NODE_ENDARGS));\n\n                return new nodes.CallExtensionAsync(this, 'run', args, bodies);\n            };\n\n            this.run = (context, ...fnArgs) => {\n                let args;\n                const blocks = [];\n                let bodies = [];\n\n                // Extract callback\n                const callback = fnArgs.pop();\n\n                // Detect end of arguments\n                const endArgIndex = fnArgs.indexOf(NODE_ENDARGS);\n\n                // Extract arguments and bodies\n                args = fnArgs.slice(0, endArgIndex);\n                bodies = fnArgs.slice(endArgIndex + 1);\n\n                // Extract block counts\n                const blockArgCounts = args.pop();\n                const blockNames = args.pop();\n\n                // Recreate list of blocks\n                blockNames.forEach((blkName, i) => {\n                    const countArgs = blockArgCounts[i];\n                    const blockBody = bodies.shift();\n\n                    const blockArgs = countArgs > 0 ? args.slice(0, countArgs) : [];\n                    args = args.slice(countArgs);\n                    const blockKwargs = extractKwargs(blockArgs);\n\n                    blocks.push({\n                        name: blkName,\n                        children: blockBody(),\n                        args: blockArgs,\n                        kwargs: blockKwargs\n                    });\n                });\n\n                const mainBlock = blocks.shift();\n                mainBlock.blocks = blocks;\n\n                Promise()\n                .then(() => {\n                    const ctx = extend({\n                        ctx: context\n                    }, mainContext);\n\n                    return that.toProps(mainBlock, ctx);\n                })\n                .then((props) => {\n                    return that.toHTML(props);\n                })\n                .nodeify(callback);\n            };\n        }\n\n        return Ext;\n    }\n\n    /**\n     * Apply a block an return the props\n     *\n     * @param {Object} inner\n     * @param {Object} context\n     * @return {Promise<Props>}\n     */\n    toProps(inner, context) {\n        const processFn = this.getProcess();\n\n        inner = inner || {};\n        inner.args = inner.args || [];\n        inner.kwargs = inner.kwargs || {};\n        inner.blocks = inner.blocks || [];\n\n        return Promise()\n        .then(() => processFn.call(context, inner))\n        .then((props) => {\n            if (is.string(props)) {\n                return { children: props };\n            }\n\n            return props;\n        });\n    }\n\n    /**\n     * Convert a block props to HTML. This HTML is then being\n     * parsed by gitbook-core during rendering, and binded to the right react components.\n     *\n     * @param {Object} props\n     * @return {String}\n     */\n    toHTML(props) {\n        const { children, ...innerProps } = props;\n        const payload = escape(JSON.stringify(innerProps));\n\n        return (\n            `<${HTML_TAGNAME} name=\"${this.name}\" props=\"${payload}\">${children || ''}</${HTML_TAGNAME}>`\n        );\n    }\n\n    /**\n     * Create a template block from a function or an object\n     * @param {String} blockName\n     * @param {Object} block\n     * @return {TemplateBlock}\n     */\n    static create(blockName, block) {\n        if (is.fn(block)) {\n            block = new Map({\n                process: block\n            });\n        }\n\n        block = new TemplateBlock(block);\n        block = block.set('name', blockName);\n        return block;\n    }\n}\n\n/**\n * Extract kwargs from an arguments array\n * @param {Array} args\n * @return {Object}\n */\nfunction extractKwargs(args) {\n    const last = args[args.length - 1];\n    return (is.object(last) && last.__keywords) ? args.pop() : {};\n}\n\nmodule.exports = TemplateBlock;\n"]}