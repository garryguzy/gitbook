{"version":3,"sources":["../../src/models/plugin.js"],"names":["require","Record","Map","TemplateBlock","PluginDependency","THEME_PREFIX","DEFAULT_VERSION","DEFAULTS","name","String","version","path","depth","Number","parent","package","content","Plugin","get","nameToNpmID","getName","Boolean","getPackage","size","indexOf","getContent","blocks","map","block","blockName","create","getHooks","s","parts","split","slice","join","dep","getVersion","module","exports"],"mappings":"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","file":"plugin.js","sourcesContent":["const { Record, Map } = require('immutable');\n\nconst TemplateBlock = require('./templateBlock');\nconst PluginDependency = require('./pluginDependency');\nconst THEME_PREFIX = require('../constants/themePrefix');\n\nconst DEFAULT_VERSION = '*';\n\nconst DEFAULTS = {\n    name:    String(),\n    // Requirement version (ex: \">1.0.0\")\n    version: String(DEFAULT_VERSION),\n    // Path to load this plugin\n    path:    String(),\n    // Depth of this plugin in the dependency tree\n    depth:   Number(0),\n    // Parent depending on this plugin\n    parent:  String(),\n    // Content of the \"package.json\"\n    package: Map(),\n    // Content of the package itself\n    content: Map()\n};\n\nclass Plugin extends Record(DEFAULTS) {\n    getName() {\n        return this.get('name');\n    }\n\n    getPath() {\n        return this.get('path');\n    }\n\n    getVersion() {\n        return this.get('version');\n    }\n\n    getPackage() {\n        return this.get('package');\n    }\n\n    getContent() {\n        return this.get('content');\n    }\n\n    getDepth() {\n        return this.get('depth');\n    }\n\n    getParent() {\n        return this.get('parent');\n    }\n\n    /**\n     * Return the ID on NPM for this plugin\n     * @return {String}\n     */\n    getNpmID() {\n        return PluginDependency.nameToNpmID(this.getName());\n    }\n\n    /**\n     * Check if a plugin is loaded\n     * @return {Boolean}\n     */\n    isLoaded() {\n        return Boolean(this.getPackage().size > 0);\n    }\n\n    /**\n     * Check if a plugin is a theme given its name\n     * @return {Boolean}\n     */\n    isTheme() {\n        const name = this.getName();\n        return (name && name.indexOf(THEME_PREFIX) === 0);\n    }\n\n    /**\n     * Return map of hooks\n     * @return {Map<String:Function>}\n     */\n    getHooks() {\n        return this.getContent().get('hooks') || Map();\n    }\n\n    /**\n     * Return map of filters\n     * @return {Map<String:Function>}\n     */\n    getFilters() {\n        return this.getContent().get('filters');\n    }\n\n    /**\n     * Return map of blocks\n     * @return {Map<String:TemplateBlock>}\n     */\n    getBlocks() {\n        let blocks = this.getContent().get('blocks');\n        blocks = blocks || Map();\n\n        return blocks\n            .map((block, blockName) => {\n                return TemplateBlock.create(blockName, block);\n            });\n    }\n\n    /**\n     * Return a specific hook\n     * @param {String} name\n     * @return {Function|undefined}\n     */\n    getHook(name) {\n        return this.getHooks().get(name);\n    }\n\n    /**\n     * Create a plugin from a string\n     * @param {String}\n     * @return {Plugin}\n     */\n    static createFromString(s) {\n        const parts = s.split('@');\n        const name = parts[0];\n        const version = parts.slice(1).join('@');\n\n        return new Plugin({\n            name,\n            version: version || DEFAULT_VERSION\n        });\n    }\n\n    /**\n     * Create a plugin from a dependency\n     * @param {PluginDependency}\n     * @return {Plugin}\n     */\n    static createFromDep(dep) {\n        return new Plugin({\n            name: dep.getName(),\n            version: dep.getVersion()\n        });\n    }\n}\n\nPlugin.nameToNpmID = PluginDependency.nameToNpmID;\n\nmodule.exports = Plugin;\n"]}