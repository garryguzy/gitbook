{"version":3,"sources":["../../src/models/fs.js"],"names":["path","require","Immutable","stream","File","Promise","error","PathUtil","FS","Record","root","String","fsExists","Function","fsReadFile","fsStatFile","fsReadDir","fsLoadObject","fsReadAsStream","prototype","getRoot","get","isInScope","filename","rootPath","join","isInRoot","resolve","args","normalize","FileOutOfScopeError","exists","that","then","read","readAsString","encoding","buf","toString","readAsStream","filepath","bufferStream","PassThrough","end","statFile","stat","createFromStat","readDir","dirname","dirpath","files","List","listFiles","filterNot","pathIsFolder","listAllFiles","dirName","filterFn","reduce","out","file","isDirectory","newDirName","push","inner","concat","findFile","find","toLowerCase","loadAsObject","err","Error","code","str","JSON","parse","create","def","reduceScope","fs","scope","set","lastChar","length","module","exports"],"mappings":"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","file":"fs.js","sourcesContent":["const path = require('path');\nconst Immutable = require('immutable');\nconst stream = require('stream');\n\nconst File = require('./file');\nconst Promise = require('../utils/promise');\nconst error = require('../utils/error');\nconst PathUtil = require('../utils/path');\n\nconst FS = Immutable.Record({\n    root:           String(),\n\n    fsExists:         Function(),\n    fsReadFile:       Function(),\n    fsStatFile:       Function(),\n    fsReadDir:        Function(),\n\n    fsLoadObject:     null,\n    fsReadAsStream:   null\n});\n\n/**\n    Return path to the root\n\n    @return {String}\n*/\nFS.prototype.getRoot = function() {\n    return this.get('root');\n};\n\n/**\n    Verify that a file is in the fs scope\n\n    @param {String} filename\n    @return {Boolean}\n*/\nFS.prototype.isInScope = function(filename) {\n    const rootPath = this.getRoot();\n    filename = path.join(rootPath, filename);\n\n    return PathUtil.isInRoot(rootPath, filename);\n};\n\n/**\n * Resolve a file in this FS\n * @param {String}\n * @return {String}\n */\nFS.prototype.resolve = function(...args) {\n    const rootPath = this.getRoot();\n    let filename = path.join(rootPath, ...args);\n    filename = path.normalize(filename);\n\n    if (!this.isInScope(filename)) {\n        throw error.FileOutOfScopeError({\n            filename,\n            root: this.root\n        });\n    }\n\n    return filename;\n};\n\n/**\n * Check if a file exists, run a Promise(true) if that's the case, Promise(false) otherwise\n * @param {String} filename\n * @return {Promise<Boolean>}\n */\nFS.prototype.exists = function(filename) {\n    const that = this;\n\n    return Promise()\n    .then(() => {\n        filename = that.resolve(filename);\n        const exists = that.get('fsExists');\n\n        return exists(filename);\n    });\n};\n\n/**\n * Read a file and returns a promise with the content as a buffer\n * @param {String} filename\n * @return {Promise<Buffer>}\n */\nFS.prototype.read = function(filename) {\n    const that = this;\n\n    return Promise()\n    .then(() => {\n        filename = that.resolve(filename);\n        const read = that.get('fsReadFile');\n\n        return read(filename);\n    });\n};\n\n/**\n * Read a file as a string (utf-8)\n * @param {String} filename\n * @return {Promise<String>}\n */\nFS.prototype.readAsString = function(filename, encoding) {\n    encoding = encoding || 'utf8';\n\n    return this.read(filename)\n    .then((buf) => {\n        return buf.toString(encoding);\n    });\n};\n\n/**\n * Read file as a stream\n * @param {String} filename\n * @return {Promise<Stream>}\n */\nFS.prototype.readAsStream = function(filename) {\n    const that = this;\n    const filepath = that.resolve(filename);\n    const fsReadAsStream = this.get('fsReadAsStream');\n\n    if (fsReadAsStream) {\n        return Promise(fsReadAsStream(filepath));\n    }\n\n    return this.read(filename)\n    .then((buf) => {\n        const bufferStream = new stream.PassThrough();\n        bufferStream.end(buf);\n\n        return bufferStream;\n    });\n};\n\n/**\n * Read stat infos about a file\n * @param {String} filename\n * @return {Promise<File>}\n */\nFS.prototype.statFile = function(filename) {\n    const that = this;\n\n    return Promise()\n    .then(() => {\n        const filepath = that.resolve(filename);\n        const stat = that.get('fsStatFile');\n\n        return stat(filepath);\n    })\n    .then((stat) => {\n        return File.createFromStat(filename, stat);\n    });\n};\n\n/**\n * List files/directories in a directory.\n * Directories ends with '/'\n\n * @param {String} dirname\n * @return {Promise<List<String>>}\n */\nFS.prototype.readDir = function(dirname) {\n    const that = this;\n\n    return Promise()\n    .then(() => {\n        const dirpath = that.resolve(dirname);\n        const readDir = that.get('fsReadDir');\n\n        return readDir(dirpath);\n    })\n    .then((files) => {\n        return Immutable.List(files);\n    });\n};\n\n/**\n * List only files in a diretcory\n * Directories ends with '/'\n *\n * @param {String} dirname\n * @return {Promise<List<String>>}\n */\nFS.prototype.listFiles = function(dirname) {\n    return this.readDir(dirname)\n    .then((files) => {\n        return files.filterNot(pathIsFolder);\n    });\n};\n\n/**\n * List all files in a directory\n *\n * @param {String} dirName\n * @param {Function(dirName)} filterFn: call it for each file/directory to test if it should stop iterating\n * @return {Promise<List<String>>}\n */\nFS.prototype.listAllFiles = function(dirName, filterFn) {\n    const that = this;\n    dirName = dirName || '.';\n\n    return this.readDir(dirName)\n    .then((files) => {\n        return Promise.reduce(files, (out, file) => {\n            const isDirectory = pathIsFolder(file);\n            const newDirName = path.join(dirName, file);\n\n            if (filterFn && filterFn(newDirName) === false) {\n                return out;\n            }\n\n            if (!isDirectory) {\n                return out.push(newDirName);\n            }\n\n            return that.listAllFiles(newDirName, filterFn)\n            .then((inner) => {\n                return out.concat(inner);\n            });\n        }, Immutable.List());\n    });\n};\n\n/**\n * Find a file in a folder (case insensitive)\n * Return the found filename\n *\n * @param {String} dirname\n * @param {String} filename\n * @return {Promise<String>}\n */\nFS.prototype.findFile = function(dirname, filename) {\n    return this.listFiles(dirname)\n    .then((files) => {\n        return files.find((file) => {\n            return (file.toLowerCase() == filename.toLowerCase());\n        });\n    });\n};\n\n/**\n * Load a JSON file\n * By default, fs only supports JSON\n *\n * @param {String} filename\n * @return {Promise<Object>}\n */\nFS.prototype.loadAsObject = function(filename) {\n    const that = this;\n    const fsLoadObject = this.get('fsLoadObject');\n\n    return this.exists(filename)\n    .then((exists) => {\n        if (!exists) {\n            const err = new Error('Module doesn\\'t exist');\n            err.code = 'MODULE_NOT_FOUND';\n\n            throw err;\n        }\n\n        if (fsLoadObject) {\n            return fsLoadObject(that.resolve(filename));\n        } else {\n            return that.readAsString(filename)\n            .then((str) => {\n                return JSON.parse(str);\n            });\n        }\n    });\n};\n\n/**\n * Create a FS instance\n *\n * @param {Object} def\n * @return {FS}\n */\nFS.create = function create(def) {\n    return new FS(def);\n};\n\n/**\n * Create a new FS instance with a reduced scope\n *\n * @param {FS} fs\n * @param {String} scope\n * @return {FS}\n */\nFS.reduceScope = function reduceScope(fs, scope) {\n    return fs.set('root', path.join(fs.getRoot(), scope));\n};\n\n\n// .readdir return files/folder as a list of string, folder ending with '/'\nfunction pathIsFolder(filename) {\n    const lastChar = filename[filename.length - 1];\n    return lastChar == '/' || lastChar == '\\\\';\n}\n\nmodule.exports = FS;\n"]}