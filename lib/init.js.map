{"version":3,"sources":["../src/init.js"],"names":["path","require","createNodeFS","fs","Promise","File","Readme","Book","Parse","SummaryModifier","initBook","rootFolder","extension","mkdirp","then","bookFS","book","createForFS","parseReadme","fail","readmeFile","createWithFilepath","readme","create","setFile","setReadme","parseSummary","logger","getLogger","summary","getSummary","summaryFile","getFile","summaryFilename","getPath","articles","getArticlesAsList","forEach","article","articlePath","filePath","join","assertFile","ensureFile","info","ln","writeFile","getTitle","basename","text","toText","module","exports"],"mappings":"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","file":"init.js","sourcesContent":["const path = require('path');\n\nconst createNodeFS = require('./fs/node');\nconst fs = require('./utils/fs');\nconst Promise = require('./utils/promise');\nconst File = require('./models/file');\nconst Readme = require('./models/readme');\nconst Book = require('./models/book');\nconst Parse = require('./parse');\nconst SummaryModifier = require('./modifiers/summary');\n\n/**\n * Initialize folder structure for a book\n * Read SUMMARY to created the right chapter\n *\n * @param {Book}\n * @param {String}\n * @return {Promise}\n */\nfunction initBook(rootFolder) {\n    const extension = '.md';\n\n    return fs.mkdirp(rootFolder)\n\n    // Parse the summary and readme\n    .then(() => {\n        const bookFS = createNodeFS(rootFolder);\n        const book = Book.createForFS(bookFS);\n\n        return Parse.parseReadme(book)\n\n        // Setup default readme if doesn't found one\n        .fail(() => {\n            const readmeFile = File.createWithFilepath('README' + extension);\n            const readme = Readme.create().setFile(readmeFile);\n            return book.setReadme(readme);\n        });\n    })\n    .then(book => Parse.parseSummary(book))\n\n    .then((book) => {\n        const logger = book.getLogger();\n        const summary = book.getSummary();\n        const summaryFile = summary.getFile();\n        const summaryFilename = summaryFile.getPath() || ('SUMMARY' + extension);\n\n        const articles = summary.getArticlesAsList();\n\n        // Write pages\n        return Promise.forEach(articles, (article) => {\n            const articlePath = article.getPath();\n            const filePath = articlePath ? path.join(rootFolder, articlePath) : null;\n            if (!filePath) {\n                return;\n            }\n\n            return fs.assertFile(filePath, () => {\n                return fs.ensureFile(filePath)\n                .then(() => {\n                    logger.info.ln('create', article.getPath());\n                    return fs.writeFile(filePath, '# ' + article.getTitle() + '\\n\\n');\n                });\n            });\n        })\n\n        // Write summary\n        .then(() => {\n            const filePath = path.join(rootFolder, summaryFilename);\n\n            return fs.ensureFile(filePath)\n            .then(() => {\n                logger.info.ln('create ' + path.basename(filePath));\n                const text = SummaryModifier.toText(summary, extension);\n                return fs.writeFile(filePath, text);\n            });\n        })\n\n        // Log end\n        .then(() => {\n            logger.info.ln('initialization is finished');\n        });\n    });\n}\n\nmodule.exports = initBook;\n"]}