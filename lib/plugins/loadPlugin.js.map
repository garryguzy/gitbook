{"version":3,"sources":["../../src/plugins/loadPlugin.js"],"names":["path","require","resolve","Immutable","Promise","error","timing","validatePlugin","isModuleNotFound","err","code","message","indexOf","loadPlugin","book","plugin","logger","getLogger","name","getName","pkgPath","getPath","p","then","packageContent","packageMain","content","res","sync","basedir","dirname","undefined","indexJs","normalize","main","PluginError","merge","fromJS","measure","info","promise","module","exports"],"mappings":";;AAAA,IAAMA,OAAOC,QAAQ,MAAR,CAAb;AACA,IAAMC,UAAUD,QAAQ,SAAR,CAAhB;AACA,IAAME,YAAYF,QAAQ,WAAR,CAAlB;;AAEA,IAAMG,UAAUH,QAAQ,kBAAR,CAAhB;AACA,IAAMI,QAAQJ,QAAQ,gBAAR,CAAd;AACA,IAAMK,SAASL,QAAQ,iBAAR,CAAf;;AAEA,IAAMM,iBAAiBN,QAAQ,kBAAR,CAAvB;;AAEA;AACA;AACA,SAASO,gBAAT,CAA0BC,GAA1B,EAA+B;AAC3B,WAAOA,IAAIC,IAAJ,IAAY,kBAAZ,IAAkCD,IAAIE,OAAJ,CAAYC,OAAZ,CAAoB,oBAApB,KAA6C,CAAtF;AACH;;AAED;;;;;;;;AAQA,SAASC,UAAT,CAAoBC,IAApB,EAA0BC,MAA1B,EAAkC;AAC9B,QAAMC,SAASF,KAAKG,SAAL,EAAf;;AAEA,QAAMC,OAAOH,OAAOI,OAAP,EAAb;AACA,QAAIC,UAAUL,OAAOM,OAAP,EAAd;;AAEA;AACA,QAAIC,IAAIlB,UACPmB,IADO,CACF,YAAM;AACR,YAAIC,uBAAJ;AACA,YAAIC,oBAAJ;AACA,YAAIC,gBAAJ;;AAEA;AACA,YAAI;AACA,gBAAMC,MAAMzB,QAAQ0B,IAAR,CAAa,gBAAb,EAA+B,EAAEC,SAAST,OAAX,EAA/B,CAAZ;;AAEAA,sBAAUpB,KAAK8B,OAAL,CAAaH,GAAb,CAAV;AACAH,6BAAiBvB,QAAQ0B,GAAR,CAAjB;AACH,SALD,CAKE,OAAOlB,GAAP,EAAY;AACV,gBAAI,CAACD,iBAAiBC,GAAjB,CAAL,EAA4B,MAAMA,GAAN;;AAE5Be,6BAAiBO,SAAjB;AACAL,sBAAUK,SAAV;;AAEA;AACH;;AAED;AACA,YAAI;AACA,gBAAMC,UAAUhC,KAAKiC,SAAL,CAAeT,eAAeU,IAAf,IAAuB,UAAtC,CAAhB;AACAT,0BAAcvB,QAAQ0B,IAAR,CAAa,OAAOI,OAApB,EAA6B,EAAEH,SAAST,OAAX,EAA7B,CAAd;AACH,SAHD,CAGE,OAAOX,GAAP,EAAY;AACV,gBAAI,CAACD,iBAAiBC,GAAjB,CAAL,EAA4B,MAAMA,GAAN;AAC5BgB,0BAAcM,SAAd;AACH;;AAED;AACA,YAAIN,WAAJ,EAAiB;AACb,gBAAI;AACAC,0BAAUzB,QAAQwB,WAAR,CAAV;AACH,aAFD,CAEE,OAAOhB,GAAP,EAAY;AACV,sBAAM,IAAIJ,MAAM8B,WAAV,CAAsB1B,GAAtB,EAA2B;AAC7BM,4BAAQG;AADqB,iBAA3B,CAAN;AAGH;AACJ;;AAED;AACA,eAAOH,OAAOqB,KAAP,CAAa;AAChB,uBAAWjC,UAAUkC,MAAV,CAAiBb,cAAjB,CADK;AAEhB,uBAAWrB,UAAUkC,MAAV,CAAiBX,WAAW,EAA5B;AAFK,SAAb,CAAP;AAIH,KA9CO,EAgDPH,IAhDO,CAgDFhB,cAhDE,CAAR;;AAkDAe,QAAIhB,OAAOgC,OAAP,CAAe,aAAf,EAA8BhB,CAA9B,CAAJ;;AAEAN,WAAOuB,IAAP,CAAY,qBAAqBrB,IAArB,GAA4B,OAAxC;AACA,WAAOF,OAAOuB,IAAP,CAAYC,OAAZ,CAAoBlB,CAApB,CAAP;AACH;;AAGDmB,OAAOC,OAAP,GAAiB7B,UAAjB","file":"loadPlugin.js","sourcesContent":["const path = require('path');\nconst resolve = require('resolve');\nconst Immutable = require('immutable');\n\nconst Promise = require('../utils/promise');\nconst error = require('../utils/error');\nconst timing = require('../utils/timing');\n\nconst validatePlugin = require('./validatePlugin');\n\n// Return true if an error is a \"module not found\"\n// Wait on https://github.com/substack/node-resolve/pull/81 to be merged\nfunction isModuleNotFound(err) {\n    return err.code == 'MODULE_NOT_FOUND' || err.message.indexOf('Cannot find module') >= 0;\n}\n\n/**\n * Load a plugin in a book\n *\n * @param {Book} book\n * @param {Plugin} plugin\n * @param {String} pkgPath (optional)\n * @return {Promise<Plugin>}\n */\nfunction loadPlugin(book, plugin) {\n    const logger = book.getLogger();\n\n    const name = plugin.getName();\n    let pkgPath = plugin.getPath();\n\n    // Try loading plugins from different location\n    let p = Promise()\n    .then(() => {\n        let packageContent;\n        let packageMain;\n        let content;\n\n        // Locate plugin and load package.json\n        try {\n            const res = resolve.sync('./package.json', { basedir: pkgPath });\n\n            pkgPath = path.dirname(res);\n            packageContent = require(res);\n        } catch (err) {\n            if (!isModuleNotFound(err)) throw err;\n\n            packageContent = undefined;\n            content = undefined;\n\n            return;\n        }\n\n        // Locate the main package\n        try {\n            const indexJs = path.normalize(packageContent.main || 'index.js');\n            packageMain = resolve.sync('./' + indexJs, { basedir: pkgPath });\n        } catch (err) {\n            if (!isModuleNotFound(err)) throw err;\n            packageMain = undefined;\n        }\n\n        // Load plugin JS content\n        if (packageMain) {\n            try {\n                content = require(packageMain);\n            } catch (err) {\n                throw new error.PluginError(err, {\n                    plugin: name\n                });\n            }\n        }\n\n        // Update plugin\n        return plugin.merge({\n            'package': Immutable.fromJS(packageContent),\n            'content': Immutable.fromJS(content || {})\n        });\n    })\n\n    .then(validatePlugin);\n\n    p = timing.measure('plugin.load', p);\n\n    logger.info('loading plugin \"' + name + '\"... ');\n    return logger.info.promise(p);\n}\n\n\nmodule.exports = loadPlugin;\n"]}