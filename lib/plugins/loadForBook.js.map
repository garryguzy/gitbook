{"version":3,"sources":["../../src/plugins/loadForBook.js"],"names":["Immutable","require","Promise","listDepsForBook","findForBook","loadPlugin","loadForBook","book","logger","getLogger","requirements","then","installedMap","missing","plugins","reduce","result","dep","name","getName","installed","get","deps","filter","plugin","getParent","toArray","concat","push","List","map","OrderedMap","info","ln","size","length","Error","join","module","exports"],"mappings":";;AAAA,IAAMA,YAAYC,QAAQ,WAAR,CAAlB;;AAEA,IAAMC,UAAUD,QAAQ,kBAAR,CAAhB;AACA,IAAME,kBAAkBF,QAAQ,mBAAR,CAAxB;AACA,IAAMG,cAAcH,QAAQ,eAAR,CAApB;AACA,IAAMI,aAAaJ,QAAQ,cAAR,CAAnB;;AAGA;;;;;;AAMA,SAASK,WAAT,CAAqBC,IAArB,EAA2B;AACvB,QAAMC,SAASD,KAAKE,SAAL,EAAf;;AAEA;AACA,QAAMC,eAAeP,gBAAgBI,IAAhB,CAArB;;AAEA;AACA,WAAOH,YAAYG,IAAZ,EACNI,IADM,CACD,UAACC,YAAD,EAAkB;AACpB,YAAMC,UAAU,EAAhB;AACA,YAAIC,UAAUJ,aAAaK,MAAb,CAAoB,UAACC,MAAD,EAASC,GAAT,EAAiB;AAC/C,gBAAMC,OAAOD,IAAIE,OAAJ,EAAb;AACA,gBAAMC,YAAYR,aAAaS,GAAb,CAAiBH,IAAjB,CAAlB;;AAEA,gBAAIE,SAAJ,EAAe;AACX,oBAAME,OAAOV,aACRW,MADQ,CACD,UAACC,MAAD,EAAY;AAChB,2BAAOA,OAAOC,SAAP,OAAuBP,IAA9B;AACH,iBAHQ,EAIRQ,OAJQ,EAAb;;AAMAV,yBAASA,OAAOW,MAAP,CAAcL,IAAd,CAAT;AACAN,uBAAOY,IAAP,CAAYR,SAAZ;AACH,aATD,MASO;AACHP,wBAAQe,IAAR,CAAaV,IAAb;AACH;;AAED,mBAAOF,MAAP;AACH,SAlBa,EAkBX,EAlBW,CAAd;;AAoBA;AACAF,kBAAUd,UAAU6B,IAAV,CAAef,OAAf,EACLgB,GADK,CACD,UAACN,MAAD,EAAY;AACb,mBAAO,CACHA,OAAOL,OAAP,EADG,EAEHK,MAFG,CAAP;AAIH,SANK,CAAV;AAOAV,kBAAUd,UAAU+B,UAAV,CAAqBjB,OAArB,CAAV;;AAEA;AACAN,eAAOwB,IAAP,CAAYC,EAAZ,CAAerB,aAAasB,IAAb,GAAoB,wBAAnC;AACA,YAAIxB,aAAawB,IAAb,IAAqBtB,aAAasB,IAAtC,EAA4C;AACxC1B,mBAAOwB,IAAP,CAAYC,EAAZ,CAAevB,aAAawB,IAAb,GAAoB,oBAAnC;AACH;;AAED;AACA,YAAIrB,QAAQsB,MAAR,GAAiB,CAArB,EAAwB;AACpB,kBAAM,IAAIC,KAAJ,CAAU,+BAA+BvB,QAAQwB,IAAR,CAAa,IAAb,CAA/B,GAAoD,8DAA9D,CAAN;AACH;;AAED,eAAOnC,QAAQ4B,GAAR,CAAYhB,OAAZ,EAAqB,UAACU,MAAD,EAAY;AACpC,mBAAOnB,WAAWE,IAAX,EAAiBiB,MAAjB,CAAP;AACH,SAFM,CAAP;AAGH,KA/CM,CAAP;AAgDH;;AAGDc,OAAOC,OAAP,GAAiBjC,WAAjB","file":"loadForBook.js","sourcesContent":["const Immutable = require('immutable');\n\nconst Promise = require('../utils/promise');\nconst listDepsForBook = require('./listDepsForBook');\nconst findForBook = require('./findForBook');\nconst loadPlugin = require('./loadPlugin');\n\n\n/**\n * Load all plugins in a book\n *\n * @param {Book}\n * @return {Promise<Map<String:Plugin>}\n */\nfunction loadForBook(book) {\n    const logger = book.getLogger();\n\n    // List the dependencies\n    const requirements = listDepsForBook(book);\n\n    // List all plugins installed in the book\n    return findForBook(book)\n    .then((installedMap) => {\n        const missing = [];\n        let plugins = requirements.reduce((result, dep) => {\n            const name = dep.getName();\n            const installed = installedMap.get(name);\n\n            if (installed) {\n                const deps = installedMap\n                    .filter((plugin) => {\n                        return plugin.getParent() === name;\n                    })\n                    .toArray();\n\n                result = result.concat(deps);\n                result.push(installed);\n            } else {\n                missing.push(name);\n            }\n\n            return result;\n        }, []);\n\n        // Convert plugins list to a map\n        plugins = Immutable.List(plugins)\n            .map((plugin) => {\n                return [\n                    plugin.getName(),\n                    plugin\n                ];\n            });\n        plugins = Immutable.OrderedMap(plugins);\n\n        // Log state\n        logger.info.ln(installedMap.size + ' plugins are installed');\n        if (requirements.size != installedMap.size) {\n            logger.info.ln(requirements.size + ' explicitly listed');\n        }\n\n        // Verify that all plugins are present\n        if (missing.length > 0) {\n            throw new Error('Couldn\\'t locate plugins \"' + missing.join(', ') + '\", Run \\'gitbook install\\' to install plugins from registry.');\n        }\n\n        return Promise.map(plugins, (plugin) => {\n            return loadPlugin(book, plugin);\n        });\n    });\n}\n\n\nmodule.exports = loadForBook;\n"]}