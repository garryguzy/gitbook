{"version":3,"sources":["../../src/plugins/validateConfig.js"],"names":["Immutable","require","jsonschema","jsonSchemaDefaults","Promise","error","mergeDefaults","validatePluginConfig","book","plugin","config","getConfig","packageInfos","getPackage","configKey","getName","join","pluginConfig","getValue","toJS","schema","get","Map","id","type","v","Validator","result","validate","propertyName","errors","length","ConfigurationError","Error","stack","defaults","setValue","set","validateConfig","plugins","reduce","newBook","module","exports"],"mappings":";;AAAA,IAAMA,YAAYC,QAAQ,WAAR,CAAlB;AACA,IAAMC,aAAaD,QAAQ,YAAR,CAAnB;AACA,IAAME,qBAAqBF,QAAQ,sBAAR,CAA3B;;AAEA,IAAMG,UAAUH,QAAQ,kBAAR,CAAhB;AACA,IAAMI,QAAQJ,QAAQ,gBAAR,CAAd;AACA,IAAMK,gBAAgBL,QAAQ,wBAAR,CAAtB;;AAEA;;;;;;;AAOA,SAASM,oBAAT,CAA8BC,IAA9B,EAAoCC,MAApC,EAA4C;AACxC,QAAIC,SAASF,KAAKG,SAAL,EAAb;AACA,QAAMC,eAAeH,OAAOI,UAAP,EAArB;;AAEA,QAAMC,YAAY,CACd,eADc,EAEdL,OAAOM,OAAP,EAFc,EAGhBC,IAHgB,CAGX,GAHW,CAAlB;;AAKA,QAAIC,eAAeP,OAAOQ,QAAP,CAAgBJ,SAAhB,EAA2B,EAA3B,EAA+BK,IAA/B,EAAnB;;AAEA,QAAMC,SAAS,CAACR,aAAaS,GAAb,CAAiB,SAAjB,KAA+BrB,UAAUsB,GAAV,EAAhC,EAAiDH,IAAjD,EAAf;AACA,QAAI,CAACC,MAAL,EAAa,OAAOZ,IAAP;;AAEb;AACAY,WAAOG,EAAP,GAAY,MAAMT,SAAlB;AACAM,WAAOI,IAAP,GAAc,QAAd;;AAEA;AACA,QAAMC,IAAI,IAAIvB,WAAWwB,SAAf,EAAV;AACA,QAAMC,SAASF,EAAEG,QAAF,CAAWX,YAAX,EAAyBG,MAAzB,EAAiC;AAC5CS,sBAAcf;AAD8B,KAAjC,CAAf;;AAIA;AACA,QAAIa,OAAOG,MAAP,CAAcC,MAAd,GAAuB,CAA3B,EAA8B;AAC1B,cAAM,IAAI1B,MAAM2B,kBAAV,CAA6B,IAAIC,KAAJ,CAAUN,OAAOG,MAAP,CAAc,CAAd,EAAiBI,KAA3B,CAA7B,CAAN;AACH;;AAED;AACA,QAAMC,WAAWhC,mBAAmBiB,MAAnB,CAAjB;AACAH,mBAAeX,cAAcW,YAAd,EAA4BkB,QAA5B,CAAf;;AAGA;AACAzB,aAASA,OAAO0B,QAAP,CAAgBtB,SAAhB,EAA2BG,YAA3B,CAAT;;AAEA;AACA,WAAOT,KAAK6B,GAAL,CAAS,QAAT,EAAmB3B,MAAnB,CAAP;AACH;;AAED;;;;;;;;AAQA,SAAS4B,cAAT,CAAwB9B,IAAxB,EAA8B+B,OAA9B,EAAuC;AACnC,WAAOnC,QAAQoC,MAAR,CAAeD,OAAf,EAAwB,UAACE,OAAD,EAAUhC,MAAV,EAAqB;AAChD,eAAOF,qBAAqBkC,OAArB,EAA8BhC,MAA9B,CAAP;AACH,KAFM,EAEJD,IAFI,CAAP;AAGH;;AAEDkC,OAAOC,OAAP,GAAiBL,cAAjB","file":"validateConfig.js","sourcesContent":["const Immutable = require('immutable');\nconst jsonschema = require('jsonschema');\nconst jsonSchemaDefaults = require('json-schema-defaults');\n\nconst Promise = require('../utils/promise');\nconst error = require('../utils/error');\nconst mergeDefaults = require('../utils/mergeDefaults');\n\n/**\n * Validate one plugin for a book and update book's confiration\n *\n * @param {Book}\n * @param {Plugin}\n * @return {Book}\n */\nfunction validatePluginConfig(book, plugin) {\n    let config = book.getConfig();\n    const packageInfos = plugin.getPackage();\n\n    const configKey = [\n        'pluginsConfig',\n        plugin.getName()\n    ].join('.');\n\n    let pluginConfig = config.getValue(configKey, {}).toJS();\n\n    const schema = (packageInfos.get('gitbook') || Immutable.Map()).toJS();\n    if (!schema) return book;\n\n    // Normalize schema\n    schema.id = '/' + configKey;\n    schema.type = 'object';\n\n    // Validate and throw if invalid\n    const v = new jsonschema.Validator();\n    const result = v.validate(pluginConfig, schema, {\n        propertyName: configKey\n    });\n\n    // Throw error\n    if (result.errors.length > 0) {\n        throw new error.ConfigurationError(new Error(result.errors[0].stack));\n    }\n\n    // Insert default values\n    const defaults = jsonSchemaDefaults(schema);\n    pluginConfig = mergeDefaults(pluginConfig, defaults);\n\n\n    // Update configuration\n    config = config.setValue(configKey, pluginConfig);\n\n    // Return new book\n    return book.set('config', config);\n}\n\n/**\n * Validate a book configuration for plugins and\n * returns an update configuration with default values.\n *\n * @param {Book}\n * @param {OrderedMap<String:Plugin>}\n * @return {Promise<Book>}\n */\nfunction validateConfig(book, plugins) {\n    return Promise.reduce(plugins, (newBook, plugin) => {\n        return validatePluginConfig(newBook, plugin);\n    }, book);\n}\n\nmodule.exports = validateConfig;\n"]}