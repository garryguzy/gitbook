{"version":3,"sources":["../../src/plugins/resolveVersion.js"],"names":["npm","require","semver","Map","Promise","Plugin","gitbook","npmIsReady","initNPM","nfcall","load","silent","loglevel","resolveVersion","plugin","npmId","nameToNpmID","getName","requiredVersion","getVersion","isGitDependency","resolve","then","commands","view","versions","entrySeq","result","map","entry","version","engines","filter","v","satisfies","sort","v1","v2","lt","get","undefined","module","exports"],"mappings":";;AAAA,IAAMA,MAAMC,QAAQ,KAAR,CAAZ;AACA,IAAMC,SAASD,QAAQ,QAAR,CAAf;;eACgBA,QAAQ,WAAR,C;IAARE,G,YAAAA,G;;AAER,IAAMC,UAAUH,QAAQ,kBAAR,CAAhB;AACA,IAAMI,SAASJ,QAAQ,kBAAR,CAAf;AACA,IAAMK,UAAUL,QAAQ,YAAR,CAAhB;;AAEA,IAAIM,mBAAJ;;AAEA;;;;AAIA,SAASC,OAAT,GAAmB;AACf,QAAID,UAAJ,EAAgB,OAAOA,UAAP;;AAEhBA,iBAAaH,QAAQK,MAAR,CAAeT,IAAIU,IAAnB,EAAyB;AAClCC,gBAAQ,IAD0B;AAElCC,kBAAU;AAFwB,KAAzB,CAAb;;AAKA,WAAOL,UAAP;AACH;;AAED;;;;;;AAMA,SAASM,cAAT,CAAwBC,MAAxB,EAAgC;AAC5B,QAAMC,QAAQV,OAAOW,WAAP,CAAmBF,OAAOG,OAAP,EAAnB,CAAd;AACA,QAAMC,kBAAkBJ,OAAOK,UAAP,EAAxB;;AAEA,QAAIL,OAAOM,eAAP,EAAJ,EAA8B;AAC1B,eAAOhB,QAAQiB,OAAR,CAAgBH,eAAhB,CAAP;AACH;;AAED,WAAOV,UACNc,IADM,CACD,YAAM;AACR,eAAOlB,QAAQK,MAAR,CAAeT,IAAIuB,QAAJ,CAAaC,IAA5B,EAAkC,CAACT,QAAQ,GAAR,GAAcG,eAAf,EAAgC,SAAhC,CAAlC,EAA8E,IAA9E,CAAP;AACH,KAHM,EAINI,IAJM,CAID,UAACG,QAAD,EAAc;AAChBA,mBAAWtB,IAAIsB,QAAJ,EAAcC,QAAd,EAAX;;AAEA,YAAMC,SAASF,SACVG,GADU,CACN,UAACC,KAAD,EAAW;AACZ,mBAAO;AACHC,yBAASD,MAAM,CAAN,CADN;AAEHvB,yBAAS,CAACuB,MAAM,CAAN,EAASE,OAAT,IAAoB,EAArB,EAAyBzB;AAF/B,aAAP;AAIH,SANU,EAOV0B,MAPU,CAOH,UAACC,CAAD,EAAO;AACX,mBAAOA,EAAE3B,OAAF,IAAaA,QAAQ4B,SAAR,CAAkBD,EAAE3B,OAApB,CAApB;AACH,SATU,EAUV6B,IAVU,CAUL,UAACC,EAAD,EAAKC,EAAL,EAAY;AACd,mBAAOnC,OAAOoC,EAAP,CAAUF,GAAGN,OAAb,EAAsBO,GAAGP,OAAzB,IAAoC,CAApC,GAAwC,CAAC,CAAhD;AACH,SAZU,EAaVS,GAbU,CAaN,CAbM,CAAf;;AAeA,YAAI,CAACZ,MAAL,EAAa;AACT,mBAAOa,SAAP;AACH,SAFD,MAEO;AACH,mBAAOb,OAAOG,OAAd;AACH;AACJ,KA3BM,CAAP;AA4BH;;AAEDW,OAAOC,OAAP,GAAiB7B,cAAjB","file":"resolveVersion.js","sourcesContent":["const npm = require('npm');\nconst semver = require('semver');\nconst { Map } = require('immutable');\n\nconst Promise = require('../utils/promise');\nconst Plugin = require('../models/plugin');\nconst gitbook = require('../gitbook');\n\nlet npmIsReady;\n\n/**\n * Initialize and prepare NPM\n * @return {Promise}\n */\nfunction initNPM() {\n    if (npmIsReady) return npmIsReady;\n\n    npmIsReady = Promise.nfcall(npm.load, {\n        silent: true,\n        loglevel: 'silent'\n    });\n\n    return npmIsReady;\n}\n\n/**\n * Resolve a plugin dependency to a version\n *\n * @param {PluginDependency} plugin\n * @return {Promise<String>}\n */\nfunction resolveVersion(plugin) {\n    const npmId = Plugin.nameToNpmID(plugin.getName());\n    const requiredVersion = plugin.getVersion();\n\n    if (plugin.isGitDependency()) {\n        return Promise.resolve(requiredVersion);\n    }\n\n    return initNPM()\n    .then(() => {\n        return Promise.nfcall(npm.commands.view, [npmId + '@' + requiredVersion, 'engines'], true);\n    })\n    .then((versions) => {\n        versions = Map(versions).entrySeq();\n\n        const result = versions\n            .map((entry) => {\n                return {\n                    version: entry[0],\n                    gitbook: (entry[1].engines || {}).gitbook\n                };\n            })\n            .filter((v) => {\n                return v.gitbook && gitbook.satisfies(v.gitbook);\n            })\n            .sort((v1, v2) => {\n                return semver.lt(v1.version, v2.version) ? 1 : -1;\n            })\n            .get(0);\n\n        if (!result) {\n            return undefined;\n        } else {\n            return result.version;\n        }\n    });\n}\n\nmodule.exports = resolveVersion;\n"]}