{"version":3,"sources":["../../src/plugins/findInstalled.js"],"names":["require","OrderedMap","path","Promise","fs","Plugin","PREFIX","validateId","name","indexOf","readModule","modulePath","depth","parent","pkg","join","pluginName","slice","length","version","findInstalled","folder","node_modules","readdir","fail","then","modules","reduce","results","moduleName","moduleFolder","plugin","set","getName","innerModules","merge","module","exports"],"mappings":";;eAAuBA,QAAQ,WAAR,C;IAAfC,U,YAAAA,U;;AACR,IAAMC,OAAOF,QAAQ,MAAR,CAAb;;AAEA,IAAMG,UAAUH,QAAQ,kBAAR,CAAhB;AACA,IAAMI,KAAKJ,QAAQ,aAAR,CAAX;AACA,IAAMK,SAASL,QAAQ,kBAAR,CAAf;AACA,IAAMM,SAASN,QAAQ,2BAAR,CAAf;;AAEA;;;;;AAKA,SAASO,UAAT,CAAoBC,IAApB,EAA0B;AACtB,WAAOA,QAAQA,KAAKC,OAAL,CAAaH,MAAb,MAAyB,CAAxC;AACH;;AAED;;;;;;;AAOA,SAASI,UAAT,CAAoBC,UAApB,EAAgCC,KAAhC,EAAuCC,MAAvC,EAA+C;AAC3C,QAAMC,MAAMd,QAAQE,KAAKa,IAAL,CAAUJ,UAAV,EAAsB,cAAtB,CAAR,CAAZ;AACA,QAAMK,aAAaF,IAAIN,IAAJ,CAASS,KAAT,CAAeX,OAAOY,MAAtB,CAAnB;;AAEA,WAAO,IAAIb,MAAJ,CAAW;AACdG,cAAMQ,UADQ;AAEdG,iBAASL,IAAIK,OAFC;AAGdjB,cAAMS,UAHQ;AAIdC,oBAJc;AAKdC;AALc,KAAX,CAAP;AAOH;;AAED;;;;;;;;AAQA,SAASO,aAAT,CAAuBC,MAAvB,EAAyD;AAAA,QAA1BT,KAA0B,uEAAlB,CAAkB;AAAA,QAAfC,MAAe,uEAAN,IAAM;;AACrD;AACA,QAAI,CAACQ,MAAL,EAAa;AACT,eAAOlB,QAAQF,YAAR,CAAP;AACH;;AAED;AACA,QAAMqB,eAAepB,KAAKa,IAAL,CAAUM,MAAV,EAAkB,cAAlB,CAArB;;AAEA;AACA,WAAOjB,GAAGmB,OAAH,CAAWD,YAAX,EACNE,IADM,CACD,YAAM;AACR,eAAOrB,QAAQ,EAAR,CAAP;AACH,KAHM,EAINsB,IAJM,CAID,UAACC,OAAD,EAAa;AACf,eAAOvB,QAAQwB,MAAR,CAAeD,OAAf,EAAwB,UAACE,OAAD,EAAUC,UAAV,EAAyB;AACpD;AACA,gBAAI,CAACtB,WAAWsB,UAAX,CAAL,EAA6B;AACzB,uBAAOD,OAAP;AACH;;AAED;AACA,gBAAME,eAAe5B,KAAKa,IAAL,CAAUO,YAAV,EAAwBO,UAAxB,CAArB;AACA,gBAAME,SAASrB,WAAWoB,YAAX,EAAyBlB,KAAzB,EAAgCC,MAAhC,CAAf;;AAEAe,sBAAUA,QAAQI,GAAR,CAAYD,OAAOE,OAAP,EAAZ,EAA8BF,MAA9B,CAAV;;AAEA,mBAAOX,cAAcU,YAAd,EAA4BlB,QAAQ,CAApC,EAAuCmB,OAAOE,OAAP,EAAvC,EACNR,IADM,CACD,UAACS,YAAD,EAAkB;AACpB,uBAAON,QAAQO,KAAR,CAAcD,YAAd,CAAP;AACH,aAHM,CAAP;AAIH,SAhBM,EAgBJjC,YAhBI,CAAP;AAiBH,KAtBM,CAAP;AAuBH;;AAEDmC,OAAOC,OAAP,GAAiBjB,aAAjB","file":"findInstalled.js","sourcesContent":["const { OrderedMap } = require('immutable');\nconst path = require('path');\n\nconst Promise = require('../utils/promise');\nconst fs = require('../utils/fs');\nconst Plugin = require('../models/plugin');\nconst PREFIX = require('../constants/pluginPrefix');\n\n/**\n * Validate if a package name is a GitBook plugin\n *\n * @return {Boolean}\n */\nfunction validateId(name) {\n    return name && name.indexOf(PREFIX) === 0;\n}\n\n/**\n * Read details about a node module.\n * @param {String} modulePath\n * @param {Number} depth\n * @param {String} parent\n * @return {Plugin} plugin\n */\nfunction readModule(modulePath, depth, parent) {\n    const pkg = require(path.join(modulePath, 'package.json'));\n    const pluginName = pkg.name.slice(PREFIX.length);\n\n    return new Plugin({\n        name: pluginName,\n        version: pkg.version,\n        path: modulePath,\n        depth,\n        parent\n    });\n}\n\n/**\n * List all packages installed inside a folder\n *\n * @param {String} folder\n * @param {Number} depth\n * @param {String} parent\n * @return {Promise<OrderedMap<String:Plugin>>} plugins\n */\nfunction findInstalled(folder, depth = 0, parent = null) {\n    // When tetsing with mock-fs\n    if (!folder) {\n        return Promise(OrderedMap());\n    }\n\n    // Search for gitbook-plugins in node_modules folder\n    const node_modules = path.join(folder, 'node_modules');\n\n    // List all folders in node_modules\n    return fs.readdir(node_modules)\n    .fail(() => {\n        return Promise([]);\n    })\n    .then((modules) => {\n        return Promise.reduce(modules, (results, moduleName) => {\n            // Not a gitbook-plugin\n            if (!validateId(moduleName)) {\n                return results;\n            }\n\n            // Read gitbook-plugin package details\n            const moduleFolder = path.join(node_modules, moduleName);\n            const plugin = readModule(moduleFolder, depth, parent);\n\n            results = results.set(plugin.getName(), plugin);\n\n            return findInstalled(moduleFolder, depth + 1, plugin.getName())\n            .then((innerModules) => {\n                return results.merge(innerModules);\n            });\n        }, OrderedMap());\n    });\n}\n\nmodule.exports = findInstalled;\n"]}