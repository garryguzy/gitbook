{"version":3,"sources":["../../src/plugins/installPlugin.js"],"names":["resolve","require","exec","resolveVersion","installPlugin","book","plugin","logger","getLogger","installFolder","getRoot","name","getName","requirement","getVersion","info","ln","installerBin","sync","then","version","Error","npmID","getNpmID","command","cwd","ok","module","exports"],"mappings":";;AAAA,IAAMA,UAAUC,QAAQ,SAAR,CAAhB;;eAEiBA,QAAQ,kBAAR,C;IAATC,I,YAAAA,I;;AACR,IAAMC,iBAAiBF,QAAQ,kBAAR,CAAvB;;AAEA;;;;;;;AAOA,SAASG,aAAT,CAAuBC,IAAvB,EAA6BC,MAA7B,EAAqC;AACjC,QAAMC,SAASF,KAAKG,SAAL,EAAf;;AAEA,QAAMC,gBAAgBJ,KAAKK,OAAL,EAAtB;AACA,QAAMC,OAAOL,OAAOM,OAAP,EAAb;AACA,QAAMC,cAAcP,OAAOQ,UAAP,EAApB;;AAEAP,WAAOQ,IAAP,CAAYC,EAAZ,CAAe,EAAf;AACAT,WAAOQ,IAAP,CAAYC,EAAZ,CAAe,wBAAwBL,IAAxB,GAA+B,GAA9C;;AAEA,QAAMM,eAAejB,QAAQkB,IAAR,CAAa,gBAAb,CAArB;;AAEA;AACA,WAAOf,eAAeG,MAAf,EACNa,IADM,CACD,UAACC,OAAD,EAAa;AACf,YAAI,CAACA,OAAL,EAAc;AACV,kBAAM,IAAIC,KAAJ,CAAU,+CAA+CV,IAA/C,GAAsD,sBAAtD,GAA+EE,WAA/E,GAA6F,GAAvG,CAAN;AACH;;AAEDN,eAAOQ,IAAP,CAAYC,EAAZ,CAAe,qBAAqBL,IAArB,GAA4B,KAA5B,GAAoCE,WAApC,GAAkD,gBAAjE,EAAmFO,OAAnF;;AAEA,YAAME,QAAQhB,OAAOiB,QAAP,EAAd;AACA,YAAMC,UAAaP,YAAb,iBAAqCK,KAArC,SAA8CF,OAApD;;AAEA,eAAOlB,KAAKsB,OAAL,EAAc,EAAEC,KAAKhB,aAAP,EAAd,CAAP;AACH,KAZM,EAaNU,IAbM,CAaD,YAAM;AACRZ,eAAOQ,IAAP,CAAYW,EAAZ,CAAe,aAAaf,IAAb,GAAoB,0BAAnC;AACH,KAfM,CAAP;AAgBH;;AAEDgB,OAAOC,OAAP,GAAiBxB,aAAjB","file":"installPlugin.js","sourcesContent":["const resolve = require('resolve');\n\nconst { exec } = require('../utils/command');\nconst resolveVersion = require('./resolveVersion');\n\n/**\n * Install a plugin for a book\n *\n * @param {Book} book\n * @param {PluginDependency} plugin\n * @return {Promise}\n */\nfunction installPlugin(book, plugin) {\n    const logger = book.getLogger();\n\n    const installFolder = book.getRoot();\n    const name = plugin.getName();\n    const requirement = plugin.getVersion();\n\n    logger.info.ln('');\n    logger.info.ln('installing plugin \"' + name + '\"');\n\n    const installerBin = resolve.sync('ied/lib/cmd.js');\n\n    // Find a version to install\n    return resolveVersion(plugin)\n    .then((version) => {\n        if (!version) {\n            throw new Error('Found no satisfactory version for plugin \"' + name + '\" with requirement \"' + requirement + '\"');\n        }\n\n        logger.info.ln('install plugin \"' + name + '\" (' + requirement + ') with version', version);\n\n        const npmID = plugin.getNpmID();\n        const command = `${installerBin} install ${npmID}@${version}`;\n\n        return exec(command, { cwd: installFolder });\n    })\n    .then(() => {\n        logger.info.ok('plugin \"' + name + '\" installed with success');\n    });\n}\n\nmodule.exports = installPlugin;\n"]}