{"version":3,"sources":["../../src/plugins/installPlugins.js"],"names":["DEFAULT_PLUGINS","require","Promise","installPlugin","installPlugins","book","logger","getLogger","config","getConfig","plugins","getPluginDependencies","filterNot","plugin","dependency","find","dep","getName","isEnabled","getVersion","size","info","ln","forEach","thenResolve","module","exports"],"mappings":";;AAAA,IAAMA,kBAAkBC,QAAQ,6BAAR,CAAxB;AACA,IAAMC,UAAUD,QAAQ,kBAAR,CAAhB;AACA,IAAME,gBAAgBF,QAAQ,iBAAR,CAAtB;;AAEA;;;;;;AAMA,SAASG,cAAT,CAAwBC,IAAxB,EAA8B;AAC1B,QAAMC,SAASD,KAAKE,SAAL,EAAf;AACA,QAAMC,SAASH,KAAKI,SAAL,EAAf;AACA,QAAIC,UAAUF,OAAOG,qBAAP,EAAd;;AAEA;AACA;AACAD,cAAUA,QAAQE,SAAR,CAAkB,UAACC,MAAD,EAAY;AACpC,YAAMC,aAAad,gBAAgBe,IAAhB,CAAqB,UAACC,GAAD,EAAS;AAC7C,mBAAOA,IAAIC,OAAJ,OAAkBJ,OAAOI,OAAP,EAAzB;AACH,SAFkB,CAAnB;;AAIA;AACI;AACA,aAACJ,OAAOK,SAAP,EAAD;;AAEA;AACCJ,0BACDD,OAAOM,UAAP,OAAwBL,WAAWK,UAAX;AAN5B;AAQH,KAbS,CAAV;;AAeA,QAAIT,QAAQU,IAAR,IAAgB,CAApB,EAAuB;AACnBd,eAAOe,IAAP,CAAYC,EAAZ,CAAe,qBAAf;AACA,eAAOpB,QAAQ,CAAR,CAAP;AACH;;AAEDI,WAAOe,IAAP,CAAYC,EAAZ,CAAe,YAAf,EAA6BZ,QAAQU,IAArC,EAA2C,uBAA3C;;AAEA,WAAOlB,QAAQqB,OAAR,CAAgBb,OAAhB,EAAyB,UAACG,MAAD,EAAY;AACxC,eAAOV,cAAcE,IAAd,EAAoBQ,MAApB,CAAP;AACH,KAFM,EAGNW,WAHM,CAGMd,QAAQU,IAHd,CAAP;AAIH;;AAEDK,OAAOC,OAAP,GAAiBtB,cAAjB","file":"installPlugins.js","sourcesContent":["const DEFAULT_PLUGINS = require('../constants/defaultPlugins');\nconst Promise = require('../utils/promise');\nconst installPlugin = require('./installPlugin');\n\n/**\n * Install plugin requirements for a book\n *\n * @param {Book} book\n * @return {Promise<Number>} count\n */\nfunction installPlugins(book) {\n    const logger = book.getLogger();\n    const config = book.getConfig();\n    let plugins = config.getPluginDependencies();\n\n    // Remove default plugins\n    // (only if version is same as installed)\n    plugins = plugins.filterNot((plugin) => {\n        const dependency = DEFAULT_PLUGINS.find((dep) => {\n            return dep.getName() === plugin.getName();\n        });\n\n        return (\n            // Disabled plugin\n            !plugin.isEnabled() ||\n\n            // Or default one installed in GitBook itself\n            (dependency &&\n            plugin.getVersion() === dependency.getVersion())\n        );\n    });\n\n    if (plugins.size == 0) {\n        logger.info.ln('nothing to install!');\n        return Promise(0);\n    }\n\n    logger.info.ln('installing', plugins.size, 'plugins from registry');\n\n    return Promise.forEach(plugins, (plugin) => {\n        return installPlugin(book, plugin);\n    })\n    .thenResolve(plugins.size);\n}\n\nmodule.exports = installPlugins;\n"]}