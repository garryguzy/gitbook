{"version":3,"sources":["../../src/api/encodeGlobal.js"],"names":["path","require","Promise","PathUtils","fs","Plugins","deprecate","defaultBlocks","gitbook","parsers","encodeConfig","encodeSummary","encodeNavigation","encodePage","encodeGlobal","output","book","getBook","bookFS","getContentFS","logger","getLogger","outputFolder","getRoot","plugins","getPlugins","blocks","listBlocks","urls","getURLIndex","result","log","config","getConfig","summary","getSummary","root","contentRoot","getContentRoot","isMultilingual","isLanguageBook","readFile","fileName","read","readFileAsString","readAsString","resolve","getPageByPath","filePath","page","getPage","undefined","renderBlock","type","text","parser","get","parsePage","renderInline","parseInline","template","applyBlock","name","blockData","block","getGenerator","toURL","resolveToURL","hasFile","content","then","resolveInRoot","exists","writeFile","ensureFile","copyFile","inputFile","outputFile","outputFilePath","copy","version","renamedMethod","field","values","module","exports"],"mappings":"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","file":"encodeGlobal.js","sourcesContent":["const path = require('path');\nconst Promise = require('../utils/promise');\nconst PathUtils = require('../utils/path');\nconst fs = require('../utils/fs');\n\nconst Plugins = require('../plugins');\nconst deprecate = require('./deprecate');\nconst defaultBlocks = require('../constants/defaultBlocks');\nconst gitbook = require('../gitbook');\nconst parsers = require('../parsers');\n\nconst encodeConfig = require('./encodeConfig');\nconst encodeSummary = require('./encodeSummary');\nconst encodeNavigation = require('./encodeNavigation');\nconst encodePage = require('./encodePage');\n\n/**\n * Encode a global context into a JS object\n * It's the context for page's hook, etc\n *\n * @param {Output} output\n * @return {Object}\n */\nfunction encodeGlobal(output) {\n    const book = output.getBook();\n    const bookFS = book.getContentFS();\n    const logger = output.getLogger();\n    const outputFolder = output.getRoot();\n    const plugins = output.getPlugins();\n    const blocks = Plugins.listBlocks(plugins);\n    const urls = output.getURLIndex();\n\n    const result = {\n        log: logger,\n        config: encodeConfig(output, book.getConfig()),\n        summary: encodeSummary(output, book.getSummary()),\n\n        /**\n         * Return absolute path to the root folder of the book\n         * @return {String}\n         */\n        root() {\n            return book.getRoot();\n        },\n\n        /**\n         * Return absolute path to the root folder of the book (for content)\n         * @return {String}\n         */\n        contentRoot() {\n            return book.getContentRoot();\n        },\n\n        /**\n         * Check if the book is a multilingual book.\n         * @return {Boolean}\n         */\n        isMultilingual() {\n            return book.isMultilingual();\n        },\n\n        /**\n         * Check if the book is a language book for a multilingual book.\n         * @return {Boolean}\n         */\n        isLanguageBook() {\n            return book.isLanguageBook();\n        },\n\n        /**\n         * Read a file from the book.\n         * @param {String} fileName\n         * @return {Promise<Buffer>}\n         */\n        readFile(fileName) {\n            return bookFS.read(fileName);\n        },\n\n        /**\n         * Read a file from the book as a string.\n         * @param {String} fileName\n         * @return {Promise<String>}\n         */\n        readFileAsString(fileName) {\n            return bookFS.readAsString(fileName);\n        },\n\n        /**\n         * Resolve a file from the book root.\n         * @param {String} fileName\n         * @return {String}\n        */\n        resolve(fileName) {\n            return path.resolve(book.getContentRoot(), fileName);\n        },\n\n        /**\n         * Resolve a page by it path.\n         * @param {String} filePath\n         * @return {String}\n         */\n        getPageByPath(filePath) {\n            const page = output.getPage(filePath);\n            if (!page) return undefined;\n\n            return encodePage(output, page);\n        },\n\n        /**\n         * Render a block of text (markdown/asciidoc).\n         * @param {String} type\n         * @param {String} text\n         * @return {Promise<String>}\n         */\n        renderBlock(type, text) {\n            const parser = parsers.get(type);\n\n            return parser.parsePage(text)\n                .get('content');\n        },\n\n        /**\n         * Render an inline text (markdown/asciidoc).\n         * @param {String} type\n         * @param {String} text\n         * @return {Promise<String>}\n         */\n        renderInline(type, text) {\n            const parser = parsers.get(type);\n\n            return parser.parseInline(text)\n                .get('content');\n        },\n\n        template: {\n\n            /**\n             * Apply a templating block and returns its result.\n             * @param {String} name\n             * @param {Object} blockData\n             * @return {Promise|Object}\n             */\n            applyBlock(name, blockData) {\n                const block = blocks.get(name) || defaultBlocks.get(name);\n                return Promise(block.applyBlock(blockData, result));\n            }\n        },\n\n        output: {\n\n            /**\n             * Name of the generator being used\n             * {String}\n             */\n            name: output.getGenerator(),\n\n            /**\n             * Return absolute path to the root folder of output\n             * @return {String}\n             */\n            root() {\n                return outputFolder;\n            },\n\n            /**\n             * Resolve a file from the output root.\n             * @param {String} fileName\n             * @return {String}\n             */\n            resolve(fileName) {\n                return path.resolve(outputFolder, fileName);\n            },\n\n            /**\n             * Convert a filepath into an url\n             * @return {String}\n             */\n            toURL(filePath) {\n                return urls.resolveToURL(filePath);\n            },\n\n            /**\n             * Check that a file exists.\n             * @param {String} fileName\n             * @return {Promise}\n             */\n            hasFile(fileName, content) {\n                return Promise()\n                .then(() => {\n                    const filePath = PathUtils.resolveInRoot(outputFolder, fileName);\n\n                    return fs.exists(filePath);\n                });\n            },\n\n            /**\n             * Write a file to the output folder,\n             * It creates the required folder\n             *\n             * @param {String} fileName\n             * @param {Buffer} content\n             * @return {Promise}\n             */\n            writeFile(fileName, content) {\n                return Promise()\n                .then(() => {\n                    const filePath = PathUtils.resolveInRoot(outputFolder, fileName);\n\n                    return fs.ensureFile(filePath)\n                    .then(() => {\n                        return fs.writeFile(filePath, content);\n                    });\n                });\n            },\n\n            /**\n             * Copy a file to the output folder\n             * It creates the required folder.\n             *\n             * @param {String} inputFile\n             * @param {String} outputFile\n             * @param {Buffer} content\n             * @return {Promise}\n             */\n            copyFile(inputFile, outputFile, content) {\n                return Promise()\n                .then(() => {\n                    const outputFilePath = PathUtils.resolveInRoot(outputFolder, outputFile);\n\n                    return fs.ensureFile(outputFilePath)\n                    .then(() => {\n                        return fs.copy(inputFile, outputFilePath);\n                    });\n                });\n            }\n        },\n\n        gitbook: {\n            version: gitbook.version\n        }\n    };\n\n    // Deprecated properties\n\n    deprecate.renamedMethod(output, 'this.isSubBook', result, 'isSubBook', 'isLanguageBook');\n    deprecate.renamedMethod(output, 'this.contentLink', result, 'contentLink', 'output.toURL');\n\n    deprecate.field(output, 'this.generator', result, 'generator',\n        output.getGenerator(), '\"this.generator\" property is deprecated, use \"this.output.name\" instead');\n\n    deprecate.field(output, 'this.navigation', result, 'navigation', () => {\n        return encodeNavigation(output);\n    }, '\"navigation\" property is deprecated');\n\n    deprecate.field(output, 'this.book', result, 'book',\n        result, '\"book\" property is deprecated, use \"this\" directly instead');\n\n    deprecate.field(output, 'this.options', result, 'options',\n        result.config.values, '\"options\" property is deprecated, use config.get(key) instead');\n\n    return result;\n}\n\nmodule.exports = encodeGlobal;\n"]}