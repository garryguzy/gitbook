{"version":3,"sources":["../../src/api/encodeProgress.js"],"names":["Immutable","require","encodeNavigation","encodeProgress","output","page","current","getPath","navigation","Map","n","size","percent","prevPercent","currentChapter","done","chapters","map","nav","chapterPath","path","valueSeq","sortBy","index","i","Math","max","toJS","module","exports"],"mappings":";;AAAA,IAAMA,YAAYC,QAAQ,WAAR,CAAlB;AACA,IAAMC,mBAAmBD,QAAQ,oBAAR,CAAzB;;AAEA;;;;;;;AAOA,SAASE,cAAT,CAAwBC,MAAxB,EAAgCC,IAAhC,EAAsC;AAClC,QAAMC,UAAUD,KAAKE,OAAL,EAAhB;AACA,QAAIC,aAAaN,iBAAiBE,MAAjB,CAAjB;AACAI,iBAAaR,UAAUS,GAAV,CAAcD,UAAd,CAAb;;AAEA,QAAME,IAAIF,WAAWG,IAArB;AACA,QAAIC,UAAU,CAAd;AAAA,QAAiBC,cAAc,CAA/B;AAAA,QAAkCC,iBAAiB,IAAnD;AACA,QAAIC,OAAO,IAAX;;AAEA,QAAMC,WAAWR,WACZS,GADY,CACR,UAACC,GAAD,EAAMC,WAAN,EAAsB;AACvBD,YAAIE,IAAJ,GAAWD,WAAX;AACA,eAAOD,GAAP;AACH,KAJY,EAKZG,QALY,GAMZC,MANY,CAML,UAACJ,GAAD,EAAS;AACb,eAAOA,IAAIK,KAAX;AACH,KARY,EASZN,GATY,CASR,UAACC,GAAD,EAAMM,CAAN,EAAY;AACb;AACAN,YAAIN,OAAJ,GAAeY,IAAI,GAAL,GAAYC,KAAKC,GAAL,CAAUhB,IAAI,CAAd,EAAkB,CAAlB,CAA1B;;AAEA;AACAQ,YAAIH,IAAJ,GAAWA,IAAX;AACA,YAAIG,IAAIE,IAAJ,IAAYd,OAAhB,EAAyB;AACrBQ,6BAAiBI,GAAjB;AACAN,sBAAUM,IAAIN,OAAd;AACAG,mBAAO,KAAP;AACH,SAJD,MAIO,IAAIA,IAAJ,EAAU;AACbF,0BAAcK,IAAIN,OAAlB;AACH;;AAED,eAAOM,GAAP;AACH,KAxBY,EAyBZS,IAzBY,EAAjB;;AA2BA,WAAO;AACH;AACAd,gCAFG;;AAIH;AACAD,wBALG;;AAOH;AACAI,0BARG;;AAUH;AACAV,iBAASQ;AAXN,KAAP;AAaH;;AAEDc,OAAOC,OAAP,GAAiB1B,cAAjB","file":"encodeProgress.js","sourcesContent":["const Immutable = require('immutable');\nconst encodeNavigation = require('./encodeNavigation');\n\n/**\n    page.progress is a deprecated property from GitBook v2\n\n    @param {Output}\n    @param {Page}\n    @return {Object}\n*/\nfunction encodeProgress(output, page) {\n    const current = page.getPath();\n    let navigation = encodeNavigation(output);\n    navigation = Immutable.Map(navigation);\n\n    const n = navigation.size;\n    let percent = 0, prevPercent = 0, currentChapter = null;\n    let done = true;\n\n    const chapters = navigation\n        .map((nav, chapterPath) => {\n            nav.path = chapterPath;\n            return nav;\n        })\n        .valueSeq()\n        .sortBy((nav) => {\n            return nav.index;\n        })\n        .map((nav, i) => {\n            // Calcul percent\n            nav.percent = (i * 100) / Math.max((n - 1), 1);\n\n            // Is it done\n            nav.done = done;\n            if (nav.path == current) {\n                currentChapter = nav;\n                percent = nav.percent;\n                done = false;\n            } else if (done) {\n                prevPercent = nav.percent;\n            }\n\n            return nav;\n        })\n        .toJS();\n\n    return {\n        // Previous percent\n        prevPercent,\n\n        // Current percent\n        percent,\n\n        // List of chapter with progress\n        chapters,\n\n        // Current chapter\n        current: currentChapter\n    };\n}\n\nmodule.exports = encodeProgress;\n\n"]}