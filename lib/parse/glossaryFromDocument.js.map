{"version":3,"sources":["../../src/parse/glossaryFromDocument.js"],"names":["require","BLOCKS","Glossary","isTitle","node","type","HEADING_2","isDescription","CODE","glossaryFromDocument","document","nodes","entries","forEach","block","i","next","get","push","name","text","description","createFromEntries","module","exports"],"mappings":";;eAAmBA,QAAQ,WAAR,C;IAAXC,M,YAAAA,M;;AACR,IAAMC,WAAWF,QAAQ,oBAAR,CAAjB;;AAEA;;;;;AAKA,IAAMG,UAAU,SAAVA,OAAU;AAAA,WAAQC,KAAKC,IAAL,IAAaJ,OAAOK,SAA5B;AAAA,CAAhB;;AAEA;;;;;AAKA,IAAMC,gBAAgB,SAAhBA,aAAgB;AAAA,WAAQH,KAAKC,IAAL,KAAcJ,OAAOK,SAArB,IAAkCF,KAAKC,IAAL,KAAcJ,OAAOO,IAA/D;AAAA,CAAtB;;AAEA;;;;;AAKA,SAASC,oBAAT,CAA8BC,QAA9B,EAAwC;AAAA,QAC5BC,KAD4B,GAClBD,QADkB,CAC5BC,KAD4B;;AAEpC,QAAMC,UAAU,EAAhB;;AAEAD,UAAME,OAAN,CAAc,UAACC,KAAD,EAAQC,CAAR,EAAc;AACxB,YAAMC,OAAOL,MAAMM,GAAN,CAAUF,CAAV,CAAb;;AAEA,YAAIZ,QAAQW,KAAR,CAAJ,EAAoB;AAChBF,oBAAQM,IAAR,CAAa;AACTC,sBAAaL,MAAMM,IADV;AAETC,6BAAcL,QAAQT,cAAcS,IAAd,CAAT,GAAgCA,KAAKI,IAArC,GAA4C;AAFhD,aAAb;AAIH;AACJ,KATD;;AAYA,WAAOlB,SAASoB,iBAAT,CAA2BV,OAA3B,CAAP;AACH;;AAEDW,OAAOC,OAAP,GAAiBf,oBAAjB","file":"glossaryFromDocument.js","sourcesContent":["const { BLOCKS } = require('markup-it');\nconst Glossary = require('../models/glossary');\n\n/**\n * Return true if a node is a entry title.\n * @param  {Node} node\n * @return {Boolean}\n */\nconst isTitle = node => node.type == BLOCKS.HEADING_2;\n\n/**\n * Return true if a node is a entry description.\n * @param  {Node} node\n * @return {Boolean}\n */\nconst isDescription = node => node.type !== BLOCKS.HEADING_2 && node.type !== BLOCKS.CODE;\n\n/**\n * Parse a readme from a document.\n * @param  {Document} document\n * @return {Readme} readme\n */\nfunction glossaryFromDocument(document) {\n    const { nodes } = document;\n    const entries = [];\n\n    nodes.forEach((block, i) => {\n        const next = nodes.get(i);\n\n        if (isTitle(block)) {\n            entries.push({\n                name:        block.text,\n                description: (next && isDescription(next)) ? next.text : ''\n            });\n        }\n    });\n\n\n    return Glossary.createFromEntries(entries);\n}\n\nmodule.exports = glossaryFromDocument;\n"]}