{"version":3,"sources":["../../src/parse/parsePagesList.js"],"names":["require","OrderedMap","timing","Page","walkSummary","parsePage","parseFilePage","book","filePath","fs","getContentFS","statFile","then","file","page","createForFile","err","fail","logger","getLogger","error","ln","parsePagesList","summary","getSummary","glossary","getGlossary","map","measure","article","isPage","filepath","getPath","isContentFileIgnored","set","getFile","exists","module","exports"],"mappings":";;eAAuBA,QAAQ,WAAR,C;IAAfC,U,YAAAA,U;;AAER,IAAMC,SAASF,QAAQ,iBAAR,CAAf;AACA,IAAMG,OAAOH,QAAQ,gBAAR,CAAb;AACA,IAAMI,cAAcJ,QAAQ,eAAR,CAApB;AACA,IAAMK,YAAYL,QAAQ,aAAR,CAAlB;;AAGA;;;;;;;AAOA,SAASM,aAAT,CAAuBC,IAAvB,EAA6BC,QAA7B,EAAuC;AACnC,QAAMC,KAAKF,KAAKG,YAAL,EAAX;;AAEA,WAAOD,GAAGE,QAAH,CAAYH,QAAZ,EACNI,IADM,CAEH,UAACC,IAAD,EAAU;AACN,YAAMC,OAAOX,KAAKY,aAAL,CAAmBF,IAAnB,CAAb;AACA,eAAOR,UAAUE,IAAV,EAAgBO,IAAhB,CAAP;AACH,KALE,EAMH,UAACE,GAAD,EAAS;AACL;AACA,eAAO,IAAP;AACH,KATE,EAWNC,IAXM,CAWD,UAACD,GAAD,EAAS;AACX,YAAME,SAASX,KAAKY,SAAL,EAAf;AACAD,eAAOE,KAAP,CAAaC,EAAb,CAAgB,+BAA+Bb,QAA/B,GAA0C,IAA1D;AACA,cAAMQ,GAAN;AACH,KAfM,CAAP;AAgBH;;AAGD;;;;;;AAMA,SAASM,cAAT,CAAwBf,IAAxB,EAA8B;AAC1B,QAAMgB,UAAUhB,KAAKiB,UAAL,EAAhB;AACA,QAAMC,WAAWlB,KAAKmB,WAAL,EAAjB;AACA,QAAIC,MAAM1B,YAAV;;AAEA;AACA,WAAOC,OAAO0B,OAAP,CACH,iBADG,EAEHxB,YAAYmB,OAAZ,EAAqB,UAACM,OAAD,EAAa;AAC9B,YAAI,CAACA,QAAQC,MAAR,EAAL,EAAuB;;AAEvB,YAAMC,WAAWF,QAAQG,OAAR,EAAjB;;AAEA;AACA,YAAIzB,KAAK0B,oBAAL,CAA0BF,QAA1B,CAAJ,EAAyC;;AAEzC,eAAOzB,cAAcC,IAAd,EAAoBwB,QAApB,EACNnB,IADM,CACD,UAACE,IAAD,EAAU;AACZ;AACA,gBAAI,CAACA,IAAL,EAAW;AACP;AACH;;AAEDa,kBAAMA,IAAIO,GAAJ,CAAQH,QAAR,EAAkBjB,IAAlB,CAAN;AACH,SARM,CAAP;AASH,KAjBD,CAFG;;AAsBP;AAtBO,KAuBNF,IAvBM,CAuBD,YAAM;AACR,YAAMC,OAAOY,SAASU,OAAT,EAAb;;AAEA,YAAI,CAACtB,KAAKuB,MAAL,EAAL,EAAoB;AAChB;AACH;;AAED,eAAO9B,cAAcC,IAAd,EAAoBM,KAAKmB,OAAL,EAApB,EACNpB,IADM,CACD,UAACE,IAAD,EAAU;AACZ;AACA,gBAAI,CAACA,IAAL,EAAW;AACP;AACH;;AAEDa,kBAAMA,IAAIO,GAAJ,CAAQrB,KAAKmB,OAAL,EAAR,EAAwBlB,IAAxB,CAAN;AACH,SARM,CAAP;AASH,KAvCM,EAyCNF,IAzCM,CAyCD,YAAM;AACR,eAAOe,GAAP;AACH,KA3CM,CAAP;AA4CH;;AAGDU,OAAOC,OAAP,GAAiBhB,cAAjB","file":"parsePagesList.js","sourcesContent":["const { OrderedMap } = require('immutable');\n\nconst timing = require('../utils/timing');\nconst Page = require('../models/page');\nconst walkSummary = require('./walkSummary');\nconst parsePage = require('./parsePage');\n\n\n/**\n * Parse a page from a path\n *\n * @param {Book} book\n * @param {String} filePath\n * @return {Page?}\n */\nfunction parseFilePage(book, filePath) {\n    const fs = book.getContentFS();\n\n    return fs.statFile(filePath)\n    .then(\n        (file) => {\n            const page = Page.createForFile(file);\n            return parsePage(book, page);\n        },\n        (err) => {\n            // file doesn't exist\n            return null;\n        }\n    )\n    .fail((err) => {\n        const logger = book.getLogger();\n        logger.error.ln('error while parsing page \"' + filePath + '\":');\n        throw err;\n    });\n}\n\n\n/**\n * Parse all pages from a book as an OrderedMap\n *\n * @param {Book} book\n * @return {Promise<OrderedMap<Page>>}\n */\nfunction parsePagesList(book) {\n    const summary = book.getSummary();\n    const glossary = book.getGlossary();\n    let map = OrderedMap();\n\n    // Parse pages from summary\n    return timing.measure(\n        'parse.listPages',\n        walkSummary(summary, (article) => {\n            if (!article.isPage()) return;\n\n            const filepath = article.getPath();\n\n            // Is the page ignored?\n            if (book.isContentFileIgnored(filepath)) return;\n\n            return parseFilePage(book, filepath)\n            .then((page) => {\n                // file doesn't exist\n                if (!page) {\n                    return;\n                }\n\n                map = map.set(filepath, page);\n            });\n        })\n    )\n\n    // Parse glossary\n    .then(() => {\n        const file = glossary.getFile();\n\n        if (!file.exists()) {\n            return;\n        }\n\n        return parseFilePage(book, file.getPath())\n        .then((page) => {\n            // file doesn't exist\n            if (!page) {\n                return;\n            }\n\n            map = map.set(file.getPath(), page);\n        });\n    })\n\n    .then(() => {\n        return map;\n    });\n}\n\n\nmodule.exports = parsePagesList;\n"]}