{"version":3,"sources":["../../src/parse/summaryFromDocument.js"],"names":["Summary","require","BLOCKS","INLINES","List","isList","node","type","OL_LIST","UL_LIST","isLink","LINK","createArticleFromItem","item","nodes","linkParent","filterNot","find","findDescendant","textParent","isEmpty","first","title","ref","parent","link","text","data","get","list","skipUntil","skip","articles","listArticles","map","filter","Boolean","article","listParts","document","parts","pendingPart","forEach","isHeading","HEADING_2","HEADING_3","push","undefined","summaryFromDocument","createFromParts","module","exports"],"mappings":"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","file":"summaryFromDocument.js","sourcesContent":["const Summary = require('../models/summary');\n\nconst { BLOCKS, INLINES } = require('markup-it');\nconst { List } = require('immutable');\n\nconst isList = node => node.type === BLOCKS.OL_LIST || node.type === BLOCKS.UL_LIST;\nconst isLink = node => node.type === INLINES.LINK;\n\n/**\n * Create a summary article from a list item.\n * @param  {Block} item\n * @return {SummaryArticleLike | Null} article\n */\nfunction createArticleFromItem(item) {\n    const { nodes } = item;\n\n    // Find the link that represents the article's title\n    const linkParent = nodes\n        .filterNot(isList)\n        .find(node => node.findDescendant(isLink));\n\n    // Or find text that could act as title\n    const textParent = nodes.filterNot(node => isList(node) || node.isEmpty).first();\n\n    let title, ref, parent;\n    if (linkParent) {\n        const link = linkParent.findDescendant(isLink);\n\n        if (!link.isEmpty) {\n            parent = linkParent;\n            title = link.text;\n            ref = link.data.get('href');\n        }\n    }\n\n    if (!parent) {\n        // Could not find a proper link\n\n        if (textParent) {\n            parent = textParent;\n            title = textParent.text;\n            ref = null;\n        } else {\n            // This item has no proper title or link\n            return null;\n        }\n    }\n\n    const list = nodes\n        // Skip until after the article's title or link\n        .skipUntil(node => node === parent).skip(1)\n        .find(isList);\n    const articles = list ? listArticles(list) : [];\n\n    return {\n        title,\n        ref,\n        articles\n    };\n}\n\n/**\n * List articles in a list node.\n * @param  {Block} list\n * @return {List<SummaryArticleLike>} articles\n */\nfunction listArticles(list) {\n    const { nodes } = list;\n    return nodes\n        .map(item => createArticleFromItem(item))\n        .filter(article => Boolean(article));\n}\n\n/**\n * List summary parts in a document.\n * @param  {Document} document\n * @return {List<SummaryPart>} parts\n */\nfunction listParts(document) {\n    const { nodes } = document;\n    const parts = [];\n\n    // Keep a reference to a part, waiting for its articles\n    let pendingPart;\n\n    nodes.forEach((node) => {\n        const isHeading = (\n            node.type == BLOCKS.HEADING_2 ||\n            node.type == BLOCKS.HEADING_3\n        );\n\n        if (isHeading) {\n            if (pendingPart) {\n                // The previous was empty\n                parts.push(pendingPart);\n            }\n            pendingPart = {\n                title: node.text\n            };\n        }\n\n        if (isList(node)) {\n            const articles = listArticles(node);\n\n            if (pendingPart) {\n                pendingPart.articles = articles;\n                parts.push(pendingPart);\n                pendingPart = undefined;\n            } else {\n                parts.push({\n                    title: '',\n                    articles\n                });\n            }\n        }\n    });\n\n    if (pendingPart) {\n        // The last one was empty\n        parts.push(pendingPart);\n    }\n\n    return List(parts);\n}\n\n/**\n * Parse a summary from a document.\n * @param  {Document} document\n * @return {Summary} summary\n */\nfunction summaryFromDocument(document) {\n    const parts = listParts(document);\n    return Summary.createFromParts(parts);\n}\n\nmodule.exports = summaryFromDocument;\nmodule.exports.listArticles = listArticles;\nmodule.exports.createArticleFromItem = createArticleFromItem;\n"]}