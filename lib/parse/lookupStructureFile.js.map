{"version":3,"sources":["../../src/parse/lookupStructureFile.js"],"names":["findParsableFile","require","lookupStructureFile","book","type","config","fileToSearch","getValue","module","exports"],"mappings":";;AAAA,IAAMA,mBAAmBC,QAAQ,oBAAR,CAAzB;;AAEA;;;;;;;;;AASA,SAASC,mBAAT,CAA6BC,IAA7B,EAAmCC,IAAnC,EAAyC;AAAA,MAC7BC,MAD6B,GAClBF,IADkB,CAC7BE,MAD6B;;AAErC,MAAMC,eAAeD,OAAOE,QAAP,CAAgB,CAAC,WAAD,EAAcH,IAAd,CAAhB,CAArB;;AAEA,SAAOJ,iBAAiBG,IAAjB,EAAuBG,YAAvB,CAAP;AACH;;AAEDE,OAAOC,OAAP,GAAiBP,mBAAjB","file":"lookupStructureFile.js","sourcesContent":["const findParsableFile = require('./findParsableFile');\n\n/**\n * Lookup a structure file (ex: SUMMARY.md, GLOSSARY.md) in a book. Uses\n * book's config to find it.\n *\n * @param {Book} book\n * @param {String} type: one of [\"glossary\", \"readme\", \"summary\", \"langs\"]\n * @return {Promise<File | Undefined>} The path of the file found, relative\n * to the book content root.\n */\nfunction lookupStructureFile(book, type) {\n    const { config } = book;\n    const fileToSearch = config.getValue(['structure', type]);\n\n    return findParsableFile(book, fileToSearch);\n}\n\nmodule.exports = lookupStructureFile;\n"]}