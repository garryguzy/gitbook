{"version":3,"sources":["../../src/parse/parseURIIndexFromPages.js"],"names":["path","require","PathUtils","LocationUtils","URIIndex","OUTPUT_EXTENSION","fileToURL","filePath","basename","extname","join","dirname","setExtension","normalize","parseURIIndexFromPages","pages","urls","map","page","module","exports"],"mappings":";;AAAA,IAAMA,OAAOC,QAAQ,MAAR,CAAb;AACA,IAAMC,YAAYD,QAAQ,eAAR,CAAlB;AACA,IAAME,gBAAgBF,QAAQ,mBAAR,CAAtB;AACA,IAAMG,WAAWH,QAAQ,oBAAR,CAAjB;;AAEA,IAAMI,mBAAmB,OAAzB;;AAEA;;;;;;;;;;;;AAYA,SAASC,SAAT,CAAmBC,QAAnB,EAA6B;AACzB,QACIP,KAAKQ,QAAL,CAAcD,QAAd,EAAwBP,KAAKS,OAAL,CAAaF,QAAb,CAAxB,KAAmD,QADvD,EAEE;AACEA,mBAAWP,KAAKU,IAAL,CAAUV,KAAKW,OAAL,CAAaJ,QAAb,CAAV,EAAkC,UAAUF,gBAA5C,CAAX;AACH,KAJD,MAIO;AACHE,mBAAWL,UAAUU,YAAV,CAAuBL,QAAvB,EAAiCF,gBAAjC,CAAX;AACH;;AAED,WAAOF,cAAcU,SAAd,CAAwBN,QAAxB,CAAP;AACH;;AAED;;;;;;;AAOA,SAASO,sBAAT,CAAgCC,KAAhC,EAAuC;AACnC,QAAMC,OAAOD,MAAME,GAAN,CAAU,UAACC,IAAD,EAAOX,QAAP;AAAA,eAAoBD,UAAUC,QAAV,CAApB;AAAA,KAAV,CAAb;AACA,WAAO,IAAIH,QAAJ,CAAaY,IAAb,CAAP;AACH;;AAEDG,OAAOC,OAAP,GAAiBN,sBAAjB","file":"parseURIIndexFromPages.js","sourcesContent":["const path = require('path');\nconst PathUtils = require('../utils/path');\nconst LocationUtils = require('../utils/location');\nconst URIIndex = require('../models/uriIndex');\n\nconst OUTPUT_EXTENSION = '.html';\n\n/**\n * Convert a filePath (absolute) to an url (without hostname).\n * It returns an absolute path.\n *\n * \"README.md\" -> \"/index.html\"\n * \"test/hello.md\" -> \"test/hello.html\"\n * \"test/README.md\" -> \"test/index.html\"\n *\n * @param {Output} output\n * @param {String} filePath\n * @return {String}\n */\nfunction fileToURL(filePath) {\n    if (\n        path.basename(filePath, path.extname(filePath)) == 'README'\n    ) {\n        filePath = path.join(path.dirname(filePath), 'index' + OUTPUT_EXTENSION);\n    } else {\n        filePath = PathUtils.setExtension(filePath, OUTPUT_EXTENSION);\n    }\n\n    return LocationUtils.normalize(filePath);\n}\n\n/**\n * Parse a set of pages into an URIIndex.\n * Each pages is added as an entry in the index.\n *\n * @param  {OrderedMap<Page>} pages\n * @return {URIIndex} index\n */\nfunction parseURIIndexFromPages(pages) {\n    const urls = pages.map((page, filePath) => fileToURL(filePath));\n    return new URIIndex(urls);\n}\n\nmodule.exports = parseURIIndexFromPages;\n"]}