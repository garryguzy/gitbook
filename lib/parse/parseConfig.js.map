{"version":3,"sources":["../../src/parse/parseConfig.js"],"names":["Promise","require","validateConfig","CONFIG_FILES","parseConfig","book","fs","getFS","config","getConfig","some","filename","isFileIgnored","loadAsObject","then","cfg","statFile","file","values","fail","err","code","result","setFile","mergeValues","setConfig","module","exports"],"mappings":";;AAAA,IAAMA,UAAUC,QAAQ,kBAAR,CAAhB;;AAEA,IAAMC,iBAAiBD,QAAQ,kBAAR,CAAvB;AACA,IAAME,eAAeF,QAAQ,0BAAR,CAArB;;AAEA;;;;;;AAMA,SAASG,WAAT,CAAqBC,IAArB,EAA2B;AACvB,QAAMC,KAAKD,KAAKE,KAAL,EAAX;AACA,QAAIC,SAASH,KAAKI,SAAL,EAAb;;AAEA,WAAOT,QAAQU,IAAR,CAAaP,YAAb,EAA2B,UAACQ,QAAD,EAAc;AAC5C;AACA,YAAIN,KAAKO,aAAL,CAAmBD,QAAnB,CAAJ,EAAkC;AAC9B;AACH;;AAED;AACA,eAAOL,GAAGO,YAAH,CAAgBF,QAAhB,EACNG,IADM,CACD,UAACC,GAAD,EAAS;AACX,mBAAOT,GAAGU,QAAH,CAAYL,QAAZ,EACNG,IADM,CACD,UAACG,IAAD,EAAU;AACZ,uBAAO;AACHA,8BADG;AAEHC,4BAAQH;AAFL,iBAAP;AAIH,aANM,CAAP;AAOH,SATM,EAUNI,IAVM,CAUD,UAACC,GAAD,EAAS;AACX,gBAAIA,IAAIC,IAAJ,IAAY,kBAAhB,EAAoC,MAAOD,GAAP,CAApC,KACK,OAAOpB,QAAQ,KAAR,CAAP;AACR,SAbM,CAAP;AAcH,KArBM,EAuBNc,IAvBM,CAuBD,UAACQ,MAAD,EAAY;AACd,YAAIJ,SAASI,SAASA,OAAOJ,MAAhB,GAAyB,EAAtC;AACAA,iBAAShB,eAAegB,MAAf,CAAT;;AAEA;AACA,YAAII,OAAOL,IAAX,EAAiB;AACbT,qBAASA,OAAOe,OAAP,CAAeD,OAAOL,IAAtB,CAAT;AACH;;AAED;AACAT,iBAASA,OAAOgB,WAAP,CAAmBN,MAAnB,CAAT;;AAEA,eAAOb,KAAKoB,SAAL,CAAejB,MAAf,CAAP;AACH,KApCM,CAAP;AAqCH;;AAEDkB,OAAOC,OAAP,GAAiBvB,WAAjB","file":"parseConfig.js","sourcesContent":["const Promise = require('../utils/promise');\n\nconst validateConfig = require('./validateConfig');\nconst CONFIG_FILES = require('../constants/configFiles');\n\n/**\n    Parse configuration from \"book.json\" or \"book.js\"\n\n    @param {Book} book\n    @return {Promise<Book>}\n*/\nfunction parseConfig(book) {\n    const fs = book.getFS();\n    let config = book.getConfig();\n\n    return Promise.some(CONFIG_FILES, (filename) => {\n        // Is this file ignored?\n        if (book.isFileIgnored(filename)) {\n            return;\n        }\n\n        // Try loading it\n        return fs.loadAsObject(filename)\n        .then((cfg) => {\n            return fs.statFile(filename)\n            .then((file) => {\n                return {\n                    file,\n                    values: cfg\n                };\n            });\n        })\n        .fail((err) => {\n            if (err.code != 'MODULE_NOT_FOUND') throw (err);\n            else return Promise(false);\n        });\n    })\n\n    .then((result) => {\n        let values = result ? result.values : {};\n        values = validateConfig(values);\n\n        // Set the file\n        if (result.file) {\n            config = config.setFile(result.file);\n        }\n\n        // Merge with old values\n        config = config.mergeValues(values);\n\n        return book.setConfig(config);\n    });\n}\n\nmodule.exports = parseConfig;\n"]}