{"version":3,"sources":["../../src/parse/parseSummary.js"],"names":["Summary","require","lookupStructureFile","summaryFromDocument","SummaryModifier","readSummary","book","file","fs","getContentFS","parse","then","document","summary","setFile","parseSummary","readme","logger","warn","ln","debug","path","readmeFile","getFile","readmeArticle","getByPath","exists","unshiftArticle","title","ref","setSummary","module","exports"],"mappings":";;AAAA,IAAMA,UAAUC,QAAQ,mBAAR,CAAhB;AACA,IAAMC,sBAAsBD,QAAQ,uBAAR,CAA5B;AACA,IAAME,sBAAsBF,QAAQ,uBAAR,CAA5B;AACA,IAAMG,kBAAkBH,QAAQ,cAAR,EAAwBD,OAAhD;;AAEA;;;;;;AAMA,SAASK,WAAT,CAAqBC,IAArB,EAA2BC,IAA3B,EAAiC;AAC7B,QAAMC,KAAKF,KAAKG,YAAL,EAAX;;AAEA,WAAOF,KAAKG,KAAL,CAAWF,EAAX,EACNG,IADM,CACD,UAACC,QAAD,EAAc;AAChB,YAAMC,UAAUV,oBAAoBS,QAApB,CAAhB;AACA,eAAOC,QAAQC,OAAR,CAAgBP,IAAhB,CAAP;AACH,KAJM,CAAP;AAKH;;AAED;;;;;;;AAOA,SAASQ,YAAT,CAAsBT,IAAtB,EAA4B;AAAA,QAChBU,MADgB,GACGV,IADH,CAChBU,MADgB;AAAA,QACRC,MADQ,GACGX,IADH,CACRW,MADQ;;;AAGxB,WAAOf,oBAAoBI,IAApB,EAA0B,SAA1B,EACNK,IADM,CACD,UAACJ,IAAD,EAAU;AACZ,YAAI,CAACA,IAAL,EAAW;AACPU,mBAAOC,IAAP,CAAYC,EAAZ,CAAe,8BAAf;AACA,mBAAO,IAAInB,OAAJ,EAAP;AACH,SAHD,MAGO;AACHiB,mBAAOG,KAAP,CAAaD,EAAb,CAAgB,uBAAhB,EAAyCZ,KAAKc,IAA9C;AACA,mBAAOhB,YAAYC,IAAZ,EAAkBC,IAAlB,CAAP;AACH;AACJ,KATM;;AAWP;AAXO,KAYNI,IAZM,CAYD,UAACE,OAAD,EAAa;AACf,YAAMS,aAAaN,OAAOO,OAAP,EAAnB;AACA,YAAMC,gBAAgBX,QAAQY,SAAR,CAAkBH,WAAWD,IAA7B,CAAtB;;AAEA,YAAIC,WAAWI,MAAX,MAAuB,CAACF,aAA5B,EAA2C;AACvCX,sBAAUT,gBAAgBuB,cAAhB,CAA+Bd,OAA/B,EAAwC;AAC9Ce,uBAAO,cADuC;AAE9CC,qBAAKP,WAAWD;AAF8B,aAAxC,CAAV;AAIH;;AAED;AACA,eAAOf,KAAKwB,UAAL,CAAgBjB,OAAhB,CAAP;AACH,KAzBM,CAAP;AA0BH;;AAEDkB,OAAOC,OAAP,GAAiBjB,YAAjB","file":"parseSummary.js","sourcesContent":["const Summary = require('../models/summary');\nconst lookupStructureFile = require('./lookupStructureFile');\nconst summaryFromDocument = require('./summaryFromDocument');\nconst SummaryModifier = require('../modifiers').Summary;\n\n/**\n * Read the summary from a file.\n * @param {Book} book\n * @param {File} file\n * @return {Promise<Summary>} summary\n */\nfunction readSummary(book, file) {\n    const fs = book.getContentFS();\n\n    return file.parse(fs)\n    .then((document) => {\n        const summary = summaryFromDocument(document);\n        return summary.setFile(file);\n    });\n}\n\n/**\n * Parse summary in a book, the summary can only be parsed\n * if the readme as be detected before.\n *\n * @param {Book} book\n * @return {Promise<Book>}\n */\nfunction parseSummary(book) {\n    const { readme, logger } = book;\n\n    return lookupStructureFile(book, 'summary')\n    .then((file) => {\n        if (!file) {\n            logger.warn.ln('no summary file in this book');\n            return new Summary();\n        } else {\n            logger.debug.ln('summary file found at', file.path);\n            return readSummary(book, file);\n        }\n    })\n\n    // Insert readme as first entry if not in SUMMARY.md\n    .then((summary) => {\n        const readmeFile = readme.getFile();\n        const readmeArticle = summary.getByPath(readmeFile.path);\n\n        if (readmeFile.exists() && !readmeArticle) {\n            summary = SummaryModifier.unshiftArticle(summary, {\n                title: 'Introduction',\n                ref: readmeFile.path\n            });\n        }\n\n        // Set new summary\n        return book.setSummary(summary);\n    });\n}\n\nmodule.exports = parseSummary;\n"]}