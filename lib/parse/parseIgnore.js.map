{"version":3,"sources":["../../src/parse/parseIgnore.js"],"names":["Promise","require","IGNORE_FILES","DEFAULT_IGNORES","parseIgnore","book","isLanguageBook","reject","Error","fs","getFS","ignore","getIgnore","add","serie","filename","readAsString","then","content","toString","split","err","setIgnore","module","exports"],"mappings":";;AAAA,IAAMA,UAAUC,QAAQ,kBAAR,CAAhB;AACA,IAAMC,eAAeD,QAAQ,0BAAR,CAArB;;AAEA,IAAME,kBAAkB;AACpB;AACA,OAFoB;;AAIpB;AACA,WALoB;;AAOpB;AACA,cARoB;;AAUpB;AACA,OAXoB;;AAapB;AACA,UAdoB,CAAxB;;AAiBA;;;;;;AAMA,SAASC,WAAT,CAAqBC,IAArB,EAA2B;AACvB,QAAIA,KAAKC,cAAL,EAAJ,EAA2B;AACvB,eAAON,QAAQO,MAAR,CAAe,IAAIC,KAAJ,CAAU,iDAAV,CAAf,CAAP;AACH;;AAED,QAAMC,KAAKJ,KAAKK,KAAL,EAAX;AACA,QAAIC,SAASN,KAAKO,SAAL,EAAb;;AAEAD,aAASA,OAAOE,GAAP,CAAWV,eAAX,CAAT;;AAEA,WAAOH,QAAQc,KAAR,CAAcZ,YAAd,EAA4B,UAACa,QAAD,EAAc;AAC7C,eAAON,GAAGO,YAAH,CAAgBD,QAAhB,EACNE,IADM,CAEH,UAACC,OAAD,EAAa;AACTP,qBAASA,OAAOE,GAAP,CAAWK,QAAQC,QAAR,GAAmBC,KAAnB,CAAyB,OAAzB,CAAX,CAAT;AACH,SAJE,EAKH,UAACC,GAAD,EAAS;AACL,mBAAOrB,SAAP;AACH,SAPE,CAAP;AASH,KAVM,EAYNiB,IAZM,CAYD,YAAM;AACR,eAAOZ,KAAKiB,SAAL,CAAeX,MAAf,CAAP;AACH,KAdM,CAAP;AAeH;;AAEDY,OAAOC,OAAP,GAAiBpB,WAAjB","file":"parseIgnore.js","sourcesContent":["const Promise = require('../utils/promise');\nconst IGNORE_FILES = require('../constants/ignoreFiles');\n\nconst DEFAULT_IGNORES = [\n    // Skip Git stuff\n    '.git/',\n\n    // Skip OS X meta data\n    '.DS_Store',\n\n    // Skip stuff installed by plugins\n    'node_modules',\n\n    // Skip book outputs\n    '_book',\n\n    // Ignore files in the templates folder\n    '_layouts'\n];\n\n/**\n * Parse ignore files\n *\n * @param {Book} book\n * @return {Book} book\n */\nfunction parseIgnore(book) {\n    if (book.isLanguageBook()) {\n        return Promise.reject(new Error('Ignore files could be parsed for language books'));\n    }\n\n    const fs = book.getFS();\n    let ignore = book.getIgnore();\n\n    ignore = ignore.add(DEFAULT_IGNORES);\n\n    return Promise.serie(IGNORE_FILES, (filename) => {\n        return fs.readAsString(filename)\n        .then(\n            (content) => {\n                ignore = ignore.add(content.toString().split(/\\r?\\n/));\n            },\n            (err) => {\n                return Promise();\n            }\n        );\n    })\n\n    .then(() => {\n        return book.setIgnore(ignore);\n    });\n}\n\nmodule.exports = parseIgnore;\n"]}