{"version":3,"sources":["../../src/parse/findParsableFile.js"],"names":["path","require","Promise","FILE_EXTENSIONS","findParsableFile","book","filename","fs","getContentFS","basename","extname","basedir","dirname","some","ext","filepath","findFile","then","found","isContentFileIgnored","undefined","statFile","module","exports"],"mappings":";;AAAA,IAAMA,OAAOC,QAAQ,MAAR,CAAb;;AAEA,IAAMC,UAAUD,QAAQ,kBAAR,CAAhB;;eAC4BA,QAAQ,YAAR,C;IAApBE,e,YAAAA,e;;AAER;;;;;;;;;AAOA,SAASC,gBAAT,CAA0BC,IAA1B,EAAgCC,QAAhC,EAA0C;AACtC,QAAMC,KAAKF,KAAKG,YAAL,EAAX;AACA,QAAMC,WAAWT,KAAKS,QAAL,CAAcH,QAAd,EAAwBN,KAAKU,OAAL,CAAaJ,QAAb,CAAxB,CAAjB;AACA,QAAMK,UAAUX,KAAKY,OAAL,CAAaN,QAAb,CAAhB;;AAEA,WAAOJ,QAAQW,IAAR,CAAaV,eAAb,EAA8B,UAACW,GAAD,EAAS;AAC1C,YAAMC,WAAWN,WAAWK,GAA5B;;AAEA,eAAOP,GAAGS,QAAH,CAAYL,OAAZ,EAAqBI,QAArB,EACNE,IADM,CACD,UAACC,KAAD,EAAW;AACb,gBAAI,CAACA,KAAD,IAAUb,KAAKc,oBAAL,CAA0BD,KAA1B,CAAd,EAAgD;AAC5C,uBAAOE,SAAP;AACH;;AAED,mBAAOb,GAAGc,QAAH,CAAYH,KAAZ,CAAP;AACH,SAPM,CAAP;AAQH,KAXM,CAAP;AAYH;;AAEDI,OAAOC,OAAP,GAAiBnB,gBAAjB","file":"findParsableFile.js","sourcesContent":["const path = require('path');\n\nconst Promise = require('../utils/promise');\nconst { FILE_EXTENSIONS } = require('../parsers');\n\n/**\n * Find a file parsable (Markdown or AsciiDoc) in a book\n *\n * @param {Book} book\n * @param {String} filename\n * @return {Promise<File | Undefined>}\n */\nfunction findParsableFile(book, filename) {\n    const fs = book.getContentFS();\n    const basename = path.basename(filename, path.extname(filename));\n    const basedir = path.dirname(filename);\n\n    return Promise.some(FILE_EXTENSIONS, (ext) => {\n        const filepath = basename + ext;\n\n        return fs.findFile(basedir, filepath)\n        .then((found) => {\n            if (!found || book.isContentFileIgnored(found)) {\n                return undefined;\n            }\n\n            return fs.statFile(found);\n        });\n    });\n}\n\nmodule.exports = findParsableFile;\n"]}