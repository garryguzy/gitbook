{"version":3,"sources":["../../../src/modifiers/summary/insertArticle.js"],"names":["is","require","SummaryArticle","mergeAtLevel","indexArticleLevels","insertArticle","summary","article","level","string","getLevel","parent","getParent","articles","getArticles","index","getLeafIndex","insert","set","arr","split","map","char","parseInt","length","module","exports"],"mappings":";;AAAA,IAAMA,KAAKC,QAAQ,IAAR,CAAX;AACA,IAAMC,iBAAiBD,QAAQ,6BAAR,CAAvB;AACA,IAAME,eAAeF,QAAQ,gBAAR,CAArB;AACA,IAAMG,qBAAqBH,QAAQ,sBAAR,CAA3B;;AAEA;;;;;;;;;AASA,SAASI,aAAT,CAAuBC,OAAvB,EAAgCC,OAAhC,EAAyCC,KAAzC,EAAgD;AAC5CD,cAAU,IAAIL,cAAJ,CAAmBK,OAAnB,CAAV;AACAC,YAAQR,GAAGS,MAAH,CAAUD,KAAV,IAAmBA,KAAnB,GAA2BA,MAAME,QAAN,EAAnC;;AAEA,QAAIC,SAASL,QAAQM,SAAR,CAAkBJ,KAAlB,CAAb;AACA,QAAI,CAACG,MAAL,EAAa;AACT,eAAOL,OAAP;AACH;;AAED;AACA,QAAIO,WAAWF,OAAOG,WAAP,EAAf;AACA,QAAMC,QAAQC,aAAaR,KAAb,CAAd;;AAEA;AACAK,eAAWA,SAASI,MAAT,CAAgBF,KAAhB,EAAuBR,OAAvB,CAAX;;AAEA;AACAI,aAASA,OAAOO,GAAP,CAAW,UAAX,EAAuBL,QAAvB,CAAT;AACAF,aAASP,mBAAmBO,MAAnB,CAAT;;AAEA,WAAOR,aAAaG,OAAb,EAAsBK,OAAOD,QAAP,EAAtB,EAAyCC,MAAzC,CAAP;AACH;;AAED;;;;AAIA,SAASK,YAAT,CAAsBR,KAAtB,EAA6B;AACzB,QAAMW,MAAMX,MAAMY,KAAN,CAAY,GAAZ,EAAiBC,GAAjB,CAAqB,UAACC,IAAD,EAAU;AACvC,eAAOC,SAASD,IAAT,EAAe,EAAf,CAAP;AACH,KAFW,CAAZ;AAGA,WAAOH,IAAIA,IAAIK,MAAJ,GAAa,CAAjB,IAAsB,CAA7B;AACH;;AAEDC,OAAOC,OAAP,GAAiBrB,aAAjB","file":"insertArticle.js","sourcesContent":["const is = require('is');\nconst SummaryArticle = require('../../models/summaryArticle');\nconst mergeAtLevel = require('./mergeAtLevel');\nconst indexArticleLevels = require('./indexArticleLevels');\n\n/**\n * Returns a new Summary with the article at the given level, with\n * subsequent article shifted.\n *\n * @param {Summary} summary\n * @param {Article} article\n * @param {String|Article} level: level to insert at\n * @return {Summary}\n */\nfunction insertArticle(summary, article, level) {\n    article = new SummaryArticle(article);\n    level = is.string(level) ? level : level.getLevel();\n\n    let parent = summary.getParent(level);\n    if (!parent) {\n        return summary;\n    }\n\n    // Find the index to insert at\n    let articles = parent.getArticles();\n    const index = getLeafIndex(level);\n\n    // Insert the article at the right index\n    articles = articles.insert(index, article);\n\n    // Reindex the level from here\n    parent = parent.set('articles', articles);\n    parent = indexArticleLevels(parent);\n\n    return mergeAtLevel(summary, parent.getLevel(), parent);\n}\n\n/**\n * @param {String}\n * @return {Number} The index of this level within its parent's children\n */\nfunction getLeafIndex(level) {\n    const arr = level.split('.').map((char) => {\n        return parseInt(char, 10);\n    });\n    return arr[arr.length - 1] - 1;\n}\n\nmodule.exports = insertArticle;\n"]}