{"version":3,"sources":["../../../src/modifiers/summary/moveArticleAfter.js"],"names":["is","require","removeArticle","insertArticle","moveArticleAfter","summary","origin","afterTarget","originLevel","string","getLevel","afterTargetLevel","article","getByLevel","targetLevel","increment","removed","inserted","levelToArray","l","split","map","char","parseInt","arrayToLevel","a","join","level","length","module","exports"],"mappings":";;AAAA,IAAMA,KAAKC,QAAQ,IAAR,CAAX;AACA,IAAMC,gBAAgBD,QAAQ,iBAAR,CAAtB;AACA,IAAME,gBAAgBF,QAAQ,iBAAR,CAAtB;;AAEA;;;;;;;;;;AAUA,SAASG,gBAAT,CAA0BC,OAA1B,EAAmCC,MAAnC,EAA2CC,WAA3C,EAAwD;AACpD;AACA,QAAMC,cAAcR,GAAGS,MAAH,CAAUH,MAAV,IAAoBA,MAApB,GAA6BA,OAAOI,QAAP,EAAjD;AACA,QAAMC,mBAAmBX,GAAGS,MAAH,CAAUF,WAAV,IAAyBA,WAAzB,GAAuCA,YAAYG,QAAZ,EAAhE;AACA,QAAME,UAAUP,QAAQQ,UAAR,CAAmBL,WAAnB,CAAhB;;AAEA,QAAMM,cAAcC,UAAUJ,gBAAV,CAApB;;AAEA,QAAIG,cAAcR,MAAlB,EAA0B;AACtB;AACA,YAAMU,UAAUd,cAAcG,OAAd,EAAuBG,WAAvB,CAAhB;AACA;AACA,eAAOL,cAAca,OAAd,EAAuBJ,OAAvB,EAAgCE,WAAhC,CAAP;AACH,KALD,MAKO;AACH;AACA,YAAMG,WAAWd,cAAcE,OAAd,EAAuBO,OAAvB,EAAgCE,WAAhC,CAAjB;AACA;AACA,eAAOZ,cAAce,QAAd,EAAwBT,WAAxB,CAAP;AACH;AACJ;;AAED;;;;AAIA,SAASU,YAAT,CAAsBC,CAAtB,EAAyB;AACrB,WAAOA,EAAEC,KAAF,CAAQ,GAAR,EAAaC,GAAb,CAAiB,UAACC,IAAD,EAAU;AAC9B,eAAOC,SAASD,IAAT,EAAe,EAAf,CAAP;AACH,KAFM,CAAP;AAGH;;AAED;;;;AAIA,SAASE,YAAT,CAAsBC,CAAtB,EAAyB;AACrB,WAAOA,EAAEC,IAAF,CAAO,GAAP,CAAP;AACH;;AAED,SAASX,SAAT,CAAmBY,KAAnB,EAA0B;AACtBA,YAAQT,aAAaS,KAAb,CAAR;AACAA,UAAMA,MAAMC,MAAN,GAAe,CAArB;AACA,WAAOJ,aAAaG,KAAb,CAAP;AACH;;AAEDE,OAAOC,OAAP,GAAiB1B,gBAAjB","file":"moveArticleAfter.js","sourcesContent":["const is = require('is');\nconst removeArticle = require('./removeArticle');\nconst insertArticle = require('./insertArticle');\n\n/**\n    Returns a new summary, with the an article moved after another\n    article. Unlike `moveArticle`, does not ensure that the article\n    will be found at the target's level plus one.\n\n    @param {Summary} summary\n    @param {String|SummaryArticle} origin\n    @param {String|SummaryArticle} afterTarget\n    @return {Summary}\n*/\nfunction moveArticleAfter(summary, origin, afterTarget) {\n    // Coerce to level\n    const originLevel = is.string(origin) ? origin : origin.getLevel();\n    const afterTargetLevel = is.string(afterTarget) ? afterTarget : afterTarget.getLevel();\n    const article = summary.getByLevel(originLevel);\n\n    const targetLevel = increment(afterTargetLevel);\n\n    if (targetLevel < origin) {\n        // Remove first\n        const removed = removeArticle(summary, originLevel);\n        // Insert then\n        return insertArticle(removed, article, targetLevel);\n    } else {\n        // Insert right after first\n        const inserted = insertArticle(summary, article, targetLevel);\n        // Remove old one\n        return removeArticle(inserted, originLevel);\n    }\n}\n\n/**\n    @param {String}\n    @return {Array<Number>}\n */\nfunction levelToArray(l) {\n    return l.split('.').map((char) => {\n        return parseInt(char, 10);\n    });\n}\n\n/**\n    @param {Array<Number>}\n    @return {String}\n */\nfunction arrayToLevel(a) {\n    return a.join('.');\n}\n\nfunction increment(level) {\n    level = levelToArray(level);\n    level[level.length - 1]++;\n    return arrayToLevel(level);\n}\n\nmodule.exports = moveArticleAfter;\n"]}