{"version":3,"sources":["../../../src/modifiers/config/removePlugin.js"],"names":["togglePlugin","require","isDefaultPlugin","removePlugin","config","pluginName","deps","getPluginDependencies","filterNot","dep","getName","setPluginDependencies","module","exports"],"mappings":";;AAAA,IAAMA,eAAeC,QAAQ,gBAAR,CAArB;AACA,IAAMC,kBAAkBD,QAAQ,mBAAR,CAAxB;;AAEA;;;;;;AAMA,SAASE,YAAT,CAAsBC,MAAtB,EAA8BC,UAA9B,EAA0C;AACtC,QAAIC,OAAOF,OAAOG,qBAAP,EAAX;;AAEA;AACA,QAAIL,gBAAgBG,UAAhB,CAAJ,EAAiC;AAC7B,eAAOL,aAAaI,MAAb,EAAqBC,UAArB,EAAiC,KAAjC,CAAP;AACH;;AAED;AACAC,WAAOA,KAAKE,SAAL,CAAe,UAACC,GAAD,EAAS;AAC3B,eAAOA,IAAIC,OAAJ,OAAkBL,UAAzB;AACH,KAFM,CAAP;AAGA,WAAOD,OAAOO,qBAAP,CAA6BL,IAA7B,CAAP;AACH;;AAEDM,OAAOC,OAAP,GAAiBV,YAAjB","file":"removePlugin.js","sourcesContent":["const togglePlugin = require('./togglePlugin');\nconst isDefaultPlugin = require('./isDefaultPlugin');\n\n/**\n * Remove a plugin from a book's configuration\n * @param {Config} config\n * @param {String} plugin\n * @return {Config}\n */\nfunction removePlugin(config, pluginName) {\n    let deps = config.getPluginDependencies();\n\n    // For default plugin, we have to disable it instead of removing from the list\n    if (isDefaultPlugin(pluginName)) {\n        return togglePlugin(config, pluginName, false);\n    }\n\n    // Remove the dependency from the list\n    deps = deps.filterNot((dep) => {\n        return dep.getName() === pluginName;\n    });\n    return config.setPluginDependencies(deps);\n}\n\nmodule.exports = removePlugin;\n"]}