{"version":3,"sources":["../../src/fs/node.js"],"names":["path","require","Immutable","fresh","fs","FS","fsReadDir","folder","readdir","then","files","List","map","file","stat","statSync","join","isDirectory","sep","filter","Boolean","fsLoadObject","filename","module","exports","createNodeFS","root","create","fsExists","exists","fsReadFile","readFile","fsStatFile","fsReadAsStream","readStream"],"mappings":";;AAAA,IAAMA,OAAOC,QAAQ,MAAR,CAAb;AACA,IAAMC,YAAYD,QAAQ,WAAR,CAAlB;AACA,IAAME,QAAQF,QAAQ,eAAR,CAAd;;AAEA,IAAMG,KAAKH,QAAQ,aAAR,CAAX;AACA,IAAMI,KAAKJ,QAAQ,cAAR,CAAX;;AAEA,SAASK,SAAT,CAAmBC,MAAnB,EAA2B;AACvB,WAAOH,GAAGI,OAAH,CAAWD,MAAX,EACNE,IADM,CACD,UAACC,KAAD,EAAW;AACbA,gBAAQR,UAAUS,IAAV,CAAeD,KAAf,CAAR;;AAEA,eAAOA,MACFE,GADE,CACE,UAACC,IAAD,EAAU;AACX,gBAAIA,QAAQ,GAAR,IAAeA,QAAQ,IAA3B,EAAiC;;AAEjC,gBAAMC,OAAOV,GAAGW,QAAH,CAAYf,KAAKgB,IAAL,CAAUT,MAAV,EAAkBM,IAAlB,CAAZ,CAAb;AACA,gBAAIC,KAAKG,WAAL,EAAJ,EAAwBJ,OAAOA,OAAOb,KAAKkB,GAAnB;AACxB,mBAAOL,IAAP;AACH,SAPE,EAQFM,MARE,CAQK,UAACN,IAAD,EAAU;AACd,mBAAOO,QAAQP,IAAR,CAAP;AACH,SAVE,CAAP;AAWH,KAfM,CAAP;AAgBH;;AAED,SAASQ,YAAT,CAAsBC,QAAtB,EAAgC;AAC5B,WAAOnB,MAAMmB,QAAN,EAAgBrB,OAAhB,CAAP;AACH;;AAEDsB,OAAOC,OAAP,GAAiB,SAASC,YAAT,CAAsBC,IAAtB,EAA4B;AACzC,WAAOrB,GAAGsB,MAAH,CAAU;AACbD,kBADa;;AAGbE,kBAAUxB,GAAGyB,MAHA;AAIbC,oBAAY1B,GAAG2B,QAJF;AAKbC,oBAAY5B,GAAGU,IALF;AAMbR,4BANa;AAObe,kCAPa;AAQbY,wBAAgB7B,GAAG8B;AARN,KAAV,CAAP;AAUH,CAXD","file":"node.js","sourcesContent":["const path = require('path');\nconst Immutable = require('immutable');\nconst fresh = require('fresh-require');\n\nconst fs = require('../utils/fs');\nconst FS = require('../models/fs');\n\nfunction fsReadDir(folder) {\n    return fs.readdir(folder)\n    .then((files) => {\n        files = Immutable.List(files);\n\n        return files\n            .map((file) => {\n                if (file == '.' || file == '..') return;\n\n                const stat = fs.statSync(path.join(folder, file));\n                if (stat.isDirectory()) file = file + path.sep;\n                return file;\n            })\n            .filter((file) => {\n                return Boolean(file);\n            });\n    });\n}\n\nfunction fsLoadObject(filename) {\n    return fresh(filename, require);\n}\n\nmodule.exports = function createNodeFS(root) {\n    return FS.create({\n        root,\n\n        fsExists: fs.exists,\n        fsReadFile: fs.readFile,\n        fsStatFile: fs.stat,\n        fsReadDir,\n        fsLoadObject,\n        fsReadAsStream: fs.readStream\n    });\n};\n"]}