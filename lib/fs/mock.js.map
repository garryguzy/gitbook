{"version":3,"sources":["../../src/fs/mock.js"],"names":["path","require","is","Buffer","Immutable","FS","error","createMockFS","files","root","fromJS","mtime","Date","getFile","filePath","parts","normalize","split","sep","reduce","list","part","i","file","get","string","length","fsExists","Boolean","fsReadFile","FileNotFoundError","filename","fsStatFile","fsReadDir","dir","map","content","name","valueSeq","create","module","exports"],"mappings":";;AAAA,IAAMA,OAAOC,QAAQ,MAAR,CAAb;AACA,IAAMC,KAAKD,QAAQ,IAAR,CAAX;AACA,IAAME,SAASF,QAAQ,QAAR,EAAkBE,MAAjC;AACA,IAAMC,YAAYH,QAAQ,WAAR,CAAlB;;AAEA,IAAMI,KAAKJ,QAAQ,cAAR,CAAX;AACA,IAAMK,QAAQL,QAAQ,gBAAR,CAAd;;AAEA;;;;;AAKA,SAASM,YAAT,CAAsBC,KAAtB,EAAwC;AAAA,QAAXC,IAAW,uEAAJ,EAAI;;AACpCD,YAAQJ,UAAUM,MAAV,CAAiBF,KAAjB,CAAR;AACA,QAAMG,QAAQ,IAAIC,IAAJ,EAAd;;AAEA,aAASC,OAAT,CAAiBC,QAAjB,EAA2B;AACvB,YAAMC,QAAQf,KAAKgB,SAAL,CAAeF,QAAf,EAAyBG,KAAzB,CAA+BjB,KAAKkB,GAApC,CAAd;AACA,eAAOH,MAAMI,MAAN,CAAa,UAACC,IAAD,EAAOC,IAAP,EAAaC,CAAb,EAAmB;AACnC,gBAAI,CAACF,IAAL,EAAW,OAAO,IAAP;;AAEX,gBAAIG,aAAJ;;AAEA,gBAAI,CAACF,IAAD,IAASA,SAAS,GAAtB,EAA2BE,OAAOH,IAAP,CAA3B,KACKG,OAAOH,KAAKI,GAAL,CAASH,IAAT,CAAP;;AAEL,gBAAI,CAACE,IAAL,EAAW,OAAO,IAAP;;AAEX,gBAAIrB,GAAGuB,MAAH,CAAUF,IAAV,CAAJ,EAAqB;AACjB,oBAAID,MAAOP,MAAMW,MAAN,GAAe,CAA1B,EAA8B,OAAOH,IAAP,CAA9B,KACK,OAAO,IAAP;AACR;;AAED,mBAAOA,IAAP;AACH,SAhBM,EAgBJf,KAhBI,CAAP;AAiBH;;AAED,aAASmB,QAAT,CAAkBb,QAAlB,EAA4B;AACxB,eAAOc,QAAQf,QAAQC,QAAR,MAAsB,IAA9B,CAAP;AACH;;AAED,aAASe,UAAT,CAAoBf,QAApB,EAA8B;AAC1B,YAAMS,OAAOV,QAAQC,QAAR,CAAb;AACA,YAAI,CAACZ,GAAGuB,MAAH,CAAUF,IAAV,CAAL,EAAsB;AAClB,kBAAMjB,MAAMwB,iBAAN,CAAwB;AAC1BC,0BAAUjB;AADgB,aAAxB,CAAN;AAGH;;AAED,eAAO,IAAIX,MAAJ,CAAWoB,IAAX,EAAiB,MAAjB,CAAP;AACH;;AAED,aAASS,UAAT,CAAoBlB,QAApB,EAA8B;AAC1B,YAAMS,OAAOV,QAAQC,QAAR,CAAb;AACA,YAAI,CAACS,IAAL,EAAW;AACP,kBAAMjB,MAAMwB,iBAAN,CAAwB;AAC1BC,0BAAUjB;AADgB,aAAxB,CAAN;AAGH;;AAED,eAAO;AACHH;AADG,SAAP;AAGH;;AAED,aAASsB,SAAT,CAAmBnB,QAAnB,EAA6B;AACzB,YAAMoB,MAAMrB,QAAQC,QAAR,CAAZ;AACA,YAAI,CAACoB,GAAD,IAAQhC,GAAGuB,MAAH,CAAUS,GAAV,CAAZ,EAA4B;AACxB,kBAAM5B,MAAMwB,iBAAN,CAAwB;AAC1BC,0BAAUjB;AADgB,aAAxB,CAAN;AAGH;;AAED,eAAOoB,IACFC,GADE,CACE,UAACC,OAAD,EAAUC,IAAV,EAAmB;AACpB,gBAAI,CAACnC,GAAGuB,MAAH,CAAUW,OAAV,CAAL,EAAyB;AACrBC,uBAAOA,OAAO,GAAd;AACH;;AAED,mBAAOA,IAAP;AACH,SAPE,EAQFC,QARE,EAAP;AASH;;AAED,WAAOjC,GAAGkC,MAAH,CAAU;AACb9B,cAAM,EADO;AAEbkB,0BAFa;AAGbE,8BAHa;AAIbG,8BAJa;AAKbC;AALa,KAAV,CAAP;AAOH;;AAEDO,OAAOC,OAAP,GAAiBlC,YAAjB","file":"mock.js","sourcesContent":["const path = require('path');\nconst is = require('is');\nconst Buffer = require('buffer').Buffer;\nconst Immutable = require('immutable');\n\nconst FS = require('../models/fs');\nconst error = require('../utils/error');\n\n/**\n * Create a fake filesystem for unit testing GitBook.\n * @param {Map<String:String|Map>}\n * @return {FS}\n */\nfunction createMockFS(files, root = '') {\n    files = Immutable.fromJS(files);\n    const mtime = new Date();\n\n    function getFile(filePath) {\n        const parts = path.normalize(filePath).split(path.sep);\n        return parts.reduce((list, part, i) => {\n            if (!list) return null;\n\n            let file;\n\n            if (!part || part === '.') file = list;\n            else file = list.get(part);\n\n            if (!file) return null;\n\n            if (is.string(file)) {\n                if (i === (parts.length - 1)) return file;\n                else return null;\n            }\n\n            return file;\n        }, files);\n    }\n\n    function fsExists(filePath) {\n        return Boolean(getFile(filePath) !== null);\n    }\n\n    function fsReadFile(filePath) {\n        const file = getFile(filePath);\n        if (!is.string(file)) {\n            throw error.FileNotFoundError({\n                filename: filePath\n            });\n        }\n\n        return new Buffer(file, 'utf8');\n    }\n\n    function fsStatFile(filePath) {\n        const file = getFile(filePath);\n        if (!file) {\n            throw error.FileNotFoundError({\n                filename: filePath\n            });\n        }\n\n        return {\n            mtime\n        };\n    }\n\n    function fsReadDir(filePath) {\n        const dir = getFile(filePath);\n        if (!dir || is.string(dir)) {\n            throw error.FileNotFoundError({\n                filename: filePath\n            });\n        }\n\n        return dir\n            .map((content, name) => {\n                if (!is.string(content)) {\n                    name = name + '/';\n                }\n\n                return name;\n            })\n            .valueSeq();\n    }\n\n    return FS.create({\n        root: '',\n        fsExists,\n        fsReadFile,\n        fsStatFile,\n        fsReadDir\n    });\n}\n\nmodule.exports = createMockFS;\n"]}