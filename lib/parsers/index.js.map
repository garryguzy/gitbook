{"version":3,"sources":["../../src/parsers/index.js"],"names":["path","require","Map","PARSERS","markdown","FILE_EXTENSIONS","reduce","result","parser","concat","getParser","name","get","getByExt","ext","find","includes","getForFile","filename","extname","module","exports"],"mappings":";;AAAA,IAAMA,OAAOC,QAAQ,MAAR,CAAb;;eACgBA,QAAQ,WAAR,C;IAARC,G,YAAAA,G;;AAER,IAAMC,UAAU,IAAID,GAAJ,CAAQ;AACpBE,cAAUH,QAAQ,YAAR;AACV;AAFoB,CAAR,CAAhB;;AAKA,IAAMI,kBAAkBF,QAAQG,MAAR,CAAe,UAACC,MAAD,EAASC,MAAT;AAAA,WAAoBD,OAAOE,MAAP,CAAcD,OAAOH,eAArB,CAApB;AAAA,CAAf,EAA0E,EAA1E,CAAxB;;AAEA;;;;;;AAMA,SAASK,SAAT,CAAmBC,IAAnB,EAAyB;AACrB,WAAOR,QAAQS,GAAR,CAAYD,IAAZ,CAAP;AACH;;AAED;;;;;;AAMA,SAASE,QAAT,CAAkBC,GAAlB,EAAuB;AACnB,WAAOX,QAAQY,IAAR,CAAa;AAAA,eAAUP,OAAOH,eAAP,CAAuBW,QAAvB,CAAgCF,GAAhC,CAAV;AAAA,KAAb,CAAP;AACH;;AAED;;;;;;AAMA,SAASG,UAAT,CAAoBC,QAApB,EAA8B;AAC1B,WAAOL,SAASb,KAAKmB,OAAL,CAAaD,QAAb,CAAT,CAAP;AACH;;AAEDE,OAAOC,OAAP,GAAiB;AACbhB,oCADa;AAEbO,SAAKF,SAFQ;AAGbG,sBAHa;AAIbI;AAJa,CAAjB","file":"index.js","sourcesContent":["const path = require('path');\nconst { Map } = require('immutable');\n\nconst PARSERS = new Map({\n    markdown: require('./markdown')\n    // asciidoc: require('./asciidoc')\n});\n\nconst FILE_EXTENSIONS = PARSERS.reduce((result, parser) => result.concat(parser.FILE_EXTENSIONS), []);\n\n/**\n * Return a specific parser by its name\n *\n * @param {String} name\n * @return {Parser} parser?\n */\nfunction getParser(name) {\n    return PARSERS.get(name);\n}\n\n/**\n * Return a specific parser according to an extension\n *\n * @param {String} ext\n * @return {Parser} parser?\n */\nfunction getByExt(ext) {\n    return PARSERS.find(parser => parser.FILE_EXTENSIONS.includes(ext));\n}\n\n/**\n * Return parser for a file\n *\n * @param {String} ext\n * @return {Parser} parser?\n */\nfunction getForFile(filename) {\n    return getByExt(path.extname(filename));\n}\n\nmodule.exports = {\n    FILE_EXTENSIONS,\n    get: getParser,\n    getByExt,\n    getForFile\n};\n"]}