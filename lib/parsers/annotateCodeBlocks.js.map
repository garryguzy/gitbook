{"version":3,"sources":["../../src/parsers/annotateCodeBlocks.js"],"names":["require","Block","Text","Inline","INLINES","BLOCKS","MARKS","RAW_START","RAW_END","createTemplatingNode","expr","create","type","TEMPLATE","data","text","escapeCodeBlock","block","TEXT","nodes","escapeTextNode","node","ranges","getRanges","reduce","result","range","hasCode","marks","some","mark","CODE","createFromRanges","concat","annotateNode","parent","levelRaw","out","toJS","kind","merge","annotateCodeBlocks","document","module","exports"],"mappings":"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","file":"annotateCodeBlocks.js","sourcesContent":["const { Block, Text, Inline, INLINES, BLOCKS, MARKS } = require('markup-it');\n\nconst RAW_START = 'raw';\nconst RAW_END   = 'endraw';\n\n/**\n * Create a templating node.\n * @param {String} expr\n * @return {Node}\n */\nfunction createTemplatingNode(expr) {\n    return Inline.create({\n        type: INLINES.TEMPLATE,\n        data: {\n            type: 'expr',\n            text: expr\n        }\n    });\n}\n\n/**\n * Escape a code block.\n * @param  {Block} block\n * @return {Array<Node>} blocks\n */\nfunction escapeCodeBlock(block) {\n    return [\n        Block.create({\n            type: BLOCKS.TEXT,\n            nodes: [\n                createTemplatingNode(RAW_START)\n            ]\n        }),\n        block,\n        Block.create({\n            type: BLOCKS.TEXT,\n            nodes: [\n                createTemplatingNode(RAW_END)\n            ]\n        })\n    ];\n}\n\n\n/**\n * Escape a text node.\n * @param  {Text} node\n * @return {Array<Node>} nodes\n */\nfunction escapeTextNode(node) {\n    const ranges = node.getRanges();\n\n    const nodes = ranges.reduce((result, range) => {\n        const hasCode = range.marks.some(mark => mark.type == MARKS.CODE);\n        const text = Text.createFromRanges([ range ]);\n\n        if (hasCode) {\n            return result.concat([\n                createTemplatingNode(RAW_START),\n                text,\n                createTemplatingNode(RAW_END)\n            ]);\n        }\n\n        return result.concat([ text ]);\n    }, []);\n\n    return nodes;\n}\n\n/**\n * Annotate a block container.\n * @param  {Node} parent\n * @param  {Number} levelRaw\n * @return {Node} node\n * @return {Number} levelRaw\n */\nfunction annotateNode(parent, levelRaw) {\n    let { nodes } = parent;\n\n    nodes = nodes.reduce((out, node) => {\n        if (node.type === INLINES.TEMPLATE) {\n            const { type, text } = node.data.toJS();\n\n            if (type === 'expr') {\n                if (text === 'raw') {\n                    levelRaw = levelRaw + 1;\n                } else if (text == 'endraw') {\n                    levelRaw = 0;\n                }\n            }\n\n            return out.concat([ node ]);\n        }\n\n        else if (node.type === BLOCKS.CODE) {\n            return out.concat(\n                levelRaw == 0 ? escapeCodeBlock(node) : [ node ]\n            );\n        }\n\n        else if (node.kind == 'text') {\n            return out.concat(\n                levelRaw == 0 ? escapeTextNode(node) : [ node ]\n            );\n        }\n\n        const result = annotateNode(node, levelRaw);\n        levelRaw = result.levelRaw;\n        return out.concat([result.node]);\n    }, []);\n\n    return {\n        levelRaw,\n        node: parent.merge({ nodes })\n    };\n}\n\n/**\n * Add templating \"raw\" to code blocks to\n * avoid nunjucks processing their content.\n *\n * @param {Document} document\n * @return {Document}\n */\nfunction annotateCodeBlocks(document) {\n    return annotateNode(document, 0).node;\n}\n\nmodule.exports = annotateCodeBlocks;\n"]}