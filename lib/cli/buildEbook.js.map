{"version":3,"sources":["../../src/cli/buildEbook.js"],"names":["path","require","tmp","Promise","fs","Parse","Output","options","getBook","module","exports","format","name","description","log","exec","args","kwargs","extension","outputFile","outputFolder","dirSync","book","logger","getLogger","Generator","getGenerator","parseBook","then","resultBook","generate","root","output","languages","getLanguages","isMultilingual","forEach","getList","lang","langID","getID","langOutputFile","join","dirname","basename","copy","resolve","thenResolve","getCount","count","info","ok","debug","promise","rmDir"],"mappings":";;AAAA,IAAMA,OAAOC,QAAQ,MAAR,CAAb;AACA,IAAMC,MAAMD,QAAQ,KAAR,CAAZ;;AAEA,IAAME,UAAUF,QAAQ,kBAAR,CAAhB;AACA,IAAMG,KAAKH,QAAQ,aAAR,CAAX;AACA,IAAMI,QAAQJ,QAAQ,UAAR,CAAd;AACA,IAAMK,SAASL,QAAQ,WAAR,CAAf;;AAEA,IAAMM,UAAUN,QAAQ,WAAR,CAAhB;AACA,IAAMO,UAAUP,QAAQ,WAAR,CAAhB;;AAGAQ,OAAOC,OAAP,GAAiB,UAASC,MAAT,EAAiB;AAC9B,WAAO;AACHC,cAAOD,SAAS,kBADb;AAEHE,qBAAa,iCAFV;AAGHN,iBAAS,CACLA,QAAQO,GADH,CAHN;AAMHC,YANG,gBAMEC,IANF,EAMQC,MANR,EAMgB;AACf,gBAAMC,YAAY,MAAMP,MAAxB;;AAEA;AACA,gBAAMQ,aAAaH,KAAK,CAAL,KAAY,SAASE,SAAxC;;AAEA;AACA,gBAAME,eAAelB,IAAImB,OAAJ,GAAcT,IAAnC;;AAEA,gBAAMU,OAAOd,QAAQQ,IAAR,EAAcC,MAAd,CAAb;AACA,gBAAMM,SAASD,KAAKE,SAAL,EAAf;AACA,gBAAMC,YAAYnB,OAAOoB,YAAP,CAAoB,OAApB,CAAlB;;AAEA,mBAAOrB,MAAMsB,SAAN,CAAgBL,IAAhB,EACNM,IADM,CACD,UAACC,UAAD,EAAgB;AAClB,uBAAOvB,OAAOwB,QAAP,CAAgBL,SAAhB,EAA2BI,UAA3B,EAAuC;AAC1CE,0BAAMX,YADoC;AAE1CT;AAF0C,iBAAvC,CAAP;AAIH,aANM;;AAQP;AARO,aASNiB,IATM,CASD,UAACI,MAAD,EAAY;AACd,oBAAMV,OAAOU,OAAOxB,OAAP,EAAb;AACA,oBAAMyB,YAAYX,KAAKY,YAAL,EAAlB;;AAEA,oBAAIZ,KAAKa,cAAL,EAAJ,EAA2B;AACvB,2BAAOhC,QAAQiC,OAAR,CAAgBH,UAAUI,OAAV,EAAhB,EAAqC,UAACC,IAAD,EAAU;AAClD,4BAAMC,SAASD,KAAKE,KAAL,EAAf;;AAEA,4BAAMC,iBAAiBzC,KAAK0C,IAAL,CACnB1C,KAAK2C,OAAL,CAAaxB,UAAb,CADmB,EAEnBnB,KAAK4C,QAAL,CAAczB,UAAd,EAA0BD,SAA1B,IAAuC,GAAvC,GAA6CqB,MAA7C,GAAsDrB,SAFnC,CAAvB;;AAKA,+BAAOd,GAAGyC,IAAH,CACH7C,KAAK8C,OAAL,CAAa1B,YAAb,EAA2BmB,MAA3B,EAAmC,UAAUrB,SAA7C,CADG,EAEHuB,cAFG,CAAP;AAIH,qBAZM,EAaNM,WAbM,CAaMd,UAAUe,QAAV,EAbN,CAAP;AAcH,iBAfD,MAeO;AACH,2BAAO5C,GAAGyC,IAAH,CACH7C,KAAK8C,OAAL,CAAa1B,YAAb,EAA2B,UAAUF,SAArC,CADG,EAEHC,UAFG,EAGL4B,WAHK,CAGO,CAHP,CAAP;AAIH;AACJ,aAlCM;;AAoCP;AApCO,aAqCNnB,IArCM,CAqCD,UAACqB,KAAD,EAAW;AACb1B,uBAAO2B,IAAP,CAAYC,EAAZ,CAAeF,QAAQ,oBAAvB;;AAEA1B,uBAAO6B,KAAP,CAAa,iBAAb;AACA,uBAAO7B,OAAO6B,KAAP,CAAaC,OAAb,CAAqBjD,GAAGkD,KAAH,CAASlC,YAAT,CAArB,CAAP;AACH,aA1CM,CAAP;AA2CH;AA9DE,KAAP;AAgEH,CAjED","file":"buildEbook.js","sourcesContent":["const path = require('path');\nconst tmp = require('tmp');\n\nconst Promise = require('../utils/promise');\nconst fs = require('../utils/fs');\nconst Parse = require('../parse');\nconst Output = require('../output');\n\nconst options = require('./options');\nconst getBook = require('./getBook');\n\n\nmodule.exports = function(format) {\n    return {\n        name: (format + ' [book] [output]'),\n        description: 'build a book into an ebook file',\n        options: [\n            options.log\n        ],\n        exec(args, kwargs) {\n            const extension = '.' + format;\n\n            // Output file will be stored in\n            const outputFile = args[1] || ('book' + extension);\n\n            // Create temporary directory\n            const outputFolder = tmp.dirSync().name;\n\n            const book = getBook(args, kwargs);\n            const logger = book.getLogger();\n            const Generator = Output.getGenerator('ebook');\n\n            return Parse.parseBook(book)\n            .then((resultBook) => {\n                return Output.generate(Generator, resultBook, {\n                    root: outputFolder,\n                    format\n                });\n            })\n\n            // Extract ebook file\n            .then((output) => {\n                const book = output.getBook();\n                const languages = book.getLanguages();\n\n                if (book.isMultilingual()) {\n                    return Promise.forEach(languages.getList(), (lang) => {\n                        const langID = lang.getID();\n\n                        const langOutputFile = path.join(\n                            path.dirname(outputFile),\n                            path.basename(outputFile, extension) + '_' + langID + extension\n                        );\n\n                        return fs.copy(\n                            path.resolve(outputFolder, langID, 'index' + extension),\n                            langOutputFile\n                        );\n                    })\n                    .thenResolve(languages.getCount());\n                } else {\n                    return fs.copy(\n                        path.resolve(outputFolder, 'index' + extension),\n                        outputFile\n                    ).thenResolve(1);\n                }\n            })\n\n            // Log end\n            .then((count) => {\n                logger.info.ok(count + ' file(s) generated');\n\n                logger.debug('cleaning up... ');\n                return logger.debug.promise(fs.rmDir(outputFolder));\n            });\n        }\n    };\n};\n"]}