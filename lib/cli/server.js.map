{"version":3,"sources":["../../src/cli/server.js"],"names":["events","require","http","send","url","Promise","Server","running","dir","port","sockets","that","isRunning","d","defer","close","err","emit","reject","resolve","i","length","destroy","promise","pre","stop","then","createServer","req","res","error","statusCode","status","end","message","redirect","resultURL","urlTransform","parsed","pathname","setHeader","parse","root","on","pipe","socket","push","setTimeout","splice","indexOf","listen","EventEmitter","uri","fn","format","module","exports"],"mappings":"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","file":"server.js","sourcesContent":["const events = require('events');\nconst http = require('http');\nconst send = require('send');\nconst url = require('url');\n\nconst Promise = require('../utils/promise');\n\nclass Server extends events.EventEmitter {\n    constructor() {\n        super();\n        this.running = null;\n        this.dir = null;\n        this.port = 0;\n        this.sockets = [];\n    }\n\n    /**\n     * Return true if the server is running\n     * @return {Boolean}\n     */\n    isRunning() {\n        return !!this.running;\n    }\n\n    /**\n     * Stop the server\n     * @return {Promise}\n     */\n    stop() {\n        const that = this;\n        if (!this.isRunning()) return Promise();\n\n        const d = Promise.defer();\n        this.running.close((err) => {\n            that.running = null;\n            that.emit('state', false);\n\n            if (err) d.reject(err);\n            else d.resolve();\n        });\n\n        for (let i = 0; i < this.sockets.length; i++) {\n            this.sockets[i].destroy();\n        }\n\n        return d.promise;\n    }\n\n    /**\n     * Start the server\n     * @return {Promise}\n     */\n    start(dir, port) {\n        const that = this;\n        let pre = Promise();\n        port = port || 8004;\n\n        if (that.isRunning()) pre = this.stop();\n        return pre\n        .then(() => {\n            const d = Promise.defer();\n\n            that.running = http.createServer((req, res) => {\n                // Render error\n                function error(err) {\n                    res.statusCode = err.status || 500;\n                    res.end(err.message);\n                }\n\n                // Redirect to directory's index.html\n                function redirect() {\n                    const resultURL = urlTransform(req.url, (parsed) => {\n                        parsed.pathname += '/';\n                        return parsed;\n                    });\n\n                    res.statusCode = 301;\n                    res.setHeader('Location', resultURL);\n                    res.end('Redirecting to ' + resultURL);\n                }\n\n                res.setHeader('X-Current-Location', req.url);\n\n                // Send file\n                send(req, url.parse(req.url).pathname, {\n                    root: dir\n                })\n                .on('error', error)\n                .on('directory', redirect)\n                .pipe(res);\n            });\n\n            that.running.on('connection', (socket) => {\n                that.sockets.push(socket);\n                socket.setTimeout(4000);\n                socket.on('close', () => {\n                    that.sockets.splice(that.sockets.indexOf(socket), 1);\n                });\n            });\n\n            that.running.listen(port, (err) => {\n                if (err) return d.reject(err);\n\n                that.port = port;\n                that.dir = dir;\n                that.emit('state', true);\n                d.resolve();\n            });\n\n            return d.promise;\n        });\n    }\n}\n\n/**\n * urlTransform is a helper function that allows a function to transform\n * a url string in it's parsed form and returns the new url as a string\n *\n * @param {String} uri\n * @param {Function} fn\n * @return {String}\n */\nfunction urlTransform(uri, fn) {\n    return url.format(fn(url.parse(uri)));\n}\n\nmodule.exports = Server;\n"]}