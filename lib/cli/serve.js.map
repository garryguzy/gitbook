{"version":3,"sources":["../../src/cli/serve.js"],"names":["tinylr","require","open","Parse","Output","ConfigModifier","Config","Promise","options","getBook","getOutputFolder","Server","watch","server","lrServer","lrPath","waitForCtrlC","d","defer","process","on","resolve","promise","generateBook","args","kwargs","port","outputFolder","book","Generator","getGenerator","format","browser","hasWatch","hasLiveReloading","hasOpen","isRunning","console","log","stop","then","parseBook","resultBook","config","getConfig","addPlugin","set","generate","root","start","changed","body","files","getRoot","filepath","module","exports","name","description","defaults","exec","nfcall","listen","bind","lrport"],"mappings":"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","file":"serve.js","sourcesContent":["/* eslint-disable no-console */\n\nconst tinylr = require('tiny-lr');\nconst open = require('open');\n\nconst Parse = require('../parse');\nconst Output = require('../output');\nconst ConfigModifier = require('../modifiers').Config;\n\nconst Promise = require('../utils/promise');\n\nconst options = require('./options');\nconst getBook = require('./getBook');\nconst getOutputFolder = require('./getOutputFolder');\nconst Server = require('./server');\nconst watch = require('./watch');\n\nlet server, lrServer, lrPath;\n\nfunction waitForCtrlC() {\n    const d = Promise.defer();\n\n    process.on('SIGINT', () => {\n        d.resolve();\n    });\n\n    return d.promise;\n}\n\n\nfunction generateBook(args, kwargs) {\n    const port = kwargs.port;\n    const outputFolder = getOutputFolder(args);\n    const book = getBook(args, kwargs);\n    const Generator = Output.getGenerator(kwargs.format);\n    const browser = kwargs['browser'];\n\n    const hasWatch = kwargs['watch'];\n    const hasLiveReloading = kwargs['live'];\n    const hasOpen = kwargs['open'];\n\n    // Stop server if running\n    if (server.isRunning()) console.log('Stopping server');\n\n    return server.stop()\n    .then(() => {\n        return Parse.parseBook(book)\n        .then((resultBook) => {\n            if (hasLiveReloading) {\n                // Enable livereload plugin\n                let config = resultBook.getConfig();\n                config = ConfigModifier.addPlugin(config, 'livereload');\n                resultBook = resultBook.set('config', config);\n            }\n\n            return Output.generate(Generator, resultBook, {\n                root: outputFolder\n            });\n        });\n    })\n    .then(() => {\n        console.log();\n        console.log('Starting server ...');\n        return server.start(outputFolder, port);\n    })\n    .then(() => {\n        console.log('Serving book on http://localhost:' + port);\n\n        if (lrPath && hasLiveReloading) {\n            // trigger livereload\n            lrServer.changed({\n                body: {\n                    files: [lrPath]\n                }\n            });\n        }\n\n        if (hasOpen) {\n            open('http://localhost:' + port, browser);\n        }\n    })\n    .then(() => {\n        if (!hasWatch) {\n            return waitForCtrlC();\n        }\n\n        return watch(book.getRoot())\n        .then((filepath) => {\n            // set livereload path\n            lrPath = filepath;\n            console.log('Restart after change in file', filepath);\n            console.log('');\n            return generateBook(args, kwargs);\n        });\n    });\n}\n\nmodule.exports = {\n    name: 'serve [book] [output]',\n    description: 'serve the book as a website for testing',\n    options: [\n        {\n            name: 'port',\n            description: 'Port for server to listen on',\n            defaults: 4000\n        },\n        {\n            name: 'lrport',\n            description: 'Port for livereload server to listen on',\n            defaults: 35729\n        },\n        {\n            name: 'watch',\n            description: 'Enable file watcher and live reloading',\n            defaults: true\n        },\n        {\n            name: 'live',\n            description: 'Enable live reloading',\n            defaults: true\n        },\n        {\n            name: 'open',\n            description: 'Enable opening book in browser',\n            defaults: false\n        },\n        {\n            name: 'browser',\n            description: 'Specify browser for opening book',\n            defaults: ''\n        },\n        options.log,\n        options.format\n    ],\n    exec(args, kwargs) {\n        server = new Server();\n        const hasWatch = kwargs['watch'];\n        const hasLiveReloading = kwargs['live'];\n\n        return Promise()\n        .then(() => {\n            if (!hasWatch || !hasLiveReloading) {\n                return;\n            }\n\n            lrServer = tinylr({});\n            return Promise.nfcall(lrServer.listen.bind(lrServer), kwargs.lrport)\n            .then(() => {\n                console.log('Live reload server started on port:', kwargs.lrport);\n                console.log('Press CTRL+C to quit ...');\n                console.log('');\n\n            });\n        })\n        .then(() => {\n            return generateBook(args, kwargs);\n        });\n    }\n};\n"]}