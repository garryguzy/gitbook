{"version":3,"sources":["../../src/cli/parse.js"],"names":["options","require","getBook","Parse","printBook","book","logger","getLogger","config","getConfig","configFile","getFile","summary","getSummary","summaryFile","readme","getReadme","readmeFile","glossary","getGlossary","glossaryFile","exists","info","ln","getPath","printMultingualBook","languages","getLanguages","books","getBooks","size","forEach","lang","getTitle","get","getID","module","exports","name","description","log","exec","args","kwargs","parseBook","then","resultBook","rootFolder","getRoot","contentFolder","getContentRoot","isMultilingual"],"mappings":";;AAAA,IAAMA,UAAUC,QAAQ,WAAR,CAAhB;AACA,IAAMC,UAAUD,QAAQ,WAAR,CAAhB;;AAEA,IAAME,QAAQF,QAAQ,UAAR,CAAd;;AAEA,SAASG,SAAT,CAAmBC,IAAnB,EAAyB;AACrB,QAAMC,SAASD,KAAKE,SAAL,EAAf;;AAEA,QAAMC,SAASH,KAAKI,SAAL,EAAf;AACA,QAAMC,aAAaF,OAAOG,OAAP,EAAnB;;AAEA,QAAMC,UAAUP,KAAKQ,UAAL,EAAhB;AACA,QAAMC,cAAcF,QAAQD,OAAR,EAApB;;AAEA,QAAMI,SAASV,KAAKW,SAAL,EAAf;AACA,QAAMC,aAAaF,OAAOJ,OAAP,EAAnB;;AAEA,QAAMO,WAAWb,KAAKc,WAAL,EAAjB;AACA,QAAMC,eAAeF,SAASP,OAAT,EAArB;;AAEA,QAAID,WAAWW,MAAX,EAAJ,EAAyB;AACrBf,eAAOgB,IAAP,CAAYC,EAAZ,CAAe,uBAAf,EAAwCb,WAAWc,OAAX,EAAxC;AACH;;AAED,QAAIP,WAAWI,MAAX,EAAJ,EAAyB;AACrBf,eAAOgB,IAAP,CAAYC,EAAZ,CAAe,sBAAf,EAAuCN,WAAWO,OAAX,EAAvC;AACH;;AAED,QAAIJ,aAAaC,MAAb,EAAJ,EAA2B;AACvBf,eAAOgB,IAAP,CAAYC,EAAZ,CAAe,kBAAf,EAAmCH,aAAaI,OAAb,EAAnC;AACH;;AAED,QAAIV,YAAYO,MAAZ,EAAJ,EAA0B;AACtBf,eAAOgB,IAAP,CAAYC,EAAZ,CAAe,2BAAf,EAA4CT,YAAYU,OAAZ,EAA5C;AACH;AACJ;;AAED,SAASC,mBAAT,CAA6BpB,IAA7B,EAAmC;AAC/B,QAAMC,SAASD,KAAKE,SAAL,EAAf;AACA,QAAMmB,YAAYrB,KAAKsB,YAAL,EAAlB;AACA,QAAMC,QAAQvB,KAAKwB,QAAL,EAAd;;AAEAvB,WAAOgB,IAAP,CAAYC,EAAZ,CAAeG,UAAUI,IAAV,GAAiB,YAAhC;;AAEAJ,cAAUK,OAAV,CAAkB,UAACC,IAAD,EAAU;AACxB1B,eAAOgB,IAAP,CAAYC,EAAZ,CAAe,WAAf,EAA4BS,KAAKC,QAAL,EAA5B;AACA7B,kBAAUwB,MAAMM,GAAN,CAAUF,KAAKG,KAAL,EAAV,CAAV;AACA7B,eAAOgB,IAAP,CAAYC,EAAZ,CAAe,EAAf;AACH,KAJD;AAKH;;AAEDa,OAAOC,OAAP,GAAiB;AACbC,UAAM,cADO;AAEbC,iBAAa,gDAFA;AAGbvC,aAAS,CACLA,QAAQwC,GADH,CAHI;AAMbC,QANa,gBAMRC,IANQ,EAMFC,MANE,EAMM;AACf,YAAMtC,OAAOH,QAAQwC,IAAR,EAAcC,MAAd,CAAb;AACA,YAAMrC,SAASD,KAAKE,SAAL,EAAf;;AAEA,eAAOJ,MAAMyC,SAAN,CAAgBvC,IAAhB,EACNwC,IADM,CACD,UAACC,UAAD,EAAgB;AAClB,gBAAMC,aAAa1C,KAAK2C,OAAL,EAAnB;AACA,gBAAMC,gBAAgB5C,KAAK6C,cAAL,EAAtB;;AAEA5C,mBAAOgB,IAAP,CAAYC,EAAZ,CAAe,kBAAf,EAAmCwB,UAAnC;AACA,gBAAIE,iBAAiBF,UAArB,EAAiC;AAC7BzC,uBAAOgB,IAAP,CAAYC,EAAZ,CAAe,qBAAf,EAAsC0B,aAAtC;AACH;;AAED,gBAAIH,WAAWK,cAAX,EAAJ,EAAiC;AAC7B1B,oCAAoBqB,UAApB;AACH,aAFD,MAEO;AACH1C,0BAAU0C,UAAV;AACH;AACJ,SAfM,CAAP;AAgBH;AA1BY,CAAjB","file":"parse.js","sourcesContent":["const options = require('./options');\nconst getBook = require('./getBook');\n\nconst Parse = require('../parse');\n\nfunction printBook(book) {\n    const logger = book.getLogger();\n\n    const config = book.getConfig();\n    const configFile = config.getFile();\n\n    const summary = book.getSummary();\n    const summaryFile = summary.getFile();\n\n    const readme = book.getReadme();\n    const readmeFile = readme.getFile();\n\n    const glossary = book.getGlossary();\n    const glossaryFile = glossary.getFile();\n\n    if (configFile.exists()) {\n        logger.info.ln('Configuration file is', configFile.getPath());\n    }\n\n    if (readmeFile.exists()) {\n        logger.info.ln('Introduction file is', readmeFile.getPath());\n    }\n\n    if (glossaryFile.exists()) {\n        logger.info.ln('Glossary file is', glossaryFile.getPath());\n    }\n\n    if (summaryFile.exists()) {\n        logger.info.ln('Table of Contents file is', summaryFile.getPath());\n    }\n}\n\nfunction printMultingualBook(book) {\n    const logger = book.getLogger();\n    const languages = book.getLanguages();\n    const books = book.getBooks();\n\n    logger.info.ln(languages.size + ' languages');\n\n    languages.forEach((lang) => {\n        logger.info.ln('Language:', lang.getTitle());\n        printBook(books.get(lang.getID()));\n        logger.info.ln('');\n    });\n}\n\nmodule.exports = {\n    name: 'parse [book]',\n    description: 'parse and print debug information about a book',\n    options: [\n        options.log\n    ],\n    exec(args, kwargs) {\n        const book = getBook(args, kwargs);\n        const logger = book.getLogger();\n\n        return Parse.parseBook(book)\n        .then((resultBook) => {\n            const rootFolder = book.getRoot();\n            const contentFolder = book.getContentRoot();\n\n            logger.info.ln('Book located in:', rootFolder);\n            if (contentFolder != rootFolder) {\n                logger.info.ln('Content located in:', contentFolder);\n            }\n\n            if (resultBook.isMultilingual()) {\n                printMultingualBook(resultBook);\n            } else {\n                printBook(resultBook);\n            }\n        });\n    }\n};\n"]}