{"version":3,"sources":["../../src/json/encodeState.js"],"names":["gitbook","require","encodeSummary","encodeGlossary","encodeReadme","encodeLanguages","encodePage","encodeFile","encodeStateToJSON","output","page","book","getBook","urls","getURLIndex","name","getGenerator","version","time","START_TIME","summary","getSummary","glossary","getGlossary","readme","getReadme","config","getConfig","getValues","toJS","languages","isMultilingual","getLanguages","getLanguage","undefined","file","getFile","module","exports"],"mappings":";;AAAA,IAAMA,UAAUC,QAAQ,YAAR,CAAhB;AACA,IAAMC,gBAAgBD,QAAQ,iBAAR,CAAtB;AACA,IAAME,iBAAiBF,QAAQ,kBAAR,CAAvB;AACA,IAAMG,eAAeH,QAAQ,gBAAR,CAArB;AACA,IAAMI,kBAAkBJ,QAAQ,mBAAR,CAAxB;AACA,IAAMK,aAAaL,QAAQ,cAAR,CAAnB;AACA,IAAMM,aAAaN,QAAQ,cAAR,CAAnB;;AAEA;;;;;;;;AAQA,SAASO,iBAAT,CAA2BC,MAA3B,EAAmCC,IAAnC,EAAyC;AACrC,QAAMC,OAAOF,OAAOG,OAAP,EAAb;AACA,QAAMC,OAAOJ,OAAOK,WAAP,EAAb;;AAEA,WAAO;AACHL,gBAAQ;AACJM,kBAAMN,OAAOO,YAAP;AADF,SADL;AAIHhB,iBAAS;AACLiB,qBAASjB,QAAQiB,OADZ;AAELC,kBAASlB,QAAQmB;AAFZ,SAJN;;AASHC,iBAASlB,cAAcS,KAAKU,UAAL,EAAd,EAAiCR,IAAjC,CATN;AAUHS,kBAAUnB,eAAeQ,KAAKY,WAAL,EAAf,EAAmCV,IAAnC,CAVP;AAWHW,gBAAQpB,aAAaO,KAAKc,SAAL,EAAb,EAA+BZ,IAA/B,CAXL;AAYHa,gBAAQf,KAAKgB,SAAL,GAAiBC,SAAjB,GAA6BC,IAA7B,EAZL;AAaHC,mBAAWnB,KAAKoB,cAAL,KACP1B,gBAAgBM,KAAKqB,YAAL,EAAhB,EAAqCrB,KAAKsB,WAAL,EAArC,EAAyDpB,IAAzD,CADO,GAC0DqB,SAdlE;;AAgBHxB,cAAMA,OAAOJ,WAAWI,IAAX,EAAiBC,KAAKU,UAAL,EAAjB,EAAoCR,IAApC,CAAP,GAAmDqB,SAhBtD;AAiBHC,cAAMzB,OAAOH,WAAWG,KAAK0B,OAAL,EAAX,EAA2BvB,IAA3B,CAAP,GAA0CqB;AAjB7C,KAAP;AAmBH;;AAEDG,OAAOC,OAAP,GAAiB9B,iBAAjB","file":"encodeState.js","sourcesContent":["const gitbook = require('../gitbook');\nconst encodeSummary = require('./encodeSummary');\nconst encodeGlossary = require('./encodeGlossary');\nconst encodeReadme = require('./encodeReadme');\nconst encodeLanguages = require('./encodeLanguages');\nconst encodePage = require('./encodePage');\nconst encodeFile = require('./encodeFile');\n\n/**\n * Encode context to JSON from an output instance.\n * This JSON representation is used as initial state for the redux store.\n *\n * @param  {Output} output\n * @param  {Page} page?\n * @return {JSON}\n */\nfunction encodeStateToJSON(output, page) {\n    const book = output.getBook();\n    const urls = output.getURLIndex();\n\n    return {\n        output: {\n            name: output.getGenerator()\n        },\n        gitbook: {\n            version: gitbook.version,\n            time:    gitbook.START_TIME\n        },\n\n        summary: encodeSummary(book.getSummary(), urls),\n        glossary: encodeGlossary(book.getGlossary(), urls),\n        readme: encodeReadme(book.getReadme(), urls),\n        config: book.getConfig().getValues().toJS(),\n        languages: book.isMultilingual() ?\n            encodeLanguages(book.getLanguages(), book.getLanguage(), urls) : undefined,\n\n        page: page ? encodePage(page, book.getSummary(), urls) : undefined,\n        file: page ? encodeFile(page.getFile(), urls) : undefined\n    };\n}\n\nmodule.exports = encodeStateToJSON;\n"]}