{"version":3,"sources":["../../src/json/encodeGlossary.js"],"names":["encodeFile","require","encodeGlossaryEntry","encodeGlossary","glossary","urls","file","getFile","entries","getEntries","map","toJS","module","exports"],"mappings":";;AAAA,IAAMA,aAAaC,QAAQ,cAAR,CAAnB;AACA,IAAMC,sBAAsBD,QAAQ,uBAAR,CAA5B;;AAEA;;;;;;;AAOA,SAASE,cAAT,CAAwBC,QAAxB,EAAkCC,IAAlC,EAAwC;AACpC,QAAMC,OAAOF,SAASG,OAAT,EAAb;AACA,QAAMC,UAAUJ,SAASK,UAAT,EAAhB;;AAEA,WAAO;AACHH,cAAMN,WAAWM,IAAX,EAAiBD,IAAjB,CADH;AAEHG,iBAASA,QACJE,GADI,CACAR,mBADA,EACqBS,IADrB;AAFN,KAAP;AAKH;;AAEDC,OAAOC,OAAP,GAAiBV,cAAjB","file":"encodeGlossary.js","sourcesContent":["const encodeFile = require('./encodeFile');\nconst encodeGlossaryEntry = require('./encodeGlossaryEntry');\n\n/**\n * Encode a glossary to JSON\n *\n * @param  {Glossary} glossary\n * @param  {URIIndex} urls\n * @return {JSON} json\n */\nfunction encodeGlossary(glossary, urls) {\n    const file = glossary.getFile();\n    const entries = glossary.getEntries();\n\n    return {\n        file: encodeFile(file, urls),\n        entries: entries\n            .map(encodeGlossaryEntry).toJS()\n    };\n}\n\nmodule.exports = encodeGlossary;\n"]}