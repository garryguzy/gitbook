{"version":3,"sources":["../../src/utils/command.js"],"names":["is","require","childProcess","spawn","Promise","exec","command","options","d","defer","child","err","stdout","stderr","resolve","message","toString","reject","on","data","notify","promise","spawnCmd","args","error","code","Error","escapeShellArg","value","number","String","replace","optionsToShellArgs","result","key","undefined","bool","push","join","module","exports"],"mappings":"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","file":"command.js","sourcesContent":["const is = require('is');\nconst childProcess = require('child_process');\nconst spawn = require('spawn-cmd').spawn;\nconst Promise = require('./promise');\n\n/**\n * Execute a command\n *\n * @param {String} command\n * @param {Object} options\n * @return {Promise}\n */\nfunction exec(command, options) {\n    const d = Promise.defer();\n\n    const child = childProcess.exec(command, options, (err, stdout, stderr) => {\n        if (!err) {\n            return d.resolve();\n        }\n\n        err.message = stdout.toString('utf8') + stderr.toString('utf8');\n        d.reject(err);\n    });\n\n    child.stdout.on('data', (data) => {\n        d.notify(data);\n    });\n\n    child.stderr.on('data', (data) => {\n        d.notify(data);\n    });\n\n    return d.promise;\n}\n\n/**\n * Spawn an executable\n *\n * @param {String} command\n * @param {Array} args\n * @param {Object} options\n * @return {Promise}\n */\nfunction spawnCmd(command, args, options) {\n    const d = Promise.defer();\n    const child = spawn(command, args, options);\n\n    child.on('error', (error) => {\n        return d.reject(error);\n    });\n\n    child.stdout.on('data', (data) => {\n        d.notify(data);\n    });\n\n    child.stderr.on('data', (data) => {\n        d.notify(data);\n    });\n\n    child.on('close', (code) => {\n        if (code === 0) {\n            d.resolve();\n        } else {\n            d.reject(new Error('Error with command \"' + command + '\"'));\n        }\n    });\n\n    return d.promise;\n}\n\n/**\n * Transform an option object to a command line string\n *\n * @param {String|number} value\n * @param {String}\n */\nfunction escapeShellArg(value) {\n    if (is.number(value)) {\n        return value;\n    }\n\n    value = String(value);\n    value = value.replace(/\"/g, '\\\\\"');\n\n    return '\"' + value + '\"';\n}\n\n/**\n * Transform a map of options into a command line arguments string\n *\n * @param {Object} options\n * @return {String}\n */\nfunction optionsToShellArgs(options) {\n    const result = [];\n\n    for (const key in options) {\n        const value = options[key];\n\n        if (value === null || value === undefined || value === false) {\n            continue;\n        }\n\n        if (is.bool(value)) {\n            result.push(key);\n        } else {\n            result.push(key + '=' + escapeShellArg(value));\n        }\n    }\n\n    return result.join(' ');\n}\n\nmodule.exports = {\n    exec,\n    spawn: spawnCmd,\n    optionsToShellArgs\n};\n"]}