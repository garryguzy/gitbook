{"version":3,"sources":["../../src/utils/location.js"],"names":["url","require","path","isExternal","href","Boolean","parse","protocol","isDataURI","err","isRelative","isAnchor","parsed","hash","normalize","s","replace","flatten","slice","toAbsolute","_href","dir","outdir","undefined","hrefInRoot","join","relative","file","isDirectory","relativeForFile","baseFile","dirname","areIdenticalPaths","p1","p2","module","exports"],"mappings":"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","file":"location.js","sourcesContent":["const url = require('url');\nconst path = require('path');\n\n// Is the url an external url\nfunction isExternal(href) {\n    try {\n        return Boolean(url.parse(href).protocol) && !isDataURI(href);\n    } catch (err) {\n        return false;\n    }\n}\n\n// Is the url an iniline data-uri\nfunction isDataURI(href) {\n    try {\n        return Boolean(url.parse(href).protocol) && (url.parse(href).protocol === 'data:');\n    } catch (err) {\n        return false;\n    }\n}\n\n// Inverse of isExternal\nfunction isRelative(href) {\n    return !isExternal(href);\n}\n\n// Return true if the link is an achor\nfunction isAnchor(href) {\n    try {\n        const parsed = url.parse(href);\n        return !!(!parsed.protocol && !parsed.path && parsed.hash);\n    } catch (err) {\n        return false;\n    }\n}\n\n// Normalize a path to be a link\nfunction normalize(s) {\n    return path.normalize(s).replace(/\\\\/g, '/');\n}\n\n/**\n * Flatten a path, it removes the leading \"/\"\n *\n * @param {String} href\n * @return {String}\n */\nfunction flatten(href) {\n    href = normalize(href);\n    if (href[0] == '/') {\n        href = normalize(href.slice(1));\n    }\n\n    return href;\n}\n\n/**\n * Convert a relative path to absolute\n *\n * @param {String} href\n * @param {String} dir: directory parent of the file currently in rendering process\n * @param {String} outdir: directory parent from the html output\n * @return {String}\n */\nfunction toAbsolute(_href, dir, outdir) {\n    if (isExternal(_href) || isDataURI(_href)) {\n        return _href;\n    }\n\n    outdir = outdir == undefined ? dir : outdir;\n\n    _href = normalize(_href);\n    dir = normalize(dir);\n    outdir = normalize(outdir);\n\n    // Path \"_href\" inside the base folder\n    let hrefInRoot = normalize(path.join(dir, _href));\n    if (_href[0] == '/') {\n        hrefInRoot = normalize(_href.slice(1));\n    }\n\n    // Make it relative to output\n    _href = path.relative(outdir, hrefInRoot);\n\n    // Normalize windows paths\n    _href = normalize(_href);\n\n    return _href;\n}\n\n/**\n * Convert an absolute path to a relative path for a specific folder (dir)\n * ('test/', 'hello.md') -> '../hello.md'\n *\n * @param {String} dir: current directory\n * @param {String} file: absolute path of file\n * @return {String}\n */\nfunction relative(dir, file) {\n    const isDirectory = file.slice(-1) === '/';\n    return normalize(path.relative(dir, file)) + (isDirectory ? '/' : '');\n}\n\n/**\n * Convert an absolute path to a relative path for a specific folder (dir)\n * ('test/test.md', 'hello.md') -> '../hello.md'\n *\n * @param {String} baseFile: current file\n * @param {String} file: absolute path of file\n * @return {String}\n */\nfunction relativeForFile(baseFile, file) {\n    return relative(path.dirname(baseFile), file);\n}\n\n/**\n * Compare two paths, return true if they are identical\n * ('README.md', './README.md') -> true\n *\n * @param {String} p1: first path\n * @param {String} p2: second path\n * @return {Boolean}\n */\nfunction areIdenticalPaths(p1, p2) {\n    return normalize(p1) === normalize(p2);\n}\n\nmodule.exports = {\n    areIdenticalPaths,\n    isDataURI,\n    isExternal,\n    isRelative,\n    isAnchor,\n    normalize,\n    toAbsolute,\n    relative,\n    relativeForFile,\n    flatten\n};\n"]}