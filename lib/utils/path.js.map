{"version":3,"sources":["../../src/utils/path.js"],"names":["path","require","error","normalizePath","filename","normalize","isInRoot","root","length","sep","substr","resolveInRoot","args","input","reduce","current","p","slice","join","result","resolve","FileOutOfScopeError","setExtension","ext","dirname","basename","extname","isPureRelative","indexOf","module","exports"],"mappings":";;AAAA,IAAMA,OAAOC,QAAQ,MAAR,CAAb;AACA,IAAMC,QAAQD,QAAQ,SAAR,CAAd;;AAEA;AACA,SAASE,aAAT,CAAuBC,QAAvB,EAAiC;AAC7B,WAAOJ,KAAKK,SAAL,CAAeD,QAAf,CAAP;AACH;;AAED;AACA,SAASE,QAAT,CAAkBC,IAAlB,EAAwBH,QAAxB,EAAkC;AAC9BG,WAAOP,KAAKK,SAAL,CAAeE,IAAf,CAAP;AACAH,eAAWJ,KAAKK,SAAL,CAAeD,QAAf,CAAX;;AAEA,QAAIG,SAAS,GAAb,EAAkB;AACd,eAAO,IAAP;AACH;AACD,QAAIA,KAAKA,KAAKC,MAAL,GAAc,CAAnB,KAAyBR,KAAKS,GAAlC,EAAuC;AACnCF,eAAOA,OAAOP,KAAKS,GAAnB;AACH;;AAED,WAAQL,SAASM,MAAT,CAAgB,CAAhB,EAAmBH,KAAKC,MAAxB,MAAoCD,IAA5C;AACH;;AAED;AACA;AACA,SAASI,aAAT,CAAuBJ,IAAvB,EAAsC;AAAA,sCAANK,IAAM;AAANA,YAAM;AAAA;;AAClC,QAAMC,QAAQD,KACTE,MADS,CACF,UAACC,OAAD,EAAUC,CAAV,EAAgB;AACpB;AACA,YAAIA,EAAE,CAAF,KAAQ,GAAR,IAAeA,EAAE,CAAF,KAAQ,IAA3B,EAAiC,OAAOA,EAAEC,KAAF,CAAQ,CAAR,CAAP;;AAEjC,eAAOF,UAAUf,KAAKkB,IAAL,CAAUH,OAAV,EAAmBC,CAAnB,CAAV,GAAkChB,KAAKK,SAAL,CAAeW,CAAf,CAAzC;AACH,KANS,EAMP,EANO,CAAd;;AAQA,QAAMG,SAASnB,KAAKoB,OAAL,CAAab,IAAb,EAAmBM,KAAnB,CAAf;;AAEA,QAAI,CAACP,SAASC,IAAT,EAAeY,MAAf,CAAL,EAA6B;AACzB,cAAM,IAAIjB,MAAMmB,mBAAV,CAA8B;AAChCjB,sBAAUe,MADsB;AAEhCZ;AAFgC,SAA9B,CAAN;AAIH;;AAED,WAAOY,MAAP;AACH;;AAED;AACA,SAASG,YAAT,CAAsBlB,QAAtB,EAAgCmB,GAAhC,EAAqC;AACjC,WAAOvB,KAAKkB,IAAL,CACHlB,KAAKwB,OAAL,CAAapB,QAAb,CADG,EAEHJ,KAAKyB,QAAL,CAAcrB,QAAd,EAAwBJ,KAAK0B,OAAL,CAAatB,QAAb,CAAxB,IAAkDmB,GAF/C,CAAP;AAIH;;AAED;;;;;;AAMA,SAASI,cAAT,CAAwBvB,QAAxB,EAAkC;AAC9B,WAAQA,SAASwB,OAAT,CAAiB,IAAjB,MAA2B,CAA3B,IAAgCxB,SAASwB,OAAT,CAAiB,KAAjB,MAA4B,CAApE;AACH;;AAEDC,OAAOC,OAAP,GAAiB;AACbxB,sBADa;AAEbK,gCAFa;AAGbN,eAAWF,aAHE;AAIbmB,8BAJa;AAKbK;AALa,CAAjB","file":"path.js","sourcesContent":["const path = require('path');\nconst error = require('./error');\n\n// Normalize a filename\nfunction normalizePath(filename) {\n    return path.normalize(filename);\n}\n\n// Return true if file path is inside a folder\nfunction isInRoot(root, filename) {\n    root = path.normalize(root);\n    filename = path.normalize(filename);\n\n    if (root === '.') {\n        return true;\n    }\n    if (root[root.length - 1] != path.sep) {\n        root = root + path.sep;\n    }\n\n    return (filename.substr(0, root.length) === root);\n}\n\n// Resolve paths in a specific folder\n// Throw error if file is outside this folder\nfunction resolveInRoot(root, ...args) {\n    const input = args\n        .reduce((current, p) => {\n            // Handle path relative to book root (\"/README.md\")\n            if (p[0] == '/' || p[0] == '\\\\') return p.slice(1);\n\n            return current ? path.join(current, p) : path.normalize(p);\n        }, '');\n\n    const result = path.resolve(root, input);\n\n    if (!isInRoot(root, result)) {\n        throw new error.FileOutOfScopeError({\n            filename: result,\n            root\n        });\n    }\n\n    return result;\n}\n\n// Chnage extension of a file\nfunction setExtension(filename, ext) {\n    return path.join(\n        path.dirname(filename),\n        path.basename(filename, path.extname(filename)) + ext\n    );\n}\n\n/*\n    Return true if a filename is relative.\n\n    @param {String}\n    @return {Boolean}\n*/\nfunction isPureRelative(filename) {\n    return (filename.indexOf('./') === 0 || filename.indexOf('../') === 0);\n}\n\nmodule.exports = {\n    isInRoot,\n    resolveInRoot,\n    normalize: normalizePath,\n    setExtension,\n    isPureRelative\n};\n"]}