{"version":3,"sources":["../../src/utils/images.js"],"names":["Promise","require","command","fs","error","convertSVGToPNG","source","dest","options","existsSync","reject","FileNotFoundError","filename","spawn","fail","err","code","RequireInstallError","cmd","install","then","Error","convertSVGBufferToPNG","buf","tmpFile","postfix","tmpSvg","writeFile","convertInlinePNG","test","base64data","split","Buffer","module","exports"],"mappings":";;AAAA,IAAMA,UAAUC,QAAQ,WAAR,CAAhB;AACA,IAAMC,UAAUD,QAAQ,WAAR,CAAhB;AACA,IAAME,KAAKF,QAAQ,MAAR,CAAX;AACA,IAAMG,QAAQH,QAAQ,SAAR,CAAd;;AAEA;AACA,SAASI,eAAT,CAAyBC,MAAzB,EAAiCC,IAAjC,EAAuCC,OAAvC,EAAgD;AAC5C,QAAI,CAACL,GAAGM,UAAH,CAAcH,MAAd,CAAL,EAA4B,OAAON,QAAQU,MAAR,CAAe,IAAIN,MAAMO,iBAAV,CAA4B,EAAEC,UAAUN,MAAZ,EAA5B,CAAf,CAAP;;AAE5B,WAAOJ,QAAQW,KAAR,CAAc,WAAd,EAA2B,CAACP,MAAD,EAASC,IAAT,CAA3B,EACNO,IADM,CACD,UAACC,GAAD,EAAS;AACX,YAAIA,IAAIC,IAAJ,IAAY,QAAhB,EAA0B;AACtBD,kBAAMX,MAAMa,mBAAN,CAA0B;AAC5BC,qBAAK,WADuB;AAE5BC,yBAAS;AAFmB,aAA1B,CAAN;AAIH;AACD,cAAMJ,GAAN;AACH,KATM,EAUNK,IAVM,CAUD,YAAM;AACR,YAAIjB,GAAGM,UAAH,CAAcF,IAAd,CAAJ,EAAyB;;AAEzB,cAAM,IAAIc,KAAJ,CAAU,sBAAsBf,MAAtB,GAA+B,QAA/B,GAA0CC,IAApD,CAAN;AACH,KAdM,CAAP;AAeH;;AAED;AACA,SAASe,qBAAT,CAA+BC,GAA/B,EAAoChB,IAApC,EAA0C;AACtC;AACA,WAAOJ,GAAGqB,OAAH,CAAW;AACdC,iBAAS;AADK,KAAX,EAGNL,IAHM,CAGD,UAACM,MAAD,EAAY;AACd,eAAOvB,GAAGwB,SAAH,CAAaD,MAAb,EAAqBH,GAArB,EACNH,IADM,CACD,YAAM;AACR,mBAAOf,gBAAgBqB,MAAhB,EAAwBnB,IAAxB,CAAP;AACH,SAHM,CAAP;AAIH,KARM,CAAP;AASH;;AAED;AACA,SAASqB,gBAAT,CAA0BtB,MAA1B,EAAkCC,IAAlC,EAAwC;AACpC,QAAI,CAAC,oBAAoBsB,IAApB,CAAyBvB,MAAzB,CAAL,EAAuC,OAAON,QAAQU,MAAR,CAAe,IAAIW,KAAJ,CAAU,8BAAV,CAAf,CAAP;;AAEvC,QAAMS,aAAaxB,OAAOyB,KAAP,CAAa,wBAAb,EAAuC,CAAvC,CAAnB;AACA,QAAMR,MAAM,IAAIS,MAAJ,CAAWF,UAAX,EAAuB,QAAvB,CAAZ;;AAEA,WAAO3B,GAAGwB,SAAH,CAAapB,IAAb,EAAmBgB,GAAnB,EACNH,IADM,CACD,YAAM;AACR,YAAIjB,GAAGM,UAAH,CAAcF,IAAd,CAAJ,EAAyB;;AAEzB,cAAM,IAAIc,KAAJ,CAAU,sBAAsBf,MAAtB,GAA+B,QAA/B,GAA0CC,IAApD,CAAN;AACH,KALM,CAAP;AAMH;;AAED0B,OAAOC,OAAP,GAAiB;AACb7B,oCADa;AAEbiB,gDAFa;AAGbM;AAHa,CAAjB","file":"images.js","sourcesContent":["const Promise = require('./promise');\nconst command = require('./command');\nconst fs = require('./fs');\nconst error = require('./error');\n\n// Convert a svg file to a pmg\nfunction convertSVGToPNG(source, dest, options) {\n    if (!fs.existsSync(source)) return Promise.reject(new error.FileNotFoundError({ filename: source }));\n\n    return command.spawn('svgexport', [source, dest])\n    .fail((err) => {\n        if (err.code == 'ENOENT') {\n            err = error.RequireInstallError({\n                cmd: 'svgexport',\n                install: 'Install it using: \"npm install svgexport -g\"'\n            });\n        }\n        throw err;\n    })\n    .then(() => {\n        if (fs.existsSync(dest)) return;\n\n        throw new Error('Error converting ' + source + ' into ' + dest);\n    });\n}\n\n// Convert a svg buffer to a png file\nfunction convertSVGBufferToPNG(buf, dest) {\n    // Create a temporary SVG file to convert\n    return fs.tmpFile({\n        postfix: '.svg'\n    })\n    .then((tmpSvg) => {\n        return fs.writeFile(tmpSvg, buf)\n        .then(() => {\n            return convertSVGToPNG(tmpSvg, dest);\n        });\n    });\n}\n\n// Converts a inline data: to png file\nfunction convertInlinePNG(source, dest) {\n    if (!/^data\\:image\\/png/.test(source)) return Promise.reject(new Error('Source is not a PNG data-uri'));\n\n    const base64data = source.split('data:image/png;base64,')[1];\n    const buf = new Buffer(base64data, 'base64');\n\n    return fs.writeFile(dest, buf)\n    .then(() => {\n        if (fs.existsSync(dest)) return;\n\n        throw new Error('Error converting ' + source + ' into ' + dest);\n    });\n}\n\nmodule.exports = {\n    convertSVGToPNG,\n    convertSVGBufferToPNG,\n    convertInlinePNG\n};\n"]}