{"version":3,"sources":["../../src/utils/fs.js"],"names":["fs","require","mkdirp","destroy","rmdir","tmp","request","path","cp","cpr","Promise","writeStream","filename","st","d","defer","wstream","createWriteStream","cleanup","removeAllListeners","on","resolve","err","reject","pipe","promise","fileExists","exists","genTmpFile","opts","nfcall","file","get","genTmpDir","dir","download","uri","dest","uniqueFilename","base","ext","extname","join","dirname","basename","_filename","i","existsSync","relative","ensureFile","rmDir","assertFile","filePath","generator","then","pickFile","rootFolder","fileName","result","undefined","ensureFolder","fail","module","exports","nfbind","readFile","writeFile","stat","statSync","readdir","readStream","createReadStream","copy","copyDir","tmpFile","tmpDir"],"mappings":"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","file":"fs.js","sourcesContent":["const fs = require('graceful-fs');\nconst mkdirp = require('mkdirp');\nconst destroy = require('destroy');\nconst rmdir = require('rmdir');\nconst tmp = require('tmp');\nconst request = require('request');\nconst path = require('path');\nconst cp = require('cp');\nconst cpr = require('cpr');\n\nconst Promise = require('./promise');\n\n// Write a stream to a file\nfunction writeStream(filename, st) {\n    const d = Promise.defer();\n\n    const wstream = fs.createWriteStream(filename);\n    const cleanup = function() {\n        destroy(wstream);\n        wstream.removeAllListeners();\n    };\n\n    wstream.on('finish', () => {\n        cleanup();\n        d.resolve();\n    });\n    wstream.on('error', (err) => {\n        cleanup();\n        d.reject(err);\n    });\n\n    st.on('error', (err) => {\n        cleanup();\n        d.reject(err);\n    });\n\n    st.pipe(wstream);\n\n    return d.promise;\n}\n\n// Return a promise resolved with a boolean\nfunction fileExists(filename) {\n    const d = Promise.defer();\n\n    fs.exists(filename, (exists) => {\n        d.resolve(exists);\n    });\n\n    return d.promise;\n}\n\n// Generate temporary file\nfunction genTmpFile(opts) {\n    return Promise.nfcall(tmp.file, opts)\n        .get(0);\n}\n\n// Generate temporary dir\nfunction genTmpDir(opts) {\n    return Promise.nfcall(tmp.dir, opts)\n        .get(0);\n}\n\n// Download an image\nfunction download(uri, dest) {\n    return writeStream(dest, request(uri));\n}\n\n// Find a filename available in a folder\nfunction uniqueFilename(base, filename) {\n    const ext = path.extname(filename);\n    filename = path.resolve(base, filename);\n    filename = path.join(path.dirname(filename), path.basename(filename, ext));\n\n    let _filename = filename + ext;\n\n    let i = 0;\n    while (fs.existsSync(filename)) {\n        _filename = filename + '_' + i + ext;\n        i = i + 1;\n    }\n\n    return Promise(path.relative(base, _filename));\n}\n\n// Create all required folder to create a file\nfunction ensureFile(filename) {\n    const base = path.dirname(filename);\n    return Promise.nfcall(mkdirp, base);\n}\n\n// Remove a folder\nfunction rmDir(base) {\n    return Promise.nfcall(rmdir, base, {\n        fs\n    });\n}\n\n/**\n    Assert a file, if it doesn't exist, call \"generator\"\n\n    @param {String} filePath\n    @param {Function} generator\n    @return {Promise}\n*/\nfunction assertFile(filePath, generator) {\n    return fileExists(filePath)\n    .then((exists) => {\n        if (exists) return;\n\n        return generator();\n    });\n}\n\n/**\n    Pick a file, returns the absolute path if exists, undefined otherwise\n\n    @param {String} rootFolder\n    @param {String} fileName\n    @return {String}\n*/\nfunction pickFile(rootFolder, fileName) {\n    const result = path.join(rootFolder, fileName);\n    if (fs.existsSync(result)) {\n        return result;\n    }\n\n    return undefined;\n}\n\n/**\n    Ensure that a directory exists and is empty\n\n    @param {String} folder\n    @return {Promise}\n*/\nfunction ensureFolder(rootFolder) {\n    return rmDir(rootFolder)\n    .fail(() => {\n        return Promise();\n    })\n    .then(() => {\n        return Promise.nfcall(mkdirp, rootFolder);\n    });\n}\n\nmodule.exports = {\n    exists: fileExists,\n    existsSync: fs.existsSync,\n    mkdirp: Promise.nfbind(mkdirp),\n    readFile: Promise.nfbind(fs.readFile),\n    writeFile: Promise.nfbind(fs.writeFile),\n    assertFile,\n    pickFile,\n    stat: Promise.nfbind(fs.stat),\n    statSync: fs.statSync,\n    readdir: Promise.nfbind(fs.readdir),\n    writeStream,\n    readStream: fs.createReadStream,\n    copy: Promise.nfbind(cp),\n    copyDir: Promise.nfbind(cpr),\n    tmpFile: genTmpFile,\n    tmpDir: genTmpDir,\n    download,\n    uniqueFilename,\n    ensureFile,\n    ensureFolder,\n    rmDir\n};\n"]}