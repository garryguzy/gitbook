{"version":3,"sources":["../../src/utils/promise.js"],"names":["Q","require","Immutable","process","env","DEBUG","CI","longStackSupport","reduce","arr","iter","base","Iterable","isIterable","List","prev","elem","key","then","val","forEach","el","serie","before","item","r","push","some","i","mapAsList","entry","out","map","Map","isMap","type","OrderedMap","isOrderedMap","value","result","wrap","func","args","module","exports","wrapfn"],"mappings":"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","file":"promise.js","sourcesContent":["const Q = require('q');\nconst Immutable = require('immutable');\n\n// Debugging for long stack traces\nif (process.env.DEBUG || process.env.CI) {\n    Q.longStackSupport = true;\n}\n\n/**\n * Reduce an array to a promise\n *\n * @param {Array|List} arr\n * @param {Function(value, element, index)}\n * @return {Promise<Mixed>}\n */\nfunction reduce(arr, iter, base) {\n    arr = Immutable.Iterable.isIterable(arr) ? arr : Immutable.List(arr);\n\n    return arr.reduce((prev, elem, key) => {\n        return prev\n        .then((val) => {\n            return iter(val, elem, key);\n        });\n    }, Q(base));\n}\n\n/**\n * Iterate over an array using an async iter\n *\n * @param {Array|List} arr\n * @param {Function(value, element, index)}\n * @return {Promise}\n */\nfunction forEach(arr, iter) {\n    return reduce(arr, (val, el, key) => {\n        return iter(el, key);\n    });\n}\n\n/**\n * Transform an array\n *\n * @param {Array|List} arr\n * @param {Function(value, element, index)}\n * @return {Promise}\n */\nfunction serie(arr, iter, base) {\n    return reduce(arr, (before, item, key) => {\n        return Q(iter(item, key))\n        .then((r) => {\n            before.push(r);\n            return before;\n        });\n    }, []);\n}\n\n/**\n * Iter over an array and return first result (not null)\n *\n * @param {Array|List} arr\n * @param {Function(element, index)}\n * @return {Promise<Mixed>}\n */\nfunction some(arr, iter) {\n    arr = Immutable.List(arr);\n\n    return arr.reduce((prev, elem, i) => {\n        return prev.then((val) => {\n            if (val) return val;\n\n            return iter(elem, i);\n        });\n    }, Q());\n}\n\n/**\n * Map an array using an async (promised) iterator\n *\n * @param {Array|List} arr\n * @param {Function(element, index)}\n * @return {Promise<List>}\n */\nfunction mapAsList(arr, iter) {\n    return reduce(arr, (prev, entry, i) => {\n        return Q(iter(entry, i))\n        .then((out) => {\n            prev.push(out);\n            return prev;\n        });\n    }, []);\n}\n\n/**\n * Map an array or map\n *\n * @param {Array|List|Map|OrderedMap} arr\n * @param {Function(element, key)}\n * @return {Promise<List|Map|OrderedMap>}\n */\nfunction map(arr, iter) {\n    if (Immutable.Map.isMap(arr)) {\n        let type = 'Map';\n        if (Immutable.OrderedMap.isOrderedMap(arr)) {\n            type = 'OrderedMap';\n        }\n\n        return mapAsList(arr, (value, key) => {\n            return Q(iter(value, key))\n            .then((result) => {\n                return [key, result];\n            });\n        })\n        .then((result) => {\n            return Immutable[type](result);\n        });\n    } else {\n        return mapAsList(arr, iter)\n        .then((result) => {\n            return Immutable.List(result);\n        });\n    }\n}\n\n\n/**\n * Wrap a function in a promise\n *\n * @param {Function} func\n * @return {Funciton}\n */\nfunction wrap(func) {\n    return function(...args) {\n        return Q()\n        .then(() => {\n            return func(...args);\n        });\n    };\n}\n\nmodule.exports = Q;\nmodule.exports.forEach = forEach;\nmodule.exports.reduce = reduce;\nmodule.exports.map = map;\nmodule.exports.serie = serie;\nmodule.exports.some = some;\nmodule.exports.wrapfn = wrap;\n"]}