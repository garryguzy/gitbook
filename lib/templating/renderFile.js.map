{"version":3,"sources":["../../src/templating/renderFile.js"],"names":["Promise","require","error","render","renderTemplateFile","engine","filePath","context","loader","getLoader","resolvedFilePath","resolve","then","async","getSource","deferred","defer","makeNodeResolver","promise","result","TemplateError","Error","filename","path","src","module","exports"],"mappings":";;AAAA,IAAMA,UAAUC,QAAQ,kBAAR,CAAhB;AACA,IAAMC,QAAQD,QAAQ,gBAAR,CAAd;AACA,IAAME,SAASF,QAAQ,UAAR,CAAf;;AAEA;;;;;;;;AAQA,SAASG,kBAAT,CAA4BC,MAA5B,EAAoCC,QAApC,EAA8CC,OAA9C,EAAuD;AACnD,QAAMC,SAASH,OAAOI,SAAP,EAAf;;AAEA;AACA,QAAMC,mBAAmBF,OAAOG,OAAP,CAAe,IAAf,EAAqBL,QAArB,CAAzB;;AAEA,WAAON,UACNY,IADM,CACD,YAAM;AACR,YAAI,CAACJ,OAAOK,KAAZ,EAAmB;AACf,mBAAOL,OAAOM,SAAP,CAAiBJ,gBAAjB,CAAP;AACH;;AAED,YAAMK,WAAWf,QAAQgB,KAAR,EAAjB;AACAR,eAAOM,SAAP,CAAiBJ,gBAAjB,EAAmCK,SAASE,gBAAT,EAAnC;AACA,eAAOF,SAASG,OAAhB;AACH,KATM,EAUNN,IAVM,CAUD,UAACO,MAAD,EAAY;AACd,YAAI,CAACA,MAAL,EAAa;AACT,kBAAMjB,MAAMkB,aAAN,CAAoB,IAAIC,KAAJ,CAAU,WAAV,CAApB,EAA4C;AAC9CC,0BAAUhB;AADoC,aAA5C,CAAN;AAGH;;AAED,eAAOH,OAAOE,MAAP,EAAec,OAAOI,IAAtB,EAA4BJ,OAAOK,GAAnC,EAAwCjB,OAAxC,CAAP;AACH,KAlBM,CAAP;AAoBH;;AAEDkB,OAAOC,OAAP,GAAiBtB,kBAAjB","file":"renderFile.js","sourcesContent":["const Promise = require('../utils/promise');\nconst error = require('../utils/error');\nconst render = require('./render');\n\n/**\n * Render a template\n *\n * @param {TemplateEngine} engine\n * @param {String} filePath\n * @param {Object} context\n * @return {Promise<TemplateOutput>}\n */\nfunction renderTemplateFile(engine, filePath, context) {\n    const loader = engine.getLoader();\n\n    // Resolve the filePath\n    const resolvedFilePath = loader.resolve(null, filePath);\n\n    return Promise()\n    .then(() => {\n        if (!loader.async) {\n            return loader.getSource(resolvedFilePath);\n        }\n\n        const deferred = Promise.defer();\n        loader.getSource(resolvedFilePath, deferred.makeNodeResolver());\n        return deferred.promise;\n    })\n    .then((result) => {\n        if (!result) {\n            throw error.TemplateError(new Error('Not found'), {\n                filename: filePath\n            });\n        }\n\n        return render(engine, result.path, result.src, context);\n    });\n\n}\n\nmodule.exports = renderTemplateFile;\n"]}