{"version":3,"sources":["../../src/templating/listShortcuts.js"],"names":["require","List","parsers","listShortcuts","blocks","filePath","parser","getForFile","map","block","getShortcuts","filter","shortcuts","acceptParser","name","module","exports"],"mappings":";;eAAiBA,QAAQ,WAAR,C;IAATC,I,YAAAA,I;;AACR,IAAMC,UAAUF,QAAQ,YAAR,CAAhB;;AAEA;;;;;;;;AAQA,SAASG,aAAT,CAAuBC,MAAvB,EAA+BC,QAA/B,EAAyC;AACrC,QAAMC,SAASJ,QAAQK,UAAR,CAAmBF,QAAnB,CAAf;;AAEA,QAAI,CAACC,MAAL,EAAa;AACT,eAAOL,MAAP;AACH;;AAED,WAAOG,OACFI,GADE,CACE,UAACC,KAAD,EAAW;AACZ,eAAOA,MAAMC,YAAN,EAAP;AACH,KAHE,EAIFC,MAJE,CAIK,UAACC,SAAD,EAAe;AACnB,eACIA,aACAA,UAAUC,YAAV,CAAuBP,OAAOQ,IAA9B,CAFJ;AAIH,KATE,CAAP;AAUH;;AAEDC,OAAOC,OAAP,GAAiBb,aAAjB","file":"listShortcuts.js","sourcesContent":["const { List } = require('immutable');\nconst parsers = require('../parsers');\n\n/**\n * Return a list of all shortcuts that can apply\n * to a file for a TemplatEngine\n *\n * @param {List<TemplateBlock>} engine\n * @param {String} filePath\n * @return {List<TemplateShortcut>} shortcuts\n */\nfunction listShortcuts(blocks, filePath) {\n    const parser = parsers.getForFile(filePath);\n\n    if (!parser) {\n        return List();\n    }\n\n    return blocks\n        .map((block) => {\n            return block.getShortcuts();\n        })\n        .filter((shortcuts) => {\n            return (\n                shortcuts &&\n                shortcuts.acceptParser(parser.name)\n            );\n        });\n}\n\nmodule.exports = listShortcuts;\n"]}