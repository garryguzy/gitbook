{"version":3,"sources":["../../src/templating/conrefsLoader.js"],"names":["path","require","nunjucks","fs","LocationUtils","PathUtils","Git","ConrefsLoader","Loader","extend","async","init","rootFolder","transformFn","logger","git","getSource","sourceURL","callback","that","resolve","then","filepath","debug","ln","readFile","source","toString","src","nodeify","from","to","isInRoot","fromRelative","relative","href","toAbsolute","dirname","resolveInRoot","gitRoot","resolveRoot","isRelative","filename","module","exports"],"mappings":"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","file":"conrefsLoader.js","sourcesContent":["const path = require('path');\nconst nunjucks = require('nunjucks');\n\nconst fs = require('../utils/fs');\nconst LocationUtils = require('../utils/location');\nconst PathUtils = require('../utils/path');\nconst Git = require('../utils/git');\n\n\n/**\n * Template loader resolving both:\n *      - relative url (\"./test.md\")\n *      - absolute url (\"/test.md\")\n *      - git url (\"\")\n *\n * @param {String} rootFolder\n * @param {Function(filePath, source)} transformFn (optional)\n * @param {Logger} logger (optional)\n */\nconst ConrefsLoader = nunjucks.Loader.extend({\n    async: true,\n\n    init(rootFolder, transformFn, logger, git = new Git()) {\n        this.rootFolder = rootFolder;\n        this.transformFn = transformFn;\n        this.logger = logger;\n        this.git = git;\n    },\n\n    getSource(sourceURL, callback) {\n        const that = this;\n\n        this.git.resolve(sourceURL)\n        .then((filepath) => {\n            // Is local file\n            if (!filepath) {\n                filepath = path.resolve(sourceURL);\n            } else {\n                if (that.logger) that.logger.debug.ln('resolve from git', sourceURL, 'to', filepath);\n            }\n\n            // Read file from absolute path\n            return fs.readFile(filepath)\n            .then((source) => {\n                source = source.toString('utf8');\n\n                if (that.transformFn) {\n                    return that.transformFn(filepath, source);\n                }\n\n                return source;\n            })\n            .then((source) => {\n                return {\n                    src: source,\n                    path: filepath\n                };\n            });\n        })\n        .nodeify(callback);\n    },\n\n    resolve(from, to) {\n        // If origin is in the book, we enforce result file to be in the book\n        if (PathUtils.isInRoot(this.rootFolder, from)) {\n\n            // Path of current template in the rootFolder (not absolute to fs)\n            const fromRelative = path.relative(this.rootFolder, from);\n\n            // Resolve \"to\" to a filepath relative to rootFolder\n            const href = LocationUtils.toAbsolute(to, path.dirname(fromRelative), '');\n\n            // Return absolute path\n            return PathUtils.resolveInRoot(this.rootFolder, href);\n        }\n\n        // If origin is in a git repository, we resolve file in the git repository\n        const gitRoot = this.git.resolveRoot(from);\n        if (gitRoot) {\n            return PathUtils.resolveInRoot(gitRoot, to);\n        }\n\n        // If origin is not in the book (include from a git content ref)\n        return path.resolve(path.dirname(from), to);\n    },\n\n    // Handle all files as relative, so that nunjucks pass responsability to 'resolve'\n    isRelative(filename) {\n        return LocationUtils.isRelative(filename);\n    }\n});\n\nmodule.exports = ConrefsLoader;\n"]}